(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{0:function(t,e){var i={"[object Function]":1,"[object RegExp]":1,"[object Date]":1,"[object Error]":1,"[object CanvasGradient]":1,"[object CanvasPattern]":1,"[object Image]":1,"[object Canvas]":1},r={"[object Int8Array]":1,"[object Uint8Array]":1,"[object Uint8ClampedArray]":1,"[object Int16Array]":1,"[object Uint16Array]":1,"[object Int32Array]":1,"[object Uint32Array]":1,"[object Float32Array]":1,"[object Float64Array]":1},n=Object.prototype.toString,a=Array.prototype,o=a.forEach,s=a.filter,h=a.slice,l=a.map,u=a.reduce,c={};function f(t){if(null==t||"object"!=typeof t)return t;var e=t,a=n.call(t);if("[object Array]"===a){if(!T(t)){e=[];for(var o=0,s=t.length;o<s;o++)e[o]=f(t[o])}}else if(r[a]){if(!T(t)){var h=t.constructor;if(t.constructor.from)e=h.from(t);else{e=new h(t.length);for(o=0,s=t.length;o<s;o++)e[o]=f(t[o])}}}else if(!i[a]&&!T(t)&&!b(t))for(var l in e={},t)t.hasOwnProperty(l)&&(e[l]=f(t[l]));return e}function d(t,e,i){if(!x(e)||!x(t))return i?f(e):t;for(var r in e)if(e.hasOwnProperty(r)){var n=t[r],a=e[r];!x(a)||!x(n)||y(a)||y(n)||b(a)||b(n)||w(a)||w(n)||T(a)||T(n)?!i&&r in t||(t[r]=f(e[r])):d(n,a,i)}return t}function p(t,e,i){for(var r in e)e.hasOwnProperty(r)&&(i?null!=e[r]:null==t[r])&&(t[r]=e[r]);return t}var v,g=function(){return c.createCanvas()};function m(t,e,i){if(t&&e)if(t.forEach&&t.forEach===o)t.forEach(e,i);else if(t.length===+t.length)for(var r=0,n=t.length;r<n;r++)e.call(i,t[r],r,t);else for(var a in t)t.hasOwnProperty(a)&&e.call(i,t[a],a,t)}function _(t,e){var i=h.call(arguments,2);return function(){return t.apply(e,i.concat(h.call(arguments)))}}function y(t){return"[object Array]"===n.call(t)}function x(t){var e=typeof t;return"function"===e||!!t&&"object"==e}function w(t){return!!i[n.call(t)]}function b(t){return"object"==typeof t&&"number"==typeof t.nodeType&&"object"==typeof t.ownerDocument}c.createCanvas=function(){return document.createElement("canvas")};var k="__ec_primitive__";function T(t){return t[k]}function S(t){var e=y(t),i=this;function r(t,r){e?i.set(t,r):i.set(r,t)}t instanceof S?t.each(r):t&&m(t,r)}S.prototype={constructor:S,get:function(t){return this.hasOwnProperty(t)?this[t]:null},set:function(t,e){return this[t]=e},each:function(t,e){for(var i in void 0!==e&&(t=_(t,e)),this)this.hasOwnProperty(i)&&t(this[i],i)},removeKey:function(t){delete this[t]}},e.$override=function(t,e){"createCanvas"===t&&(v=null),c[t]=e},e.clone=f,e.merge=d,e.mergeAll=function(t,e){for(var i=t[0],r=1,n=t.length;r<n;r++)i=d(i,t[r],e);return i},e.extend=function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i]);return t},e.defaults=p,e.createCanvas=g,e.getContext=function(){return v||(v=g().getContext("2d")),v},e.indexOf=function(t,e){if(t){if(t.indexOf)return t.indexOf(e);for(var i=0,r=t.length;i<r;i++)if(t[i]===e)return i}return-1},e.inherits=function(t,e){var i=t.prototype;function r(){}for(var n in r.prototype=e.prototype,t.prototype=new r,i)t.prototype[n]=i[n];t.prototype.constructor=t,t.superClass=e},e.mixin=function(t,e,i){p(t="prototype"in t?t.prototype:t,e="prototype"in e?e.prototype:e,i)},e.isArrayLike=function(t){if(t)return"string"!=typeof t&&"number"==typeof t.length},e.each=m,e.map=function(t,e,i){if(t&&e){if(t.map&&t.map===l)return t.map(e,i);for(var r=[],n=0,a=t.length;n<a;n++)r.push(e.call(i,t[n],n,t));return r}},e.reduce=function(t,e,i,r){if(t&&e){if(t.reduce&&t.reduce===u)return t.reduce(e,i,r);for(var n=0,a=t.length;n<a;n++)i=e.call(r,i,t[n],n,t);return i}},e.filter=function(t,e,i){if(t&&e){if(t.filter&&t.filter===s)return t.filter(e,i);for(var r=[],n=0,a=t.length;n<a;n++)e.call(i,t[n],n,t)&&r.push(t[n]);return r}},e.find=function(t,e,i){if(t&&e)for(var r=0,n=t.length;r<n;r++)if(e.call(i,t[r],r,t))return t[r]},e.bind=_,e.curry=function(t){var e=h.call(arguments,1);return function(){return t.apply(this,e.concat(h.call(arguments)))}},e.isArray=y,e.isFunction=function(t){return"function"==typeof t},e.isString=function(t){return"[object String]"===n.call(t)},e.isObject=x,e.isBuiltInObject=w,e.isTypedArray=function(t){return!!r[n.call(t)]},e.isDom=b,e.eqNaN=function(t){return t!=t},e.retrieve=function(t){for(var e=0,i=arguments.length;e<i;e++)if(null!=arguments[e])return arguments[e]},e.retrieve2=function(t,e){return null!=t?t:e},e.retrieve3=function(t,e,i){return null!=t?t:null!=e?e:i},e.slice=function(){return Function.call.apply(h,arguments)},e.normalizeCssArray=function(t){if("number"==typeof t)return[t,t,t,t];var e=t.length;return 2===e?[t[0],t[1],t[0],t[1]]:3===e?[t[0],t[1],t[2],t[1]]:t},e.assert=function(t,e){if(!t)throw new Error(e)},e.trim=function(t){return null==t?null:"function"==typeof t.trim?t.trim():t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")},e.setAsPrimitive=function(t){t[k]=!0},e.isPrimitive=T,e.createHashMap=function(t){return new S(t)},e.concatArray=function(t,e){for(var i=new t.constructor(t.length+e.length),r=0;r<t.length;r++)i[r]=t[r];var n=t.length;for(r=0;r<e.length;r++)i[r+n]=e[r];return i},e.noop=function(){}},102:function(t,e,i){var r=i(190),n=i(19),a=i(0),o=i(379),s=i(381),h=i(385),l=i(387),u=i(388),c=!n.canvasSupported,f={canvas:h},d={};var p=function(t,e,i){i=i||{},this.dom=e,this.id=t;var r=this,h=new s,d=i.renderer;if(c){if(!f.vml)throw new Error("You need to require 'zrender/vml/vml' to support IE8");d="vml"}else d&&f[d]||(d="canvas");var p=new f[d](e,h,i,t);this.storage=h,this.painter=p;var v=n.node||n.worker?null:new u(p.getViewportRoot());this.handler=new o(h,p,v,p.root),this.animation=new l({stage:{update:a.bind(this.flush,this)}}),this.animation.start(),this._needsRefresh;var g=h.delFromStorage,m=h.addToStorage;h.delFromStorage=function(t){g.call(h,t),t&&t.removeSelfFromZr(r)},h.addToStorage=function(t){m.call(h,t),t.addSelfToZr(r)}};p.prototype={constructor:p,getId:function(){return this.id},add:function(t){this.storage.addRoot(t),this._needsRefresh=!0},remove:function(t){this.storage.delRoot(t),this._needsRefresh=!0},configLayer:function(t,e){this.painter.configLayer&&this.painter.configLayer(t,e),this._needsRefresh=!0},setBackgroundColor:function(t){this.painter.setBackgroundColor&&this.painter.setBackgroundColor(t),this._needsRefresh=!0},refreshImmediately:function(){this._needsRefresh=!1,this.painter.refresh(),this._needsRefresh=!1},refresh:function(){this._needsRefresh=!0},flush:function(){var t;this._needsRefresh&&(t=!0,this.refreshImmediately()),this._needsRefreshHover&&(t=!0,this.refreshHoverImmediately()),t&&this.trigger("rendered")},addHover:function(t,e){this.painter.addHover&&(this.painter.addHover(t,e),this.refreshHover())},removeHover:function(t){this.painter.removeHover&&(this.painter.removeHover(t),this.refreshHover())},clearHover:function(){this.painter.clearHover&&(this.painter.clearHover(),this.refreshHover())},refreshHover:function(){this._needsRefreshHover=!0},refreshHoverImmediately:function(){this._needsRefreshHover=!1,this.painter.refreshHover&&this.painter.refreshHover()},resize:function(t){t=t||{},this.painter.resize(t.width,t.height),this.handler.resize()},clearAnimation:function(){this.animation.clear()},getWidth:function(){return this.painter.getWidth()},getHeight:function(){return this.painter.getHeight()},pathToImage:function(t,e){return this.painter.pathToImage(t,e)},setCursorStyle:function(t){this.handler.setCursorStyle(t)},findHover:function(t,e){return this.handler.findHover(t,e)},on:function(t,e,i){this.handler.on(t,e,i)},off:function(t,e){this.handler.off(t,e)},trigger:function(t,e){this.handler.trigger(t,e)},clear:function(){this.storage.delRoot(),this.painter.clear()},dispose:function(){var t;this.animation.stop(),this.clear(),this.storage.dispose(),this.painter.dispose(),this.handler.dispose(),this.animation=this.storage=this.painter=this.handler=null,t=this.id,delete d[t]}},e.version="4.0.4",e.init=function(t,e){var i=new p(r(),t,e);return d[i.id]=i,i},e.dispose=function(t){if(t)t.dispose();else{for(var e in d)d.hasOwnProperty(e)&&d[e].dispose();d={}}return this},e.getInstance=function(t){return d[t]},e.registerPainter=function(t,e){f[t]=e}},103:function(t,e,i){var r=i(0),n=i(191),a=i(17),o=function(t){for(var e in t=t||{},n.call(this,t),t)t.hasOwnProperty(e)&&(this[e]=t[e]);this._children=[],this.__storage=null,this.__dirty=!0};o.prototype={constructor:o,isGroup:!0,type:"group",silent:!1,children:function(){return this._children.slice()},childAt:function(t){return this._children[t]},childOfName:function(t){for(var e=this._children,i=0;i<e.length;i++)if(e[i].name===t)return e[i]},childCount:function(){return this._children.length},add:function(t){return t&&t!==this&&t.parent!==this&&(this._children.push(t),this._doAdd(t)),this},addBefore:function(t,e){if(t&&t!==this&&t.parent!==this&&e&&e.parent===this){var i=this._children,r=i.indexOf(e);r>=0&&(i.splice(r,0,t),this._doAdd(t))}return this},_doAdd:function(t){t.parent&&t.parent.remove(t),t.parent=this;var e=this.__storage,i=this.__zr;e&&e!==t.__storage&&(e.addToStorage(t),t instanceof o&&t.addChildrenToStorage(e)),i&&i.refresh()},remove:function(t){var e=this.__zr,i=this.__storage,n=this._children,a=r.indexOf(n,t);return a<0?this:(n.splice(a,1),t.parent=null,i&&(i.delFromStorage(t),t instanceof o&&t.delChildrenFromStorage(i)),e&&e.refresh(),this)},removeAll:function(){var t,e,i=this._children,r=this.__storage;for(e=0;e<i.length;e++)t=i[e],r&&(r.delFromStorage(t),t instanceof o&&t.delChildrenFromStorage(r)),t.parent=null;return i.length=0,this},eachChild:function(t,e){for(var i=this._children,r=0;r<i.length;r++){var n=i[r];t.call(e,n,r)}return this},traverse:function(t,e){for(var i=0;i<this._children.length;i++){var r=this._children[i];t.call(e,r),"group"===r.type&&r.traverse(t,e)}return this},addChildrenToStorage:function(t){for(var e=0;e<this._children.length;e++){var i=this._children[e];t.addToStorage(i),i instanceof o&&i.addChildrenToStorage(t)}},delChildrenFromStorage:function(t){for(var e=0;e<this._children.length;e++){var i=this._children[e];t.delFromStorage(i),i instanceof o&&i.delChildrenFromStorage(t)}},dirty:function(){return this.__dirty=!0,this.__zr&&this.__zr.refresh(),this},getBoundingRect:function(t){for(var e=null,i=new a(0,0,0,0),r=t||this._children,n=[],o=0;o<r.length;o++){var s=r[o];if(!s.ignore&&!s.invisible){var h=s.getBoundingRect(),l=s.getLocalTransform(n);l?(i.copy(h),i.applyTransform(l),(e=e||i.clone()).union(i)):(e=e||h.clone()).union(h)}}return e||i}},r.inherits(o,n);var s=o;t.exports=s},104:function(t,e){var i=1;"undefined"!=typeof window&&(i=Math.max(window.devicePixelRatio||1,1));var r=i;e.debugMode=0,e.devicePixelRatio=r},105:function(t,e,i){var r=i(0),n=r.retrieve2,a=r.retrieve3,o=r.each,s=r.normalizeCssArray,h=r.isString,l=r.isObject,u=i(33),c=i(199),f=i(140),d=i(195),p={left:1,right:1,center:1},v={top:1,bottom:1,middle:1};function g(t){if(t){t.font=u.makeFont(t);var e=t.textAlign;"middle"===e&&(e="center"),t.textAlign=null==e||p[e]?e:"left";var i=t.textVerticalAlign||t.textBaseline;"center"===i&&(i="middle"),t.textVerticalAlign=null==i||v[i]?i:"top",t.textPadding&&(t.textPadding=s(t.textPadding))}}function m(t,e,i,r,n){if(i&&e.textRotation){var a=e.textOrigin;"center"===a?(r=i.width/2+i.x,n=i.height/2+i.y):a&&(r=a[0]+i.x,n=a[1]+i.y),t.translate(r,n),t.rotate(-e.textRotation),t.translate(-r,-n)}}function _(t,e,i,r,o,s,h,l){var c=r.rich[i.styleName]||{},f=i.textVerticalAlign,d=s+o/2;"top"===f?d=s+i.height/2:"bottom"===f&&(d=s+o-i.height/2),!i.isLineHolder&&y(c)&&x(t,e,c,"right"===l?h-i.width:"center"===l?h-i.width/2:h,d-i.height/2,i.width,i.height);var p=i.textPadding;p&&(h=P(h,l,p),d-=i.height/2-p[2]-i.textHeight/2),k(e,"shadowBlur",a(c.textShadowBlur,r.textShadowBlur,0)),k(e,"shadowColor",c.textShadowColor||r.textShadowColor||"transparent"),k(e,"shadowOffsetX",a(c.textShadowOffsetX,r.textShadowOffsetX,0)),k(e,"shadowOffsetY",a(c.textShadowOffsetY,r.textShadowOffsetY,0)),k(e,"textAlign",l),k(e,"textBaseline","middle"),k(e,"font",i.font||u.DEFAULT_FONT);var v=T(c.textStroke||r.textStroke,m),g=S(c.textFill||r.textFill),m=n(c.textStrokeWidth,r.textStrokeWidth);v&&(k(e,"lineWidth",m),k(e,"strokeStyle",v),e.strokeText(i.text,h,d)),g&&(k(e,"fillStyle",g),e.fillText(i.text,h,d))}function y(t){return t.textBackgroundColor||t.textBorderWidth&&t.textBorderColor}function x(t,e,i,r,n,a,o){var s=i.textBackgroundColor,u=i.textBorderWidth,d=i.textBorderColor,p=h(s);if(k(e,"shadowBlur",i.textBoxShadowBlur||0),k(e,"shadowColor",i.textBoxShadowColor||"transparent"),k(e,"shadowOffsetX",i.textBoxShadowOffsetX||0),k(e,"shadowOffsetY",i.textBoxShadowOffsetY||0),p||u&&d){e.beginPath();var v=i.textBorderRadius;v?c.buildPath(e,{x:r,y:n,width:a,height:o,r:v}):e.rect(r,n,a,o),e.closePath()}if(p)k(e,"fillStyle",s),e.fill();else if(l(s)){var g=s.image;(g=f.createOrUpdateImage(g,null,t,w,s))&&f.isImageReady(g)&&e.drawImage(g,r,n,a,o)}u&&d&&(k(e,"lineWidth",u),k(e,"strokeStyle",d),e.stroke())}function w(t,e){e.image=t}function b(t,e,i){var r=e.x||0,n=e.y||0,a=e.textAlign,o=e.textVerticalAlign;if(i){var s=e.textPosition;if(s instanceof Array)r=i.x+M(s[0],i.width),n=i.y+M(s[1],i.height);else{var h=u.adjustTextPositionOnRect(s,i,e.textDistance);r=h.x,n=h.y,a=a||h.textAlign,o=o||h.textVerticalAlign}var l=e.textOffset;l&&(r+=l[0],n+=l[1])}return{baseX:r,baseY:n,textAlign:a,textVerticalAlign:o}}function k(t,e,i){return t[e]=d(t,e,i),t[e]}function T(t,e){return null==t||e<=0||"transparent"===t||"none"===t?null:t.image||t.colorStops?"#000":t}function S(t){return null==t||"none"===t?null:t.image||t.colorStops?"#000":t}function M(t,e){return"string"==typeof t?t.lastIndexOf("%")>=0?parseFloat(t)/100*e:parseFloat(t):t}function P(t,e,i){return"right"===e?t-i[1]:"center"===e?t+i[3]/2-i[1]/2:t+i[3]}e.normalizeTextStyle=function(t){return g(t),o(t.rich,g),t},e.renderText=function(t,e,i,r,n){r.rich?function(t,e,i,r,n){var a=t.__textCotentBlock;a&&!t.__dirty||(a=t.__textCotentBlock=u.parseRichText(i,r)),function(t,e,i,r,n){var a=i.width,o=i.outerWidth,s=i.outerHeight,h=r.textPadding,l=b(0,r,n),c=l.baseX,f=l.baseY,d=l.textAlign,p=l.textVerticalAlign;m(e,r,n,c,f);var v=u.adjustTextX(c,o,d),g=u.adjustTextY(f,s,p),w=v,k=g;h&&(w+=h[3],k+=h[0]);var T=w+a;y(r)&&x(t,e,r,v,g,o,s);for(var S=0;S<i.lines.length;S++){for(var M,P=i.lines[S],C=P.tokens,L=C.length,A=P.lineHeight,D=P.width,z=0,R=w,B=T,I=L-1;z<L&&(!(M=C[z]).textAlign||"left"===M.textAlign);)_(t,e,M,r,A,k,R,"left"),D-=M.width,R+=M.width,z++;for(;I>=0&&"right"===(M=C[I]).textAlign;)_(t,e,M,r,A,k,B,"right"),D-=M.width,B-=M.width,I--;for(R+=(a-(R-w)-(T-B)-D)/2;z<=I;)M=C[z],_(t,e,M,r,A,k,R+M.width/2,"center"),R+=M.width,z++;k+=A}}(t,e,a,r,n)}(t,e,i,r,n):function(t,e,i,r,n){var a=k(e,"font",r.font||u.DEFAULT_FONT),o=r.textPadding,s=t.__textCotentBlock;s&&!t.__dirty||(s=t.__textCotentBlock=u.parsePlainText(i,a,o,r.truncate));var h=s.outerHeight,l=s.lines,c=s.lineHeight,f=b(0,r,n),d=f.baseX,p=f.baseY,v=f.textAlign,g=f.textVerticalAlign;m(e,r,n,d,p);var _=u.adjustTextY(p,h,g),w=d,M=_,C=y(r);if(C||o){var L=u.getWidth(i,a),A=L;o&&(A+=o[1]+o[3]);var D=u.adjustTextX(d,A,v);C&&x(t,e,r,D,_,A,h),o&&(w=P(d,v,o),M+=o[0])}k(e,"textAlign",v||"left"),k(e,"textBaseline","middle"),k(e,"shadowBlur",r.textShadowBlur||0),k(e,"shadowColor",r.textShadowColor||"transparent"),k(e,"shadowOffsetX",r.textShadowOffsetX||0),k(e,"shadowOffsetY",r.textShadowOffsetY||0),M+=c/2;var z=r.textStrokeWidth,R=T(r.textStroke,z),B=S(r.textFill);R&&(k(e,"lineWidth",z),k(e,"strokeStyle",R)),B&&k(e,"fillStyle",B);for(var I=0;I<l.length;I++)R&&e.strokeText(l[I],w,M),B&&e.fillText(l[I],w,M),M+=c}(t,e,i,r,n)},e.getStroke=T,e.getFill=S,e.needDrawText=function(t,e){return null!=t&&(t||e.textBackgroundColor||e.textBorderWidth&&e.textBorderColor||e.textPadding)}},106:function(t,e){var i=function(t){this.colorStops=t||[]};i.prototype={constructor:i,addColorStop:function(t,e){this.colorStops.push({offset:t,color:e})}};var r=i;t.exports=r},138:function(t,e,i){var r=i(25),n=i(15),a=r.identity,o=5e-5;function s(t){return t>o||t<-o}var h=function(t){(t=t||{}).position||(this.position=[0,0]),null==t.rotation&&(this.rotation=0),t.scale||(this.scale=[1,1]),this.origin=this.origin||null},l=h.prototype;l.transform=null,l.needLocalTransform=function(){return s(this.rotation)||s(this.position[0])||s(this.position[1])||s(this.scale[0]-1)||s(this.scale[1]-1)},l.updateTransform=function(){var t=this.parent,e=t&&t.transform,i=this.needLocalTransform(),n=this.transform;i||e?(n=n||r.create(),i?this.getLocalTransform(n):a(n),e&&(i?r.mul(n,t.transform,n):r.copy(n,t.transform)),this.transform=n,this.invTransform=this.invTransform||r.create(),r.invert(this.invTransform,n)):n&&a(n)},l.getLocalTransform=function(t){return h.getLocalTransform(this,t)},l.setTransform=function(t){var e=this.transform,i=t.dpr||1;e?t.setTransform(i*e[0],i*e[1],i*e[2],i*e[3],i*e[4],i*e[5]):t.setTransform(i,0,0,i,0,0)},l.restoreTransform=function(t){var e=t.dpr||1;t.setTransform(e,0,0,e,0,0)};var u=[];l.decomposeTransform=function(){if(this.transform){var t=this.parent,e=this.transform;t&&t.transform&&(r.mul(u,t.invTransform,e),e=u);var i=e[0]*e[0]+e[1]*e[1],n=e[2]*e[2]+e[3]*e[3],a=this.position,o=this.scale;s(i-1)&&(i=Math.sqrt(i)),s(n-1)&&(n=Math.sqrt(n)),e[0]<0&&(i=-i),e[3]<0&&(n=-n),a[0]=e[4],a[1]=e[5],o[0]=i,o[1]=n,this.rotation=Math.atan2(-e[1]/n,e[0]/i)}},l.getGlobalScale=function(){var t=this.transform;if(!t)return[1,1];var e=Math.sqrt(t[0]*t[0]+t[1]*t[1]),i=Math.sqrt(t[2]*t[2]+t[3]*t[3]);return t[0]<0&&(e=-e),t[3]<0&&(i=-i),[e,i]},l.transformCoordToLocal=function(t,e){var i=[t,e],r=this.invTransform;return r&&n.applyTransform(i,i,r),i},l.transformCoordToGlobal=function(t,e){var i=[t,e],r=this.transform;return r&&n.applyTransform(i,i,r),i},h.getLocalTransform=function(t,e){a(e=e||[]);var i=t.origin,n=t.scale||[1,1],o=t.rotation||0,s=t.position||[0,0];return i&&(e[4]-=i[0],e[5]-=i[1]),r.scale(e,e,n),o&&r.rotate(e,e,o),i&&(e[4]+=i[0],e[5]+=i[1]),e[4]+=s[0],e[5]+=s[1],e};var c=h;t.exports=c},139:function(t,e){var i=32,r=7;function n(t,e,i,r){var n=e+1;if(n===i)return 1;if(r(t[n++],t[e])<0){for(;n<i&&r(t[n],t[n-1])<0;)n++;!function(t,e,i){i--;for(;e<i;){var r=t[e];t[e++]=t[i],t[i--]=r}}(t,e,n)}else for(;n<i&&r(t[n],t[n-1])>=0;)n++;return n-e}function a(t,e,i,r,n){for(r===e&&r++;r<i;r++){for(var a,o=t[r],s=e,h=r;s<h;)n(o,t[a=s+h>>>1])<0?h=a:s=a+1;var l=r-s;switch(l){case 3:t[s+3]=t[s+2];case 2:t[s+2]=t[s+1];case 1:t[s+1]=t[s];break;default:for(;l>0;)t[s+l]=t[s+l-1],l--}t[s]=o}}function o(t,e,i,r,n,a){var o=0,s=0,h=1;if(a(t,e[i+n])>0){for(s=r-n;h<s&&a(t,e[i+n+h])>0;)o=h,(h=1+(h<<1))<=0&&(h=s);h>s&&(h=s),o+=n,h+=n}else{for(s=n+1;h<s&&a(t,e[i+n-h])<=0;)o=h,(h=1+(h<<1))<=0&&(h=s);h>s&&(h=s);var l=o;o=n-h,h=n-l}for(o++;o<h;){var u=o+(h-o>>>1);a(t,e[i+u])>0?o=u+1:h=u}return h}function s(t,e,i,r,n,a){var o=0,s=0,h=1;if(a(t,e[i+n])<0){for(s=n+1;h<s&&a(t,e[i+n-h])<0;)o=h,(h=1+(h<<1))<=0&&(h=s);h>s&&(h=s);var l=o;o=n-h,h=n-l}else{for(s=r-n;h<s&&a(t,e[i+n+h])>=0;)o=h,(h=1+(h<<1))<=0&&(h=s);h>s&&(h=s),o+=n,h+=n}for(o++;o<h;){var u=o+(h-o>>>1);a(t,e[i+u])<0?h=u:o=u+1}return h}function h(t,e){var i,n,a,h=r,l=0;i=t.length;var u=[];function c(i){var c=n[i],f=a[i],d=n[i+1],p=a[i+1];a[i]=f+p,i===l-3&&(n[i+1]=n[i+2],a[i+1]=a[i+2]),l--;var v=s(t[d],t,c,f,0,e);c+=v,0!==(f-=v)&&0!==(p=o(t[c+f-1],t,d,p,p-1,e))&&(f<=p?function(i,n,a,l){var c=0;for(c=0;c<n;c++)u[c]=t[i+c];var f=0,d=a,p=i;if(t[p++]=t[d++],0==--l){for(c=0;c<n;c++)t[p+c]=u[f+c];return}if(1===n){for(c=0;c<l;c++)t[p+c]=t[d+c];return void(t[p+l]=u[f])}var v,g,m,_=h;for(;;){v=0,g=0,m=!1;do{if(e(t[d],u[f])<0){if(t[p++]=t[d++],g++,v=0,0==--l){m=!0;break}}else if(t[p++]=u[f++],v++,g=0,1==--n){m=!0;break}}while((v|g)<_);if(m)break;do{if(0!==(v=s(t[d],u,f,n,0,e))){for(c=0;c<v;c++)t[p+c]=u[f+c];if(p+=v,f+=v,(n-=v)<=1){m=!0;break}}if(t[p++]=t[d++],0==--l){m=!0;break}if(0!==(g=o(u[f],t,d,l,0,e))){for(c=0;c<g;c++)t[p+c]=t[d+c];if(p+=g,d+=g,0===(l-=g)){m=!0;break}}if(t[p++]=u[f++],1==--n){m=!0;break}_--}while(v>=r||g>=r);if(m)break;_<0&&(_=0),_+=2}if((h=_)<1&&(h=1),1===n){for(c=0;c<l;c++)t[p+c]=t[d+c];t[p+l]=u[f]}else{if(0===n)throw new Error;for(c=0;c<n;c++)t[p+c]=u[f+c]}}(c,f,d,p):function(i,n,a,l){var c=0;for(c=0;c<l;c++)u[c]=t[a+c];var f=i+n-1,d=l-1,p=a+l-1,v=0,g=0;if(t[p--]=t[f--],0==--n){for(v=p-(l-1),c=0;c<l;c++)t[v+c]=u[c];return}if(1===l){for(g=(p-=n)+1,v=(f-=n)+1,c=n-1;c>=0;c--)t[g+c]=t[v+c];return void(t[p]=u[d])}var m=h;for(;;){var _=0,y=0,x=!1;do{if(e(u[d],t[f])<0){if(t[p--]=t[f--],_++,y=0,0==--n){x=!0;break}}else if(t[p--]=u[d--],y++,_=0,1==--l){x=!0;break}}while((_|y)<m);if(x)break;do{if(0!==(_=n-s(u[d],t,i,n,n-1,e))){for(n-=_,g=(p-=_)+1,v=(f-=_)+1,c=_-1;c>=0;c--)t[g+c]=t[v+c];if(0===n){x=!0;break}}if(t[p--]=u[d--],1==--l){x=!0;break}if(0!==(y=l-o(t[f],u,0,l,l-1,e))){for(l-=y,g=(p-=y)+1,v=(d-=y)+1,c=0;c<y;c++)t[g+c]=u[v+c];if(l<=1){x=!0;break}}if(t[p--]=t[f--],0==--n){x=!0;break}m--}while(_>=r||y>=r);if(x)break;m<0&&(m=0),m+=2}(h=m)<1&&(h=1);if(1===l){for(g=(p-=n)+1,v=(f-=n)+1,c=n-1;c>=0;c--)t[g+c]=t[v+c];t[p]=u[d]}else{if(0===l)throw new Error;for(v=p-(l-1),c=0;c<l;c++)t[v+c]=u[c]}}(c,f,d,p))}n=[],a=[],this.mergeRuns=function(){for(;l>1;){var t=l-2;if(t>=1&&a[t-1]<=a[t]+a[t+1]||t>=2&&a[t-2]<=a[t]+a[t-1])a[t-1]<a[t+1]&&t--;else if(a[t]>a[t+1])break;c(t)}},this.forceMergeRuns=function(){for(;l>1;){var t=l-2;t>0&&a[t-1]<a[t+1]&&t--,c(t)}},this.pushRun=function(t,e){n[l]=t,a[l]=e,l+=1}}t.exports=function(t,e,r,o){r||(r=0),o||(o=t.length);var s=o-r;if(!(s<2)){var l=0;if(s<i)a(t,r,o,r+(l=n(t,r,o,e)),e);else{var u=new h(t,e),c=function(t){for(var e=0;t>=i;)e|=1&t,t>>=1;return t+e}(s);do{if((l=n(t,r,o,e))<c){var f=s;f>c&&(f=c),a(t,r,r+f,r+l,e),l=f}u.pushRun(r,l),u.mergeRuns(),s-=l,r+=l}while(0!==s);u.forceMergeRuns()}}}},140:function(t,e,i){var r=new(i(193))(50);function n(){var t=this.__cachedImgObj;this.onload=this.__cachedImgObj=null;for(var e=0;e<t.pending.length;e++){var i=t.pending[e],r=i.cb;r&&r(this,i.cbPayload),i.hostEl.dirty()}t.pending.length=0}function a(t){return t&&t.width&&t.height}e.findExistImage=function(t){if("string"==typeof t){var e=r.get(t);return e&&e.image}return t},e.createOrUpdateImage=function(t,e,i,o,s){if(t){if("string"==typeof t){if(e&&e.__zrImageSrc===t||!i)return e;var h=r.get(t),l={hostEl:i,cb:o,cbPayload:s};return h?!a(e=h.image)&&h.pending.push(l):(!e&&(e=new Image),e.onload=n,r.put(t,e.__cachedImgObj={image:e,pending:[l]}),e.src=e.__zrImageSrc=t),e}return t}return e},e.isImageReady=a},141:function(t,e,i){var r=i(15),n=i(42),a=Math.min,o=Math.max,s=Math.sin,h=Math.cos,l=2*Math.PI,u=r.create(),c=r.create(),f=r.create();var d=[],p=[];e.fromPoints=function(t,e,i){if(0!==t.length){var r,n=t[0],s=n[0],h=n[0],l=n[1],u=n[1];for(r=1;r<t.length;r++)n=t[r],s=a(s,n[0]),h=o(h,n[0]),l=a(l,n[1]),u=o(u,n[1]);e[0]=s,e[1]=l,i[0]=h,i[1]=u}},e.fromLine=function(t,e,i,r,n,s){n[0]=a(t,i),n[1]=a(e,r),s[0]=o(t,i),s[1]=o(e,r)},e.fromCubic=function(t,e,i,r,s,h,l,u,c,f){var v,g=n.cubicExtrema,m=n.cubicAt,_=g(t,i,s,l,d);for(c[0]=1/0,c[1]=1/0,f[0]=-1/0,f[1]=-1/0,v=0;v<_;v++){var y=m(t,i,s,l,d[v]);c[0]=a(y,c[0]),f[0]=o(y,f[0])}for(_=g(e,r,h,u,p),v=0;v<_;v++){var x=m(e,r,h,u,p[v]);c[1]=a(x,c[1]),f[1]=o(x,f[1])}c[0]=a(t,c[0]),f[0]=o(t,f[0]),c[0]=a(l,c[0]),f[0]=o(l,f[0]),c[1]=a(e,c[1]),f[1]=o(e,f[1]),c[1]=a(u,c[1]),f[1]=o(u,f[1])},e.fromQuadratic=function(t,e,i,r,s,h,l,u){var c=n.quadraticExtremum,f=n.quadraticAt,d=o(a(c(t,i,s),1),0),p=o(a(c(e,r,h),1),0),v=f(t,i,s,d),g=f(e,r,h,p);l[0]=a(t,s,v),l[1]=a(e,h,g),u[0]=o(t,s,v),u[1]=o(e,h,g)},e.fromArc=function(t,e,i,n,a,o,d,p,v){var g=r.min,m=r.max,_=Math.abs(a-o);if(_%l<1e-4&&_>1e-4)return p[0]=t-i,p[1]=e-n,v[0]=t+i,void(v[1]=e+n);if(u[0]=h(a)*i+t,u[1]=s(a)*n+e,c[0]=h(o)*i+t,c[1]=s(o)*n+e,g(p,u,c),m(v,u,c),(a%=l)<0&&(a+=l),(o%=l)<0&&(o+=l),a>o&&!d?o+=l:a<o&&d&&(a+=l),d){var y=o;o=a,a=y}for(var x=0;x<o;x+=Math.PI/2)x>a&&(f[0]=h(x)*i+t,f[1]=s(x)*n+e,g(p,f,p),m(v,f,v))}},142:function(t,e,i){var r=i(0).inherits,n=i(78),a=i(17);function o(t){n.call(this,t),this._displayables=[],this._temporaryDisplayables=[],this._cursor=0,this.notClear=!0}o.prototype.incremental=!0,o.prototype.clearDisplaybles=function(){this._displayables=[],this._temporaryDisplayables=[],this._cursor=0,this.dirty(),this.notClear=!1},o.prototype.addDisplayable=function(t,e){e?this._temporaryDisplayables.push(t):this._displayables.push(t),this.dirty()},o.prototype.addDisplayables=function(t,e){e=e||!1;for(var i=0;i<t.length;i++)this.addDisplayable(t[i],e)},o.prototype.eachPendingDisplayable=function(t){for(var e=this._cursor;e<this._displayables.length;e++)t&&t(this._displayables[e]);for(e=0;e<this._temporaryDisplayables.length;e++)t&&t(this._temporaryDisplayables[e])},o.prototype.update=function(){this.updateTransform();for(var t=this._cursor;t<this._displayables.length;t++){(e=this._displayables[t]).parent=this,e.update(),e.parent=null}for(t=0;t<this._temporaryDisplayables.length;t++){var e;(e=this._temporaryDisplayables[t]).parent=this,e.update(),e.parent=null}},o.prototype.brush=function(t,e){for(var i=this._cursor;i<this._displayables.length;i++){(r=this._displayables[i]).beforeBrush&&r.beforeBrush(t),r.brush(t,i===this._cursor?null:this._displayables[i-1]),r.afterBrush&&r.afterBrush(t)}this._cursor=i;for(i=0;i<this._temporaryDisplayables.length;i++){var r;(r=this._temporaryDisplayables[i]).beforeBrush&&r.beforeBrush(t),r.brush(t,0===i?null:this._temporaryDisplayables[i-1]),r.afterBrush&&r.afterBrush(t)}this._temporaryDisplayables=[],this.notClear=!0};var s=[];o.prototype.getBoundingRect=function(){if(!this._rect){for(var t=new a(1/0,1/0,-1/0,-1/0),e=0;e<this._displayables.length;e++){var i=this._displayables[e],r=i.getBoundingRect().clone();i.needLocalTransform()&&r.applyTransform(i.getLocalTransform(s)),t.union(r)}this._rect=t}return this._rect},o.prototype.contain=function(t,e){var i=this.transformCoordToLocal(t,e);if(this.getBoundingRect().contain(i[0],i[1]))for(var r=0;r<this._displayables.length;r++){if(this._displayables[r].contain(t,e))return!0}return!1},r(o,n);var h=o;t.exports=h},15:function(t,e){var i="undefined"==typeof Float32Array?Array:Float32Array;function r(t){return Math.sqrt(a(t))}var n=r;function a(t){return t[0]*t[0]+t[1]*t[1]}var o=a;function s(t,e){return Math.sqrt((t[0]-e[0])*(t[0]-e[0])+(t[1]-e[1])*(t[1]-e[1]))}var h=s;function l(t,e){return(t[0]-e[0])*(t[0]-e[0])+(t[1]-e[1])*(t[1]-e[1])}var u=l;e.create=function(t,e){var r=new i(2);return null==t&&(t=0),null==e&&(e=0),r[0]=t,r[1]=e,r},e.copy=function(t,e){return t[0]=e[0],t[1]=e[1],t},e.clone=function(t){var e=new i(2);return e[0]=t[0],e[1]=t[1],e},e.set=function(t,e,i){return t[0]=e,t[1]=i,t},e.add=function(t,e,i){return t[0]=e[0]+i[0],t[1]=e[1]+i[1],t},e.scaleAndAdd=function(t,e,i,r){return t[0]=e[0]+i[0]*r,t[1]=e[1]+i[1]*r,t},e.sub=function(t,e,i){return t[0]=e[0]-i[0],t[1]=e[1]-i[1],t},e.len=r,e.length=n,e.lenSquare=a,e.lengthSquare=o,e.mul=function(t,e,i){return t[0]=e[0]*i[0],t[1]=e[1]*i[1],t},e.div=function(t,e,i){return t[0]=e[0]/i[0],t[1]=e[1]/i[1],t},e.dot=function(t,e){return t[0]*e[0]+t[1]*e[1]},e.scale=function(t,e,i){return t[0]=e[0]*i,t[1]=e[1]*i,t},e.normalize=function(t,e){var i=r(e);return 0===i?(t[0]=0,t[1]=0):(t[0]=e[0]/i,t[1]=e[1]/i),t},e.distance=s,e.dist=h,e.distanceSquare=l,e.distSquare=u,e.negate=function(t,e){return t[0]=-e[0],t[1]=-e[1],t},e.lerp=function(t,e,i,r){return t[0]=e[0]+r*(i[0]-e[0]),t[1]=e[1]+r*(i[1]-e[1]),t},e.applyTransform=function(t,e,i){var r=e[0],n=e[1];return t[0]=i[0]*r+i[2]*n+i[4],t[1]=i[1]*r+i[3]*n+i[5],t},e.min=function(t,e,i){return t[0]=Math.min(e[0],i[0]),t[1]=Math.min(e[1],i[1]),t},e.max=function(t,e,i){return t[0]=Math.max(e[0],i[0]),t[1]=Math.max(e[1],i[1]),t}},159:function(t,e,i){var r=i(160).createElement,n=i(68),a=i(17),o=i(25),s=i(33),h=i(105),l=i(79),u=n.CMD,c=Array.prototype.join,f="none",d=Math.round,p=Math.sin,v=Math.cos,g=Math.PI,m=2*Math.PI,_=180/g,y=1e-4;function x(t){return d(1e4*t)/1e4}function w(t){return t<y&&t>-y}function b(t,e){e&&k(t,"transform","matrix("+c.call(e,",")+")")}function k(t,e,i){(!i||"linear"!==i.type&&"radial"!==i.type)&&("string"==typeof i&&i.indexOf("NaN")>-1&&console.log(i),t.setAttribute(e,i))}function T(t,e,i){if(function(t,e){var i=e?t.textFill:t.fill;return null!=i&&i!==f}(e,i)){var r=i?e.textFill:e.fill;r="transparent"===r?f:r,"none"!==t.getAttribute("clip-path")&&r===f&&(r="rgba(0, 0, 0, 0.002)"),k(t,"fill",r),k(t,"fill-opacity",e.opacity)}else k(t,"fill",f);if(function(t,e){var i=e?t.textStroke:t.stroke;return null!=i&&i!==f}(e,i)){var n=i?e.textStroke:e.stroke;k(t,"stroke",n="transparent"===n?f:n),k(t,"stroke-width",(i?e.textStrokeWidth:e.lineWidth)/(!i&&e.strokeNoScale?e.host.getLineScale():1)),k(t,"paint-order",i?"stroke":"fill"),k(t,"stroke-opacity",e.opacity),e.lineDash?(k(t,"stroke-dasharray",e.lineDash.join(",")),k(t,"stroke-dashoffset",d(e.lineDashOffset||0))):k(t,"stroke-dasharray",""),e.lineCap&&k(t,"stroke-linecap",e.lineCap),e.lineJoin&&k(t,"stroke-linejoin",e.lineJoin),e.miterLimit&&k(t,"stroke-miterlimit",e.miterLimit)}else k(t,"stroke",f)}var S={};S.brush=function(t){var e=t.style,i=t.__svgEl;i||(i=r("path"),t.__svgEl=i),t.path||t.createPathProxy();var n=t.path;if(t.__dirtyPath){n.beginPath(),t.buildPath(n,t.shape),t.__dirtyPath=!1;var a=function(t){for(var e=[],i=t.data,r=t.len(),n=0;n<r;){var a="",o=0;switch(i[n++]){case u.M:a="M",o=2;break;case u.L:a="L",o=2;break;case u.Q:a="Q",o=4;break;case u.C:a="C",o=6;break;case u.A:var s=i[n++],h=i[n++],l=i[n++],c=i[n++],f=i[n++],y=i[n++],b=i[n++],k=i[n++],T=Math.abs(y),S=w(T-m)&&!w(T),M=!1;M=T>=m||!w(T)&&(y>-g&&y<0||y>g)==!!k;var P=x(s+l*v(f)),C=x(h+c*p(f));S&&(y=k?m-1e-4:1e-4-m,M=!0,9===n&&e.push("M",P,C));var L=x(s+l*v(f+y)),A=x(h+c*p(f+y));e.push("A",x(l),x(c),d(b*_),+M,+k,L,A);break;case u.Z:a="Z";break;case u.R:L=x(i[n++]),A=x(i[n++]);var D=x(i[n++]),z=x(i[n++]);e.push("M",L,A,"L",L+D,A,"L",L+D,A+z,"L",L,A+z,"L",L,A)}a&&e.push(a);for(var R=0;R<o;R++)e.push(x(i[n++]))}return e.join(" ")}(n);a.indexOf("NaN")<0&&k(i,"d",a)}T(i,e),b(i,t.transform),null!=e.text&&L(t,t.getBoundingRect())};var M={brush:function(t){var e=t.style,i=e.image;i instanceof HTMLImageElement&&(i=i.src);if(i){var n=e.x||0,a=e.y||0,o=e.width,s=e.height,h=t.__svgEl;h||(h=r("image"),t.__svgEl=h),i!==t.__imageSrc&&(!function(t,e,i){t.setAttributeNS("http://www.w3.org/1999/xlink",e,i)}(h,"href",i),t.__imageSrc=i),k(h,"width",o),k(h,"height",s),k(h,"x",n),k(h,"y",a),b(h,t.transform),null!=e.text&&L(t,t.getBoundingRect())}}},P={},C=new a,L=function(t,e,i){var n=t.style;t.__dirty&&h.normalizeTextStyle(n,!0);var a=n.text;if(null!=a){a+="";var u,c,f=t.__textSvgEl;f||(f=r("text"),t.__textSvgEl=f);var d=n.textPosition,p=n.textDistance,v=n.textAlign||"left";"number"==typeof n.fontSize&&(n.fontSize+="px");var g=n.font||[n.fontStyle||"",n.fontWeight||"",n.fontSize||"",n.fontFamily||""].join(" ")||s.DEFAULT_FONT,m=A(n.textVerticalAlign),_=(i=s.getBoundingRect(a,g,v,m)).lineHeight;if(d instanceof Array)u=e.x+d[0],c=e.y+d[1];else{var y=s.adjustTextPositionOnRect(d,e,p);u=y.x,c=y.y,m=A(y.textVerticalAlign),v=y.textAlign}k(f,"alignment-baseline",m),g&&(f.style.font=g);var x=n.textPadding;if(k(f,"x",u),k(f,"y",c),T(f,n,!0),t instanceof l||t.style.transformText)b(f,t.transform);else{if(t.transform)C.copy(e),C.applyTransform(t.transform),e=C;else{var w=t.transformCoordToGlobal(e.x,e.y);e.x=w[0],e.y=w[1]}var S=n.textOrigin;"center"===S?(u=i.width/2+u,c=i.height/2+c):S&&(u=S[0]+u,c=S[1]+c);var M=-n.textRotation||0,P=o.create();o.rotate(P,t.transform,M),b(f,P)}var L=a.split("\n"),D=L.length,z=v;"left"===z?(z="start",x&&(u+=x[3])):"right"===z?(z="end",x&&(u-=x[1])):"center"===z&&(z="middle",x&&(u+=(x[3]-x[1])/2));var R=0;if("baseline"===m?(R=-i.height+_,x&&(R-=x[2])):"middle"===m?(R=(-i.height+_)/2,x&&(c+=(x[0]-x[2])/2)):x&&(R+=x[0]),t.__text!==a||t.__textFont!==g){var B=t.__tspanList||[];t.__tspanList=B;for(var I=0;I<D;I++){(O=B[I])?O.innerHTML="":(O=B[I]=r("tspan"),f.appendChild(O),k(O,"alignment-baseline",m),k(O,"text-anchor",z)),k(O,"x",u),k(O,"y",c+I*_+R),O.appendChild(document.createTextNode(L[I]))}for(;I<B.length;I++)f.removeChild(B[I]);B.length=D,t.__text=a,t.__textFont=g}else if(t.__tspanList.length){var E=t.__tspanList.length;for(I=0;I<E;++I){var O;(O=t.__tspanList[I])&&(k(O,"x",u),k(O,"y",c+I*_+R))}}}};function A(t){return"middle"===t?"middle":"bottom"===t?"baseline":"hanging"}P.drawRectText=L,P.brush=function(t){var e=t.style;null!=e.text&&(e.textPosition=[0,0],L(t,{x:e.x||0,y:e.y||0,width:0,height:0},t.getBoundingRect()))},e.path=S,e.image=M,e.text=P},160:function(t,e){var i="http://www.w3.org/2000/svg";e.createElement=function(t){return document.createElementNS(i,t)}},161:function(t,e,i){var r=i(160).createElement,n=i(0),a=i(18),o=i(77),s=i(79),h=i(159),l=h.path,u=h.image,c=h.text;function f(t,e,i,r,n){this._zrId=t,this._svgRoot=e,this._tagNames="string"==typeof i?[i]:i,this._markLabel=r,this._domName=n||"_dom",this.nextId=0}f.prototype.createElement=r,f.prototype.getDefs=function(t){var e=this._svgRoot,i=this._svgRoot.getElementsByTagName("defs");return 0===i.length?t?((i=e.insertBefore(this.createElement("defs"),e.firstChild)).contains||(i.contains=function(t){var e=i.children;if(!e)return!1;for(var r=e.length-1;r>=0;--r)if(e[r]===t)return!0;return!1}),i):null:i[0]},f.prototype.update=function(t,e){if(t){var i=this.getDefs(!1);if(t[this._domName]&&i.contains(t[this._domName]))"function"==typeof e&&e(t);else{var r=this.add(t);r&&(t[this._domName]=r)}}},f.prototype.addDom=function(t){this.getDefs(!0).appendChild(t)},f.prototype.removeDom=function(t){var e=this.getDefs(!1);e&&t[this._domName]&&(e.removeChild(t[this._domName]),t[this._domName]=null)},f.prototype.getDoms=function(){var t=this.getDefs(!1);if(!t)return[];var e=[];return n.each(this._tagNames,function(i){var r=t.getElementsByTagName(i);e=e.concat([].slice.call(r))}),e},f.prototype.markAllUnused=function(){var t=this.getDoms(),e=this;n.each(t,function(t){t[e._markLabel]="0"})},f.prototype.markUsed=function(t){t&&(t[this._markLabel]="1")},f.prototype.removeUnused=function(){var t=this.getDefs(!1);if(t){var e=this.getDoms(),i=this;n.each(e,function(e){"1"!==e[i._markLabel]&&t.removeChild(e)})}},f.prototype.getSvgProxy=function(t){return t instanceof a?l:t instanceof o?u:t instanceof s?c:l},f.prototype.getTextSvgElement=function(t){return t.__textSvgEl},f.prototype.getSvgElement=function(t){return t.__svgEl};var d=f;t.exports=d},17:function(t,e,i){var r,n,a,o,s=i(15),h=i(25),l=s.applyTransform,u=Math.min,c=Math.max;function f(t,e,i,r){i<0&&(t+=i,i=-i),r<0&&(e+=r,r=-r),this.x=t,this.y=e,this.width=i,this.height=r}f.prototype={constructor:f,union:function(t){var e=u(t.x,this.x),i=u(t.y,this.y);this.width=c(t.x+t.width,this.x+this.width)-e,this.height=c(t.y+t.height,this.y+this.height)-i,this.x=e,this.y=i},applyTransform:(r=[],n=[],a=[],o=[],function(t){if(t){r[0]=a[0]=this.x,r[1]=o[1]=this.y,n[0]=o[0]=this.x+this.width,n[1]=a[1]=this.y+this.height,l(r,r,t),l(n,n,t),l(a,a,t),l(o,o,t),this.x=u(r[0],n[0],a[0],o[0]),this.y=u(r[1],n[1],a[1],o[1]);var e=c(r[0],n[0],a[0],o[0]),i=c(r[1],n[1],a[1],o[1]);this.width=e-this.x,this.height=i-this.y}}),calculateTransform:function(t){var e=this,i=t.width/e.width,r=t.height/e.height,n=h.create();return h.translate(n,n,[-e.x,-e.y]),h.scale(n,n,[i,r]),h.translate(n,n,[t.x,t.y]),n},intersect:function(t){if(!t)return!1;t instanceof f||(t=f.create(t));var e=this,i=e.x,r=e.x+e.width,n=e.y,a=e.y+e.height,o=t.x,s=t.x+t.width,h=t.y,l=t.y+t.height;return!(r<o||s<i||a<h||l<n)},contain:function(t,e){return t>=this.x&&t<=this.x+this.width&&e>=this.y&&e<=this.y+this.height},clone:function(){return new f(this.x,this.y,this.width,this.height)},copy:function(t){this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height},plain:function(){return{x:this.x,y:this.y,width:this.width,height:this.height}}},f.create=function(t){return new f(t.x,t.y,t.width,t.height)};var d=f;t.exports=d},18:function(t,e,i){var r=i(78),n=i(0),a=i(68),o=i(394),s=i(196).prototype.getCanvasPattern,h=Math.abs,l=new a(!0);function u(t){r.call(this,t),this.path=null}u.prototype={constructor:u,type:"path",__dirtyPath:!0,strokeContainThreshold:5,brush:function(t,e){var i,r=this.style,n=this.path||l,a=r.hasStroke(),o=r.hasFill(),h=r.fill,u=r.stroke,c=o&&!!h.colorStops,f=a&&!!u.colorStops,d=o&&!!h.image,p=a&&!!u.image;(r.bind(t,this,e),this.setTransform(t),this.__dirty)&&(c&&(i=i||this.getBoundingRect(),this._fillGradient=r.getGradient(t,h,i)),f&&(i=i||this.getBoundingRect(),this._strokeGradient=r.getGradient(t,u,i)));c?t.fillStyle=this._fillGradient:d&&(t.fillStyle=s.call(h,t)),f?t.strokeStyle=this._strokeGradient:p&&(t.strokeStyle=s.call(u,t));var v=r.lineDash,g=r.lineDashOffset,m=!!t.setLineDash,_=this.getGlobalScale();n.setScale(_[0],_[1]),this.__dirtyPath||v&&!m&&a?(n.beginPath(t),v&&!m&&(n.setLineDash(v),n.setLineDashOffset(g)),this.buildPath(n,this.shape,!1),this.path&&(this.__dirtyPath=!1)):(t.beginPath(),this.path.rebuildPath(t)),o&&n.fill(t),v&&m&&(t.setLineDash(v),t.lineDashOffset=g),a&&n.stroke(t),v&&m&&t.setLineDash([]),null!=r.text&&(this.restoreTransform(t),this.drawRectText(t,this.getBoundingRect()))},buildPath:function(t,e,i){},createPathProxy:function(){this.path=new a},getBoundingRect:function(){var t=this._rect,e=this.style,i=!t;if(i){var r=this.path;r||(r=this.path=new a),this.__dirtyPath&&(r.beginPath(),this.buildPath(r,this.shape,!1)),t=r.getBoundingRect()}if(this._rect=t,e.hasStroke()){var n=this._rectWithStroke||(this._rectWithStroke=t.clone());if(this.__dirty||i){n.copy(t);var o=e.lineWidth,s=e.strokeNoScale?this.getLineScale():1;e.hasFill()||(o=Math.max(o,this.strokeContainThreshold||4)),s>1e-10&&(n.width+=o/s,n.height+=o/s,n.x-=o/s/2,n.y-=o/s/2)}return n}return t},contain:function(t,e){var i=this.transformCoordToLocal(t,e),r=this.getBoundingRect(),n=this.style;if(t=i[0],e=i[1],r.contain(t,e)){var a=this.path.data;if(n.hasStroke()){var s=n.lineWidth,h=n.strokeNoScale?this.getLineScale():1;if(h>1e-10&&(n.hasFill()||(s=Math.max(s,this.strokeContainThreshold)),o.containStroke(a,s/h,t,e)))return!0}if(n.hasFill())return o.contain(a,t,e)}return!1},dirty:function(t){null==t&&(t=!0),t&&(this.__dirtyPath=t,this._rect=null),this.__dirty=!0,this.__zr&&this.__zr.refresh(),this.__clipTarget&&this.__clipTarget.dirty()},animateShape:function(t){return this.animate("shape",t)},attrKV:function(t,e){"shape"===t?(this.setShape(e),this.__dirtyPath=!0,this._rect=null):r.prototype.attrKV.call(this,t,e)},setShape:function(t,e){var i=this.shape;if(i){if(n.isObject(t))for(var r in t)t.hasOwnProperty(r)&&(i[r]=t[r]);else i[t]=e;this.dirty(!0)}return this},getLineScale:function(){var t=this.transform;return t&&h(t[0]-1)>1e-10&&h(t[3]-1)>1e-10?Math.sqrt(h(t[0]*t[3]-t[2]*t[1])):1}},u.extend=function(t){var e=function(e){u.call(this,e),t.style&&this.style.extendFrom(t.style,!1);var i=t.shape;if(i){this.shape=this.shape||{};var r=this.shape;for(var n in i)!r.hasOwnProperty(n)&&i.hasOwnProperty(n)&&(r[n]=i[n])}t.init&&t.init.call(this,e)};for(var i in n.inherits(e,u),t)"style"!==i&&"shape"!==i&&(e.prototype[i]=t[i]);return e},n.inherits(u,r);var c=u;t.exports=c},19:function(t,e){var i="object"==typeof wx&&"function"==typeof wx.getSystemInfoSync?{browser:{},os:{},node:!1,wxa:!0,canvasSupported:!0,svgSupported:!1,touchEventsSupported:!0}:"undefined"==typeof document&&"undefined"!=typeof self?{browser:{},os:{},node:!1,worker:!0,canvasSupported:!0}:"undefined"==typeof navigator?{browser:{},os:{},node:!0,worker:!1,canvasSupported:!0,svgSupported:!0}:function(t){var e={},i=t.match(/Firefox\/([\d.]+)/),r=t.match(/MSIE\s([\d.]+)/)||t.match(/Trident\/.+?rv:(([\d.]+))/),n=t.match(/Edge\/([\d.]+)/),a=/micromessenger/i.test(t);i&&(e.firefox=!0,e.version=i[1]);r&&(e.ie=!0,e.version=r[1]);n&&(e.edge=!0,e.version=n[1]);a&&(e.weChat=!0);return{browser:e,os:{},node:!1,canvasSupported:!!document.createElement("canvas").getContext,svgSupported:"undefined"!=typeof SVGRect,touchEventsSupported:"ontouchstart"in window&&!e.ie&&!e.edge,pointerEventsSupported:"onpointerdown"in window&&(e.edge||e.ie&&e.version>=11)}}(navigator.userAgent);t.exports=i},190:function(t,e){var i=2311;t.exports=function(){return i++}},191:function(t,e,i){var r=i(190),n=i(51),a=i(138),o=i(382),s=i(0),h=function(t){a.call(this,t),n.call(this,t),o.call(this,t),this.id=t.id||r()};h.prototype={type:"element",name:"",__zr:null,ignore:!1,clipPath:null,isGroup:!1,drift:function(t,e){switch(this.draggable){case"horizontal":e=0;break;case"vertical":t=0}var i=this.transform;i||(i=this.transform=[1,0,0,1,0,0]),i[4]+=t,i[5]+=e,this.decomposeTransform(),this.dirty(!1)},beforeUpdate:function(){},afterUpdate:function(){},update:function(){this.updateTransform()},traverse:function(t,e){},attrKV:function(t,e){if("position"===t||"scale"===t||"origin"===t){if(e){var i=this[t];i||(i=this[t]=[]),i[0]=e[0],i[1]=e[1]}}else this[t]=e},hide:function(){this.ignore=!0,this.__zr&&this.__zr.refresh()},show:function(){this.ignore=!1,this.__zr&&this.__zr.refresh()},attr:function(t,e){if("string"==typeof t)this.attrKV(t,e);else if(s.isObject(t))for(var i in t)t.hasOwnProperty(i)&&this.attrKV(i,t[i]);return this.dirty(!1),this},setClipPath:function(t){var e=this.__zr;e&&t.addSelfToZr(e),this.clipPath&&this.clipPath!==t&&this.removeClipPath(),this.clipPath=t,t.__zr=e,t.__clipTarget=this,this.dirty(!1)},removeClipPath:function(){var t=this.clipPath;t&&(t.__zr&&t.removeSelfFromZr(t.__zr),t.__zr=null,t.__clipTarget=null,this.clipPath=null,this.dirty(!1))},addSelfToZr:function(t){this.__zr=t;var e=this.animators;if(e)for(var i=0;i<e.length;i++)t.animation.addAnimator(e[i]);this.clipPath&&this.clipPath.addSelfToZr(t)},removeSelfFromZr:function(t){this.__zr=null;var e=this.animators;if(e)for(var i=0;i<e.length;i++)t.animation.removeAnimator(e[i]);this.clipPath&&this.clipPath.removeSelfFromZr(t)}},s.mixin(h,o),s.mixin(h,a),s.mixin(h,n);var l=h;t.exports=l},192:function(t,e,i){var r=i(383),n=i(34),a=i(0).isArrayLike,o=Array.prototype.slice;function s(t,e){return t[e]}function h(t,e,i){t[e]=i}function l(t,e,i){return(e-t)*i+t}function u(t,e,i){return i>.5?e:t}function c(t,e,i,r,n){var a=t.length;if(1==n)for(var o=0;o<a;o++)r[o]=l(t[o],e[o],i);else{var s=a&&t[0].length;for(o=0;o<a;o++)for(var h=0;h<s;h++)r[o][h]=l(t[o][h],e[o][h],i)}}function f(t,e,i){var r=t.length,n=e.length;if(r!==n)if(r>n)t.length=n;else for(var a=r;a<n;a++)t.push(1===i?e[a]:o.call(e[a]));var s=t[0]&&t[0].length;for(a=0;a<t.length;a++)if(1===i)isNaN(t[a])&&(t[a]=e[a]);else for(var h=0;h<s;h++)isNaN(t[a][h])&&(t[a][h]=e[a][h])}function d(t,e,i){if(t===e)return!0;var r=t.length;if(r!==e.length)return!1;if(1===i){for(var n=0;n<r;n++)if(t[n]!==e[n])return!1}else{var a=t[0].length;for(n=0;n<r;n++)for(var o=0;o<a;o++)if(t[n][o]!==e[n][o])return!1}return!0}function p(t,e,i,r,n,a,o,s,h){var l=t.length;if(1==h)for(var u=0;u<l;u++)s[u]=v(t[u],e[u],i[u],r[u],n,a,o);else{var c=t[0].length;for(u=0;u<l;u++)for(var f=0;f<c;f++)s[u][f]=v(t[u][f],e[u][f],i[u][f],r[u][f],n,a,o)}}function v(t,e,i,r,n,a,o){var s=.5*(i-t),h=.5*(r-e);return(2*(e-i)+s+h)*o+(-3*(e-i)-2*s-h)*a+s*n+e}function g(t){if(a(t)){var e=t.length;if(a(t[0])){for(var i=[],r=0;r<e;r++)i.push(o.call(t[r]));return i}return o.call(t)}return t}function m(t){return t[0]=Math.floor(t[0]),t[1]=Math.floor(t[1]),t[2]=Math.floor(t[2]),"rgba("+t.join(",")+")"}function _(t,e,i,o,s,h){var g=t._getter,_=t._setter,y="spline"===e,x=o.length;if(x){var w,b=o[0].value,k=a(b),T=!1,S=!1,M=k?function(t){var e=t[t.length-1].value;return a(e&&e[0])?2:1}(o):0;o.sort(function(t,e){return t.time-e.time}),w=o[x-1].time;for(var P=[],C=[],L=o[0].value,A=!0,D=0;D<x;D++){P.push(o[D].time/w);var z=o[D].value;if(k&&d(z,L,M)||!k&&z===L||(A=!1),L=z,"string"==typeof z){var R=n.parse(z);R?(z=R,T=!0):S=!0}C.push(z)}if(h||!A){var B=C[x-1];for(D=0;D<x-1;D++)k?f(C[D],B,M):!isNaN(C[D])||isNaN(B)||S||T||(C[D]=B);k&&f(g(t._target,s),B,M);var I,E,O,F,H,N=0,W=0;if(T)var q=[0,0,0,0];var j=new r({target:t._target,life:w,loop:t._loop,delay:t._delay,onframe:function(t,e){var i;if(e<0)i=0;else if(e<W){for(i=Math.min(N+1,x-1);i>=0&&!(P[i]<=e);i--);i=Math.min(i,x-2)}else{for(i=N;i<x&&!(P[i]>e);i++);i=Math.min(i-1,x-2)}N=i,W=e;var r=P[i+1]-P[i];if(0!==r)if(I=(e-P[i])/r,y)if(O=C[i],E=C[0===i?i:i-1],F=C[i>x-2?x-1:i+1],H=C[i>x-3?x-1:i+2],k)p(E,O,F,H,I,I*I,I*I*I,g(t,s),M);else{if(T)n=p(E,O,F,H,I,I*I,I*I*I,q,1),n=m(q);else{if(S)return u(O,F,I);n=v(E,O,F,H,I,I*I,I*I*I)}_(t,s,n)}else if(k)c(C[i],C[i+1],I,g(t,s),M);else{var n;if(T)c(C[i],C[i+1],I,q,1),n=m(q);else{if(S)return u(C[i],C[i+1],I);n=l(C[i],C[i+1],I)}_(t,s,n)}},ondestroy:i});return e&&"spline"!==e&&(j.easing=e),j}}}var y=function(t,e,i,r){this._tracks={},this._target=t,this._loop=e||!1,this._getter=i||s,this._setter=r||h,this._clipCount=0,this._delay=0,this._doneList=[],this._onframeList=[],this._clipList=[]};y.prototype={when:function(t,e){var i=this._tracks;for(var r in e)if(e.hasOwnProperty(r)){if(!i[r]){i[r]=[];var n=this._getter(this._target,r);if(null==n)continue;0!==t&&i[r].push({time:0,value:g(n)})}i[r].push({time:t,value:e[r]})}return this},during:function(t){return this._onframeList.push(t),this},pause:function(){for(var t=0;t<this._clipList.length;t++)this._clipList[t].pause();this._paused=!0},resume:function(){for(var t=0;t<this._clipList.length;t++)this._clipList[t].resume();this._paused=!1},isPaused:function(){return!!this._paused},_doneCallback:function(){this._tracks={},this._clipList.length=0;for(var t=this._doneList,e=t.length,i=0;i<e;i++)t[i].call(this)},start:function(t,e){var i,r=this,n=0,a=function(){--n||r._doneCallback()};for(var o in this._tracks)if(this._tracks.hasOwnProperty(o)){var s=_(this,t,a,this._tracks[o],o,e);s&&(this._clipList.push(s),n++,this.animation&&this.animation.addClip(s),i=s)}if(i){var h=i.onframe;i.onframe=function(t,e){h(t,e);for(var i=0;i<r._onframeList.length;i++)r._onframeList[i](t,e)}}return n||this._doneCallback(),this},stop:function(t){for(var e=this._clipList,i=this.animation,r=0;r<e.length;r++){var n=e[r];t&&n.onframe(this._target,1),i&&i.removeClip(n)}e.length=0},delay:function(t){return this._delay=t,this},done:function(t){return t&&this._doneList.push(t),this},getClips:function(){return this._clipList}};var x=y;t.exports=x},193:function(t,e){var i=function(){this.head=null,this.tail=null,this._len=0},r=i.prototype;r.insert=function(t){var e=new n(t);return this.insertEntry(e),e},r.insertEntry=function(t){this.head?(this.tail.next=t,t.prev=this.tail,t.next=null,this.tail=t):this.head=this.tail=t,this._len++},r.remove=function(t){var e=t.prev,i=t.next;e?e.next=i:this.head=i,i?i.prev=e:this.tail=e,t.next=t.prev=null,this._len--},r.len=function(){return this._len},r.clear=function(){this.head=this.tail=null,this._len=0};var n=function(t){this.value=t,this.next,this.prev},a=function(t){this._list=new i,this._map={},this._maxSize=t||10,this._lastRemovedEntry=null},o=a.prototype;o.put=function(t,e){var i=this._list,r=this._map,a=null;if(null==r[t]){var o=i.len(),s=this._lastRemovedEntry;if(o>=this._maxSize&&o>0){var h=i.head;i.remove(h),delete r[h.key],a=h.value,this._lastRemovedEntry=h}s?s.value=e:s=new n(e),s.key=t,i.insertEntry(s),r[t]=s}return a},o.get=function(t){var e=this._map[t],i=this._list;if(null!=e)return e!==i.tail&&(i.remove(e),i.insertEntry(e)),e.value},o.clear=function(){this._list.clear(),this._map={}};var s=a;t.exports=s},194:function(t,e,i){var r=i(195),n=[["shadowBlur",0],["shadowOffsetX",0],["shadowOffsetY",0],["shadowColor","#000"],["lineCap","butt"],["lineJoin","miter"],["miterLimit",10]],a=function(t,e){this.extendFrom(t,!1),this.host=e};function o(t,e,i){var r=null==e.x?0:e.x,n=null==e.x2?1:e.x2,a=null==e.y?0:e.y,o=null==e.y2?0:e.y2;return e.global||(r=r*i.width+i.x,n=n*i.width+i.x,a=a*i.height+i.y,o=o*i.height+i.y),r=isNaN(r)?0:r,n=isNaN(n)?1:n,a=isNaN(a)?0:a,o=isNaN(o)?0:o,t.createLinearGradient(r,a,n,o)}function s(t,e,i){var r=i.width,n=i.height,a=Math.min(r,n),o=null==e.x?.5:e.x,s=null==e.y?.5:e.y,h=null==e.r?.5:e.r;return e.global||(o=o*r+i.x,s=s*n+i.y,h*=a),t.createRadialGradient(o,s,0,o,s,h)}for(var h=a.prototype={constructor:a,host:null,fill:"#000",stroke:null,opacity:1,lineDash:null,lineDashOffset:0,shadowBlur:0,shadowOffsetX:0,shadowOffsetY:0,lineWidth:1,strokeNoScale:!1,text:null,font:null,textFont:null,fontStyle:null,fontWeight:null,fontSize:null,fontFamily:null,textTag:null,textFill:"#000",textStroke:null,textWidth:null,textHeight:null,textStrokeWidth:0,textLineHeight:null,textPosition:"inside",textRect:null,textOffset:null,textAlign:null,textVerticalAlign:null,textDistance:5,textShadowColor:"transparent",textShadowBlur:0,textShadowOffsetX:0,textShadowOffsetY:0,textBoxShadowColor:"transparent",textBoxShadowBlur:0,textBoxShadowOffsetX:0,textBoxShadowOffsetY:0,transformText:!1,textRotation:0,textOrigin:null,textBackgroundColor:null,textBorderColor:null,textBorderWidth:0,textBorderRadius:0,textPadding:null,rich:null,truncate:null,blend:null,bind:function(t,e,i){for(var a=i&&i.style,o=!a,s=0;s<n.length;s++){var h=n[s],l=h[0];(o||this[l]!==a[l])&&(t[l]=r(t,l,this[l]||h[1]))}if((o||this.fill!==a.fill)&&(t.fillStyle=this.fill),(o||this.stroke!==a.stroke)&&(t.strokeStyle=this.stroke),(o||this.opacity!==a.opacity)&&(t.globalAlpha=null==this.opacity?1:this.opacity),(o||this.blend!==a.blend)&&(t.globalCompositeOperation=this.blend||"source-over"),this.hasStroke()){var u=this.lineWidth;t.lineWidth=u/(this.strokeNoScale&&e&&e.getLineScale?e.getLineScale():1)}},hasFill:function(){var t=this.fill;return null!=t&&"none"!==t},hasStroke:function(){var t=this.stroke;return null!=t&&"none"!==t&&this.lineWidth>0},extendFrom:function(t,e){if(t)for(var i in t)!t.hasOwnProperty(i)||!0!==e&&(!1===e?this.hasOwnProperty(i):null==t[i])||(this[i]=t[i])},set:function(t,e){"string"==typeof t?this[t]=e:this.extendFrom(t,!0)},clone:function(){var t=new this.constructor;return t.extendFrom(this,!0),t},getGradient:function(t,e,i){for(var r=("radial"===e.type?s:o)(t,e,i),n=e.colorStops,a=0;a<n.length;a++)r.addColorStop(n[a].offset,n[a].color);return r}},l=0;l<n.length;l++){var u=n[l];u[0]in h||(h[u[0]]=u[1])}a.getGradient=h.getGradient;var c=a;t.exports=c},195:function(t,e){var i={shadowBlur:1,shadowOffsetX:1,shadowOffsetY:1,textShadowBlur:1,textShadowOffsetX:1,textShadowOffsetY:1,textBoxShadowBlur:1,textBoxShadowOffsetX:1,textBoxShadowOffsetY:1};t.exports=function(t,e,r){return i.hasOwnProperty(e)?r*t.dpr:r}},196:function(t,e){var i=function(t,e){this.image=t,this.repeat=e,this.type="pattern"};i.prototype.getCanvasPattern=function(t){return t.createPattern(this.image,this.repeat||"repeat")};var r=i;t.exports=r},197:function(t,e){var i="undefined"!=typeof window&&(window.requestAnimationFrame&&window.requestAnimationFrame.bind(window)||window.msRequestAnimationFrame&&window.msRequestAnimationFrame.bind(window)||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame)||function(t){setTimeout(t,16)};t.exports=i},198:function(t,e,i){var r=i(105),n=new(i(17)),a=function(){};a.prototype={constructor:a,drawRectText:function(t,e){var i=this.style;e=i.textRect||e,this.__dirty&&r.normalizeTextStyle(i,!0);var a=i.text;if(null!=a&&(a+=""),r.needDrawText(a,i)){t.save();var o=this.transform;i.transformText?this.setTransform(t):o&&(n.copy(e),n.applyTransform(o),e=n),r.renderText(this,t,a,i,e),t.restore()}}};var o=a;t.exports=o},199:function(t,e){e.buildPath=function(t,e){var i,r,n,a,o,s=e.x,h=e.y,l=e.width,u=e.height,c=e.r;l<0&&(s+=l,l=-l),u<0&&(h+=u,u=-u),"number"==typeof c?i=r=n=a=c:c instanceof Array?1===c.length?i=r=n=a=c[0]:2===c.length?(i=n=c[0],r=a=c[1]):3===c.length?(i=c[0],r=a=c[1],n=c[2]):(i=c[0],r=c[1],n=c[2],a=c[3]):i=r=n=a=0,i+r>l&&(i*=l/(o=i+r),r*=l/o),n+a>l&&(n*=l/(o=n+a),a*=l/o),r+n>u&&(r*=u/(o=r+n),n*=u/o),i+a>u&&(i*=u/(o=i+a),a*=u/o),t.moveTo(s+i,h),t.lineTo(s+l-r,h),0!==r&&t.arc(s+l-r,h+r,r,-Math.PI/2,0),t.lineTo(s+l,h+u-n),0!==n&&t.arc(s+l-n,h+u-n,n,0,Math.PI/2),t.lineTo(s+a,h+u),0!==a&&t.arc(s+a,h+u-a,a,Math.PI/2,Math.PI),t.lineTo(s,h+i),0!==i&&t.arc(s+i,h+i,i,Math.PI,1.5*Math.PI)}},201:function(t,e){e.containStroke=function(t,e,i,r,n,a,o){if(0===n)return!1;var s=n,h=0;if(o>e+s&&o>r+s||o<e-s&&o<r-s||a>t+s&&a>i+s||a<t-s&&a<i-s)return!1;if(t===i)return Math.abs(a-t)<=s/2;var l=(h=(e-r)/(t-i))*a-o+(t*r-i*e)/(t-i);return l*l/(h*h+1)<=s/2*s/2}},202:function(t,e,i){var r=i(42).quadraticProjectPoint;e.containStroke=function(t,e,i,n,a,o,s,h,l){if(0===s)return!1;var u=s;return!(l>e+u&&l>n+u&&l>o+u||l<e-u&&l<n-u&&l<o-u||h>t+u&&h>i+u&&h>a+u||h<t-u&&h<i-u&&h<a-u)&&r(t,e,i,n,a,o,h,l,null)<=u/2}},203:function(t,e){var i=2*Math.PI;e.normalizeRadian=function(t){return(t%=i)<0&&(t+=i),t}},204:function(t,e){t.exports=function(t,e,i,r,n,a){if(a>e&&a>r||a<e&&a<r)return 0;if(r===e)return 0;var o=r<e?1:-1,s=(a-e)/(r-e);1!==s&&0!==s||(o=r<e?.5:-.5);var h=s*(i-t)+t;return h===n?1/0:h>n?o:0}},205:function(t,e,i){var r=i(19),n=[["shadowBlur",0],["shadowColor","#000"],["shadowOffsetX",0],["shadowOffsetY",0]];t.exports=function(t){return r.browser.ie&&r.browser.version>=11?function(){var e,i=this.__clipPaths,r=this.style;if(i)for(var a=0;a<i.length;a++){var o=i[a],s=o&&o.shape,h=o&&o.type;if(s&&("sector"===h&&s.startAngle===s.endAngle||"rect"===h&&(!s.width||!s.height))){for(var l=0;l<n.length;l++)n[l][2]=r[n[l][0]],r[n[l][0]]=n[l][1];e=!0;break}}if(t.apply(this,arguments),e)for(l=0;l<n.length;l++)r[n[l][0]]=n[l][2]}:t}},206:function(t,e,i){var r=i(402),n=i(403);e.buildPath=function(t,e,i){var a=e.points,o=e.smooth;if(a&&a.length>=2){if(o&&"spline"!==o){var s=n(a,o,i,e.smoothConstraint);t.moveTo(a[0][0],a[0][1]);for(var h=a.length,l=0;l<(i?h:h-1);l++){var u=s[2*l],c=s[2*l+1],f=a[(l+1)%h];t.bezierCurveTo(u[0],u[1],c[0],c[1],f[0],f[1])}}else{"spline"===o&&(a=r(a,i)),t.moveTo(a[0][0],a[0][1]),l=1;for(var d=a.length;l<d;l++)t.lineTo(a[l][0],a[l][1])}i&&t.closePath()}}},207:function(t,e,i){var r=i(0),n=i(106),a=function(t,e,i,r,a,o){this.x=null==t?0:t,this.y=null==e?0:e,this.x2=null==i?1:i,this.y2=null==r?0:r,this.type="linear",this.global=o||!1,n.call(this,a)};a.prototype={constructor:a},r.inherits(a,n);var o=a;t.exports=o},218:function(t,e,i){var r=i(204),n=1e-8;function a(t,e){return Math.abs(t-e)<n}e.contain=function(t,e,i){var n=0,o=t[0];if(!o)return!1;for(var s=1;s<t.length;s++){var h=t[s];n+=r(o[0],o[1],h[0],h[1],e,i),o=h}var l=t[0];return a(o[0],l[0])&&a(o[1],l[1])||(n+=r(o[0],o[1],l[0],l[1],e,i)),0!==n}},25:function(t,e){var i="undefined"==typeof Float32Array?Array:Float32Array;function r(){var t=new i(6);return n(t),t}function n(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=1,t[4]=0,t[5]=0,t}function a(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t}e.create=r,e.identity=n,e.copy=a,e.mul=function(t,e,i){var r=e[0]*i[0]+e[2]*i[1],n=e[1]*i[0]+e[3]*i[1],a=e[0]*i[2]+e[2]*i[3],o=e[1]*i[2]+e[3]*i[3],s=e[0]*i[4]+e[2]*i[5]+e[4],h=e[1]*i[4]+e[3]*i[5]+e[5];return t[0]=r,t[1]=n,t[2]=a,t[3]=o,t[4]=s,t[5]=h,t},e.translate=function(t,e,i){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4]+i[0],t[5]=e[5]+i[1],t},e.rotate=function(t,e,i){var r=e[0],n=e[2],a=e[4],o=e[1],s=e[3],h=e[5],l=Math.sin(i),u=Math.cos(i);return t[0]=r*u+o*l,t[1]=-r*l+o*u,t[2]=n*u+s*l,t[3]=-n*l+u*s,t[4]=u*a+l*h,t[5]=u*h-l*a,t},e.scale=function(t,e,i){var r=i[0],n=i[1];return t[0]=e[0]*r,t[1]=e[1]*n,t[2]=e[2]*r,t[3]=e[3]*n,t[4]=e[4]*r,t[5]=e[5]*n,t},e.invert=function(t,e){var i=e[0],r=e[2],n=e[4],a=e[1],o=e[3],s=e[5],h=i*o-a*r;return h?(h=1/h,t[0]=o*h,t[1]=-a*h,t[2]=-r*h,t[3]=i*h,t[4]=(r*s-o*n)*h,t[5]=(a*n-i*s)*h,t):null},e.clone=function(t){var e=r();return a(e,t),e}},267:function(t,e,i){var r,n=i(19),a="urn:schemas-microsoft-com:vml",o="undefined"==typeof window?null:window,s=!1,h=o&&o.document;if(h&&!n.canvasSupported)try{!h.namespaces.zrvml&&h.namespaces.add("zrvml",a),r=function(t){return h.createElement("<zrvml:"+t+' class="zrvml">')}}catch(t){r=function(t){return h.createElement("<"+t+' xmlns="'+a+'" class="zrvml">')}}e.doc=h,e.createNode=function(t){return r(t)},e.initVML=function(){if(!s&&h){s=!0;var t=h.styleSheets;t.length<31?h.createStyleSheet().addRule(".zrvml","behavior:url(#default#VML)"):t[0].addRule(".zrvml","behavior:url(#default#VML)")}}},33:function(t,e,i){var r=i(17),n=i(140),a=i(0),o=a.getContext,s=a.extend,h=a.retrieve2,l=a.retrieve3,u=a.trim,c={},f=0,d=5e3,p=/\{([a-zA-Z0-9_]+)\|([^}]*)\}/g,v="12px sans-serif",g={};function m(t,e){var i=t+":"+(e=e||v);if(c[i])return c[i];for(var r=(t+"").split("\n"),n=0,a=0,o=r.length;a<o;a++)n=Math.max(S(r[a],e).width,n);return f>d&&(f=0,c={}),f++,c[i]=n,n}function _(t,e,i){return"right"===i?t-=e:"center"===i&&(t-=e/2),t}function y(t,e,i){return"middle"===i?t-=e/2:"bottom"===i&&(t-=e),t}function x(t,e,i,r,n){if(!e)return"";var a=(t+"").split("\n");n=w(e,i,r,n);for(var o=0,s=a.length;o<s;o++)a[o]=b(a[o],n);return a.join("\n")}function w(t,e,i,r){(r=s({},r)).font=e;i=h(i,"...");r.maxIterations=h(r.maxIterations,2);var n=r.minChar=h(r.minChar,0);r.cnCharWidth=m("国",e);var a=r.ascCharWidth=m("a",e);r.placeholder=h(r.placeholder,"");for(var o=t=Math.max(0,t-1),l=0;l<n&&o>=a;l++)o-=a;var u=m(i);return u>o&&(i="",u=0),o=t-u,r.ellipsis=i,r.ellipsisWidth=u,r.contentWidth=o,r.containerWidth=t,r}function b(t,e){var i=e.containerWidth,r=e.font,n=e.contentWidth;if(!i)return"";var a=m(t,r);if(a<=i)return t;for(var o=0;;o++){if(a<=n||o>=e.maxIterations){t+=e.ellipsis;break}var s=0===o?k(t,n,e.ascCharWidth,e.cnCharWidth):a>0?Math.floor(t.length*n/a):0;a=m(t=t.substr(0,s),r)}return""===t&&(t=e.placeholder),t}function k(t,e,i,r){for(var n=0,a=0,o=t.length;a<o&&n<e;a++){var s=t.charCodeAt(a);n+=0<=s&&s<=127?i:r}return a}function T(t){return m("国",t)}function S(t,e){return g.measureText(t,e)}function M(t,e,i,r){null!=t&&(t+="");var n=T(e),a=t?t.split("\n"):[],o=a.length*n,s=o;if(i&&(s+=i[0]+i[2]),t&&r){var h=r.outerHeight,l=r.outerWidth;if(null!=h&&s>h)t="",a=[];else if(null!=l)for(var u=w(l-(i?i[1]+i[3]:0),e,r.ellipsis,{minChar:r.minChar,placeholder:r.placeholder}),c=0,f=a.length;c<f;c++)a[c]=b(a[c],u)}return{lines:a,height:o,outerHeight:s,lineHeight:n}}function P(t,e){var i={lines:[],width:0,height:0};if(null!=t&&(t+=""),!t)return i;for(var r,a=p.lastIndex=0;null!=(r=p.exec(t));){var o=r.index;o>a&&C(i,t.substring(a,o)),C(i,r[2],r[1]),a=p.lastIndex}a<t.length&&C(i,t.substring(a,t.length));var s=i.lines,u=0,c=0,f=[],d=e.textPadding,v=e.truncate,g=v&&v.outerWidth,_=v&&v.outerHeight;d&&(null!=g&&(g-=d[1]+d[3]),null!=_&&(_-=d[0]+d[2]));for(var y=0;y<s.length;y++){for(var w=s[y],b=0,k=0,S=0;S<w.tokens.length;S++){var M=(O=w.tokens[S]).styleName&&e.rich[O.styleName]||{},P=O.textPadding=M.textPadding,L=O.font=M.font||e.font,A=O.textHeight=h(M.textHeight,T(L));if(P&&(A+=P[0]+P[2]),O.height=A,O.lineHeight=l(M.textLineHeight,e.textLineHeight,A),O.textAlign=M&&M.textAlign||e.textAlign,O.textVerticalAlign=M&&M.textVerticalAlign||"middle",null!=_&&u+O.lineHeight>_)return{lines:[],width:0,height:0};O.textWidth=m(O.text,L);var D=M.textWidth,z=null==D||"auto"===D;if("string"==typeof D&&"%"===D.charAt(D.length-1))O.percentWidth=D,f.push(O),D=0;else{if(z){D=O.textWidth;var R=M.textBackgroundColor,B=R&&R.image;B&&(B=n.findExistImage(B),n.isImageReady(B)&&(D=Math.max(D,B.width*A/B.height)))}var I=P?P[1]+P[3]:0;D+=I;var E=null!=g?g-k:null;null!=E&&E<D&&(!z||E<I?(O.text="",O.textWidth=D=0):(O.text=x(O.text,E-I,L,v.ellipsis,{minChar:v.minChar}),O.textWidth=m(O.text,L),D=O.textWidth+I))}k+=O.width=D,M&&(b=Math.max(b,O.lineHeight))}w.width=k,w.lineHeight=b,u+=b,c=Math.max(c,k)}i.outerWidth=i.width=h(e.textWidth,c),i.outerHeight=i.height=h(e.textHeight,u),d&&(i.outerWidth+=d[1]+d[3],i.outerHeight+=d[0]+d[2]);for(y=0;y<f.length;y++){var O,F=(O=f[y]).percentWidth;O.width=parseInt(F,10)/100*c}return i}function C(t,e,i){for(var r=""===e,n=e.split("\n"),a=t.lines,o=0;o<n.length;o++){var s=n[o],h={styleName:i,text:s,isLineHolder:!s&&!r};if(o)a.push({tokens:[h]});else{var l=(a[a.length-1]||(a[0]={tokens:[]})).tokens,u=l.length;1===u&&l[0].isLineHolder?l[0]=h:(s||!u||r)&&l.push(h)}}}g.measureText=function(t,e){var i=o();return i.font=e||v,i.measureText(t)},e.DEFAULT_FONT=v,e.$override=function(t,e){g[t]=e},e.getWidth=m,e.getBoundingRect=function(t,e,i,n,a,o,s){return o?function(t,e,i,n,a,o,s){var h=P(t,{rich:o,truncate:s,font:e,textAlign:i,textPadding:a}),l=h.outerWidth,u=h.outerHeight,c=_(0,l,i),f=y(0,u,n);return new r(c,f,l,u)}(t,e,i,n,a,o,s):function(t,e,i,n,a,o){var s=M(t,e,a,o),h=m(t,e);a&&(h+=a[1]+a[3]);var l=s.outerHeight,u=_(0,h,i),c=y(0,l,n),f=new r(u,c,h,l);return f.lineHeight=s.lineHeight,f}(t,e,i,n,a,s)},e.adjustTextX=_,e.adjustTextY=y,e.adjustTextPositionOnRect=function(t,e,i){var r=e.x,n=e.y,a=e.height,o=e.width,s=a/2,h="left",l="top";switch(t){case"left":r-=i,n+=s,h="right",l="middle";break;case"right":r+=i+o,n+=s,l="middle";break;case"top":r+=o/2,n-=i,h="center",l="bottom";break;case"bottom":r+=o/2,n+=a+i,h="center";break;case"inside":r+=o/2,n+=s,h="center",l="middle";break;case"insideLeft":r+=i,n+=s,l="middle";break;case"insideRight":r+=o-i,n+=s,h="right",l="middle";break;case"insideTop":r+=o/2,n+=i,h="center";break;case"insideBottom":r+=o/2,n+=a-i,h="center",l="bottom";break;case"insideTopLeft":r+=i,n+=i;break;case"insideTopRight":r+=o-i,n+=i,h="right";break;case"insideBottomLeft":r+=i,n+=a-i,l="bottom";break;case"insideBottomRight":r+=o-i,n+=a-i,h="right",l="bottom"}return{x:r,y:n,textAlign:h,textVerticalAlign:l}},e.truncateText=x,e.getLineHeight=T,e.measureText=S,e.parsePlainText=M,e.parseRichText=P,e.makeFont=function(t){var e=(t.fontSize||t.fontFamily)&&[t.fontStyle,t.fontWeight,(t.fontSize||12)+"px",t.fontFamily||"sans-serif"].join(" ");return e&&u(e)||t.textFont||t.font}},34:function(t,e,i){var r=i(193),n={transparent:[0,0,0,0],aliceblue:[240,248,255,1],antiquewhite:[250,235,215,1],aqua:[0,255,255,1],aquamarine:[127,255,212,1],azure:[240,255,255,1],beige:[245,245,220,1],bisque:[255,228,196,1],black:[0,0,0,1],blanchedalmond:[255,235,205,1],blue:[0,0,255,1],blueviolet:[138,43,226,1],brown:[165,42,42,1],burlywood:[222,184,135,1],cadetblue:[95,158,160,1],chartreuse:[127,255,0,1],chocolate:[210,105,30,1],coral:[255,127,80,1],cornflowerblue:[100,149,237,1],cornsilk:[255,248,220,1],crimson:[220,20,60,1],cyan:[0,255,255,1],darkblue:[0,0,139,1],darkcyan:[0,139,139,1],darkgoldenrod:[184,134,11,1],darkgray:[169,169,169,1],darkgreen:[0,100,0,1],darkgrey:[169,169,169,1],darkkhaki:[189,183,107,1],darkmagenta:[139,0,139,1],darkolivegreen:[85,107,47,1],darkorange:[255,140,0,1],darkorchid:[153,50,204,1],darkred:[139,0,0,1],darksalmon:[233,150,122,1],darkseagreen:[143,188,143,1],darkslateblue:[72,61,139,1],darkslategray:[47,79,79,1],darkslategrey:[47,79,79,1],darkturquoise:[0,206,209,1],darkviolet:[148,0,211,1],deeppink:[255,20,147,1],deepskyblue:[0,191,255,1],dimgray:[105,105,105,1],dimgrey:[105,105,105,1],dodgerblue:[30,144,255,1],firebrick:[178,34,34,1],floralwhite:[255,250,240,1],forestgreen:[34,139,34,1],fuchsia:[255,0,255,1],gainsboro:[220,220,220,1],ghostwhite:[248,248,255,1],gold:[255,215,0,1],goldenrod:[218,165,32,1],gray:[128,128,128,1],green:[0,128,0,1],greenyellow:[173,255,47,1],grey:[128,128,128,1],honeydew:[240,255,240,1],hotpink:[255,105,180,1],indianred:[205,92,92,1],indigo:[75,0,130,1],ivory:[255,255,240,1],khaki:[240,230,140,1],lavender:[230,230,250,1],lavenderblush:[255,240,245,1],lawngreen:[124,252,0,1],lemonchiffon:[255,250,205,1],lightblue:[173,216,230,1],lightcoral:[240,128,128,1],lightcyan:[224,255,255,1],lightgoldenrodyellow:[250,250,210,1],lightgray:[211,211,211,1],lightgreen:[144,238,144,1],lightgrey:[211,211,211,1],lightpink:[255,182,193,1],lightsalmon:[255,160,122,1],lightseagreen:[32,178,170,1],lightskyblue:[135,206,250,1],lightslategray:[119,136,153,1],lightslategrey:[119,136,153,1],lightsteelblue:[176,196,222,1],lightyellow:[255,255,224,1],lime:[0,255,0,1],limegreen:[50,205,50,1],linen:[250,240,230,1],magenta:[255,0,255,1],maroon:[128,0,0,1],mediumaquamarine:[102,205,170,1],mediumblue:[0,0,205,1],mediumorchid:[186,85,211,1],mediumpurple:[147,112,219,1],mediumseagreen:[60,179,113,1],mediumslateblue:[123,104,238,1],mediumspringgreen:[0,250,154,1],mediumturquoise:[72,209,204,1],mediumvioletred:[199,21,133,1],midnightblue:[25,25,112,1],mintcream:[245,255,250,1],mistyrose:[255,228,225,1],moccasin:[255,228,181,1],navajowhite:[255,222,173,1],navy:[0,0,128,1],oldlace:[253,245,230,1],olive:[128,128,0,1],olivedrab:[107,142,35,1],orange:[255,165,0,1],orangered:[255,69,0,1],orchid:[218,112,214,1],palegoldenrod:[238,232,170,1],palegreen:[152,251,152,1],paleturquoise:[175,238,238,1],palevioletred:[219,112,147,1],papayawhip:[255,239,213,1],peachpuff:[255,218,185,1],peru:[205,133,63,1],pink:[255,192,203,1],plum:[221,160,221,1],powderblue:[176,224,230,1],purple:[128,0,128,1],red:[255,0,0,1],rosybrown:[188,143,143,1],royalblue:[65,105,225,1],saddlebrown:[139,69,19,1],salmon:[250,128,114,1],sandybrown:[244,164,96,1],seagreen:[46,139,87,1],seashell:[255,245,238,1],sienna:[160,82,45,1],silver:[192,192,192,1],skyblue:[135,206,235,1],slateblue:[106,90,205,1],slategray:[112,128,144,1],slategrey:[112,128,144,1],snow:[255,250,250,1],springgreen:[0,255,127,1],steelblue:[70,130,180,1],tan:[210,180,140,1],teal:[0,128,128,1],thistle:[216,191,216,1],tomato:[255,99,71,1],turquoise:[64,224,208,1],violet:[238,130,238,1],wheat:[245,222,179,1],white:[255,255,255,1],whitesmoke:[245,245,245,1],yellow:[255,255,0,1],yellowgreen:[154,205,50,1]};function a(t){return(t=Math.round(t))<0?0:t>255?255:t}function o(t){return t<0?0:t>1?1:t}function s(t){return t.length&&"%"===t.charAt(t.length-1)?a(parseFloat(t)/100*255):a(parseInt(t,10))}function h(t){return t.length&&"%"===t.charAt(t.length-1)?o(parseFloat(t)/100):o(parseFloat(t))}function l(t,e,i){return i<0?i+=1:i>1&&(i-=1),6*i<1?t+(e-t)*i*6:2*i<1?e:3*i<2?t+(e-t)*(2/3-i)*6:t}function u(t,e,i){return t+(e-t)*i}function c(t,e,i,r,n){return t[0]=e,t[1]=i,t[2]=r,t[3]=n,t}function f(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t}var d=new r(20),p=null;function v(t,e){p&&f(p,e),p=d.put(t,p||e.slice())}function g(t,e){if(t){e=e||[];var i=d.get(t);if(i)return f(e,i);var r,a=(t+="").replace(/ /g,"").toLowerCase();if(a in n)return f(e,n[a]),v(t,e),e;if("#"===a.charAt(0))return 4===a.length?(r=parseInt(a.substr(1),16))>=0&&r<=4095?(c(e,(3840&r)>>4|(3840&r)>>8,240&r|(240&r)>>4,15&r|(15&r)<<4,1),v(t,e),e):void c(e,0,0,0,1):7===a.length?(r=parseInt(a.substr(1),16))>=0&&r<=16777215?(c(e,(16711680&r)>>16,(65280&r)>>8,255&r,1),v(t,e),e):void c(e,0,0,0,1):void 0;var o=a.indexOf("("),l=a.indexOf(")");if(-1!==o&&l+1===a.length){var u=a.substr(0,o),p=a.substr(o+1,l-(o+1)).split(","),g=1;switch(u){case"rgba":if(4!==p.length)return void c(e,0,0,0,1);g=h(p.pop());case"rgb":return 3!==p.length?void c(e,0,0,0,1):(c(e,s(p[0]),s(p[1]),s(p[2]),g),v(t,e),e);case"hsla":return 4!==p.length?void c(e,0,0,0,1):(p[3]=h(p[3]),m(p,e),v(t,e),e);case"hsl":return 3!==p.length?void c(e,0,0,0,1):(m(p,e),v(t,e),e);default:return}}c(e,0,0,0,1)}}function m(t,e){var i=(parseFloat(t[0])%360+360)%360/360,r=h(t[1]),n=h(t[2]),o=n<=.5?n*(r+1):n+r-n*r,s=2*n-o;return c(e=e||[],a(255*l(s,o,i+1/3)),a(255*l(s,o,i)),a(255*l(s,o,i-1/3)),1),4===t.length&&(e[3]=t[3]),e}function _(t,e,i){if(e&&e.length&&t>=0&&t<=1){i=i||[];var r=t*(e.length-1),n=Math.floor(r),s=Math.ceil(r),h=e[n],l=e[s],c=r-n;return i[0]=a(u(h[0],l[0],c)),i[1]=a(u(h[1],l[1],c)),i[2]=a(u(h[2],l[2],c)),i[3]=o(u(h[3],l[3],c)),i}}var y=_;function x(t,e,i){if(e&&e.length&&t>=0&&t<=1){var r=t*(e.length-1),n=Math.floor(r),s=Math.ceil(r),h=g(e[n]),l=g(e[s]),c=r-n,f=b([a(u(h[0],l[0],c)),a(u(h[1],l[1],c)),a(u(h[2],l[2],c)),o(u(h[3],l[3],c))],"rgba");return i?{color:f,leftIndex:n,rightIndex:s,value:r}:f}}var w=x;function b(t,e){if(t&&t.length){var i=t[0]+","+t[1]+","+t[2];return"rgba"!==e&&"hsva"!==e&&"hsla"!==e||(i+=","+t[3]),e+"("+i+")"}}e.parse=g,e.lift=function(t,e){var i=g(t);if(i){for(var r=0;r<3;r++)i[r]=e<0?i[r]*(1-e)|0:(255-i[r])*e+i[r]|0,i[r]>255?i[r]=255:t[r]<0&&(i[r]=0);return b(i,4===i.length?"rgba":"rgb")}},e.toHex=function(t){var e=g(t);if(e)return((1<<24)+(e[0]<<16)+(e[1]<<8)+ +e[2]).toString(16).slice(1)},e.fastLerp=_,e.fastMapToColor=y,e.lerp=x,e.mapToColor=w,e.modifyHSL=function(t,e,i,r){if(t=g(t))return t=function(t){if(t){var e,i,r=t[0]/255,n=t[1]/255,a=t[2]/255,o=Math.min(r,n,a),s=Math.max(r,n,a),h=s-o,l=(s+o)/2;if(0===h)e=0,i=0;else{i=l<.5?h/(s+o):h/(2-s-o);var u=((s-r)/6+h/2)/h,c=((s-n)/6+h/2)/h,f=((s-a)/6+h/2)/h;r===s?e=f-c:n===s?e=1/3+u-f:a===s&&(e=2/3+c-u),e<0&&(e+=1),e>1&&(e-=1)}var d=[360*e,i,l];return null!=t[3]&&d.push(t[3]),d}}(t),null!=e&&(t[0]=(n=e,(n=Math.round(n))<0?0:n>360?360:n)),null!=i&&(t[1]=h(i)),null!=r&&(t[2]=h(r)),b(m(t),"rgba");var n},e.modifyAlpha=function(t,e){if((t=g(t))&&null!=e)return t[3]=o(e),b(t,"rgba")},e.stringify=b},35:function(t,e,i){var r=i(51);e.Dispatcher=r;var n=i(19),a="undefined"!=typeof window&&!!window.addEventListener,o=/^(?:mouse|pointer|contextmenu|drag|drop)|click/;function s(t,e,i,r){return i=i||{},r||!n.canvasSupported?h(t,e,i):n.browser.firefox&&null!=e.layerX&&e.layerX!==e.offsetX?(i.zrX=e.layerX,i.zrY=e.layerY):null!=e.offsetX?(i.zrX=e.offsetX,i.zrY=e.offsetY):h(t,e,i),i}function h(t,e,i){var r=function(t){return t.getBoundingClientRect?t.getBoundingClientRect():{left:0,top:0}}(t);i.zrX=e.clientX-r.left,i.zrY=e.clientY-r.top}var l=a?function(t){t.preventDefault(),t.stopPropagation(),t.cancelBubble=!0}:function(t){t.returnValue=!1,t.cancelBubble=!0};e.clientToLocal=s,e.normalizeEvent=function(t,e,i){if(null!=(e=e||window.event).zrX)return e;var r=e.type;if(r&&r.indexOf("touch")>=0){var n="touchend"!=r?e.targetTouches[0]:e.changedTouches[0];n&&s(t,n,e,i)}else s(t,e,e,i),e.zrDelta=e.wheelDelta?e.wheelDelta/120:-(e.detail||0)/3;var a=e.button;return null==e.which&&void 0!==a&&o.test(e.type)&&(e.which=1&a?1:2&a?3:4&a?2:0),e},e.addEventListener=function(t,e,i){a?t.addEventListener(e,i):t.attachEvent("on"+e,i)},e.removeEventListener=function(t,e,i){a?t.removeEventListener(e,i):t.detachEvent("on"+e,i)},e.stop=l,e.notLeftMouse=function(t){return t.which>1}},379:function(t,e,i){var r=i(0),n=i(15),a=i(380),o=i(51),s="silent";function h(){}h.prototype.dispose=function(){};var l=["click","dblclick","mousewheel","mouseout","mouseup","mousedown","mousemove","contextmenu"],u=function(t,e,i,r){o.call(this),this.storage=t,this.painter=e,this.painterRoot=r,i=i||new h,this.proxy=null,this._hovered={},this._lastTouchMoment,this._lastX,this._lastY,a.call(this),this.setHandlerProxy(i)};function c(t,e,i){if(t[t.rectHover?"rectContain":"contain"](e,i)){for(var r,n=t;n;){if(n.clipPath&&!n.clipPath.contain(e,i))return!1;n.silent&&(r=!0),n=n.parent}return!r||s}return!1}u.prototype={constructor:u,setHandlerProxy:function(t){this.proxy&&this.proxy.dispose(),t&&(r.each(l,function(e){t.on&&t.on(e,this[e],this)},this),t.handler=this),this.proxy=t},mousemove:function(t){var e=t.zrX,i=t.zrY,r=this._hovered,n=r.target;n&&!n.__zr&&(n=(r=this.findHover(r.x,r.y)).target);var a=this._hovered=this.findHover(e,i),o=a.target,s=this.proxy;s.setCursor&&s.setCursor(o?o.cursor:"default"),n&&o!==n&&this.dispatchToElement(r,"mouseout",t),this.dispatchToElement(a,"mousemove",t),o&&o!==n&&this.dispatchToElement(a,"mouseover",t)},mouseout:function(t){this.dispatchToElement(this._hovered,"mouseout",t);var e,i=t.toElement||t.relatedTarget;do{i=i&&i.parentNode}while(i&&9!=i.nodeType&&!(e=i===this.painterRoot));!e&&this.trigger("globalout",{event:t})},resize:function(t){this._hovered={}},dispatch:function(t,e){var i=this[t];i&&i.call(this,e)},dispose:function(){this.proxy.dispose(),this.storage=this.proxy=this.painter=null},setCursorStyle:function(t){var e=this.proxy;e.setCursor&&e.setCursor(t)},dispatchToElement:function(t,e,i){var r=(t=t||{}).target;if(!r||!r.silent){for(var n="on"+e,a=function(t,e,i){return{type:t,event:i,target:e.target,topTarget:e.topTarget,cancelBubble:!1,offsetX:i.zrX,offsetY:i.zrY,gestureEvent:i.gestureEvent,pinchX:i.pinchX,pinchY:i.pinchY,pinchScale:i.pinchScale,wheelDelta:i.zrDelta,zrByTouch:i.zrByTouch,which:i.which}}(e,t,i);r&&(r[n]&&(a.cancelBubble=r[n].call(r,a)),r.trigger(e,a),r=r.parent,!a.cancelBubble););a.cancelBubble||(this.trigger(e,a),this.painter&&this.painter.eachOtherLayer(function(t){"function"==typeof t[n]&&t[n].call(t,a),t.trigger&&t.trigger(e,a)}))}},findHover:function(t,e,i){for(var r=this.storage.getDisplayList(),n={x:t,y:e},a=r.length-1;a>=0;a--){var o;if(r[a]!==i&&!r[a].ignore&&(o=c(r[a],t,e))&&(!n.topTarget&&(n.topTarget=r[a]),o!==s)){n.target=r[a];break}}return n}},r.each(["click","mousedown","mouseup","mousewheel","dblclick","contextmenu"],function(t){u.prototype[t]=function(e){var i=this.findHover(e.zrX,e.zrY),r=i.target;if("mousedown"===t)this._downEl=r,this._downPoint=[e.zrX,e.zrY],this._upEl=r;else if("mouseup"===t)this._upEl=r;else if("click"===t){if(this._downEl!==this._upEl||!this._downPoint||n.dist(this._downPoint,[e.zrX,e.zrY])>4)return;this._downPoint=null}this.dispatchToElement(i,t,e)}}),r.mixin(u,o),r.mixin(u,a);var f=u;t.exports=f},380:function(t,e){function i(){this.on("mousedown",this._dragStart,this),this.on("mousemove",this._drag,this),this.on("mouseup",this._dragEnd,this),this.on("globalout",this._dragEnd,this)}function r(t,e){return{target:t,topTarget:e&&e.topTarget}}i.prototype={constructor:i,_dragStart:function(t){var e=t.target;e&&e.draggable&&(this._draggingTarget=e,e.dragging=!0,this._x=t.offsetX,this._y=t.offsetY,this.dispatchToElement(r(e,t),"dragstart",t.event))},_drag:function(t){var e=this._draggingTarget;if(e){var i=t.offsetX,n=t.offsetY,a=i-this._x,o=n-this._y;this._x=i,this._y=n,e.drift(a,o,t),this.dispatchToElement(r(e,t),"drag",t.event);var s=this.findHover(i,n,e).target,h=this._dropTarget;this._dropTarget=s,e!==s&&(h&&s!==h&&this.dispatchToElement(r(h,t),"dragleave",t.event),s&&s!==h&&this.dispatchToElement(r(s,t),"dragenter",t.event))}},_dragEnd:function(t){var e=this._draggingTarget;e&&(e.dragging=!1),this.dispatchToElement(r(e,t),"dragend",t.event),this._dropTarget&&this.dispatchToElement(r(this._dropTarget,t),"drop",t.event),this._draggingTarget=null,this._dropTarget=null}};var n=i;t.exports=n},381:function(t,e,i){var r=i(0),n=i(19),a=i(103),o=i(139);function s(t,e){return t.zlevel===e.zlevel?t.z===e.z?t.z2-e.z2:t.z-e.z:t.zlevel-e.zlevel}var h=function(){this._roots=[],this._displayList=[],this._displayListLen=0};h.prototype={constructor:h,traverse:function(t,e){for(var i=0;i<this._roots.length;i++)this._roots[i].traverse(t,e)},getDisplayList:function(t,e){return e=e||!1,t&&this.updateDisplayList(e),this._displayList},updateDisplayList:function(t){this._displayListLen=0;for(var e=this._roots,i=this._displayList,r=0,a=e.length;r<a;r++)this._updateAndAddDisplayable(e[r],null,t);i.length=this._displayListLen,n.canvasSupported&&o(i,s)},_updateAndAddDisplayable:function(t,e,i){if(!t.ignore||i){t.beforeUpdate(),t.__dirty&&t.update(),t.afterUpdate();var r=t.clipPath;if(r){e=e?e.slice():[];for(var n=r,a=t;n;)n.parent=a,n.updateTransform(),e.push(n),a=n,n=n.clipPath}if(t.isGroup){for(var o=t._children,s=0;s<o.length;s++){var h=o[s];t.__dirty&&(h.__dirty=!0),this._updateAndAddDisplayable(h,e,i)}t.__dirty=!1}else t.__clipPaths=e,this._displayList[this._displayListLen++]=t}},addRoot:function(t){t.__storage!==this&&(t instanceof a&&t.addChildrenToStorage(this),this.addToStorage(t),this._roots.push(t))},delRoot:function(t){if(null==t){for(var e=0;e<this._roots.length;e++){var i=this._roots[e];i instanceof a&&i.delChildrenFromStorage(this)}return this._roots=[],this._displayList=[],void(this._displayListLen=0)}if(t instanceof Array){e=0;for(var n=t.length;e<n;e++)this.delRoot(t[e])}else{var o=r.indexOf(this._roots,t);o>=0&&(this.delFromStorage(t),this._roots.splice(o,1),t instanceof a&&t.delChildrenFromStorage(this))}},addToStorage:function(t){return t&&(t.__storage=this,t.dirty(!1)),this},delFromStorage:function(t){return t&&(t.__storage=null),this},dispose:function(){this._renderList=this._roots=null},displayableSortFunc:s};var l=h;t.exports=l},382:function(t,e,i){var r=i(192),n=i(76),a=i(0),o=a.isString,s=a.isFunction,h=a.isObject,l=a.isArrayLike,u=a.indexOf,c=function(){this.animators=[]};c.prototype={constructor:c,animate:function(t,e){var i,a=!1,o=this,s=this.__zr;if(t){var h=t.split("."),l=o;a="shape"===h[0];for(var c=0,f=h.length;c<f;c++)l&&(l=l[h[c]]);l&&(i=l)}else i=o;if(i){var d=o.animators,p=new r(i,e);return p.during(function(t){o.dirty(a)}).done(function(){d.splice(u(d,p),1)}),d.push(p),s&&s.animation.addAnimator(p),p}n('Property "'+t+'" is not existed in element '+o.id)},stopAnimation:function(t){for(var e=this.animators,i=e.length,r=0;r<i;r++)e[r].stop(t);return e.length=0,this},animateTo:function(t,e,i,r,n,a){o(i)?(n=r,r=i,i=0):s(r)?(n=r,r="linear",i=0):s(i)?(n=i,i=0):s(e)?(n=e,e=500):e||(e=500),this.stopAnimation(),this._animateToShallow("",this,t,e,i);var h=this.animators.slice(),l=h.length;function u(){--l||n&&n()}l||n&&n();for(var c=0;c<h.length;c++)h[c].done(u).start(r,a)},_animateToShallow:function(t,e,i,r,n){var a={},o=0;for(var s in i)if(i.hasOwnProperty(s))if(null!=e[s])h(i[s])&&!l(i[s])?this._animateToShallow(t?t+"."+s:s,e[s],i[s],r,n):(a[s]=i[s],o++);else if(null!=i[s])if(t){var u={};u[t]={},u[t][s]=i[s],this.attr(u)}else this.attr(s,i[s]);return o>0&&this.animate(t,!1).when(null==r?500:r,a).delay(n||0),this}};var f=c;t.exports=f},383:function(t,e,i){var r=i(384);function n(t){this._target=t.target,this._life=t.life||1e3,this._delay=t.delay||0,this._initialized=!1,this.loop=null!=t.loop&&t.loop,this.gap=t.gap||0,this.easing=t.easing||"Linear",this.onframe=t.onframe,this.ondestroy=t.ondestroy,this.onrestart=t.onrestart,this._pausedTime=0,this._paused=!1}n.prototype={constructor:n,step:function(t,e){if(this._initialized||(this._startTime=t+this._delay,this._initialized=!0),this._paused)this._pausedTime+=e;else{var i=(t-this._startTime-this._pausedTime)/this._life;if(!(i<0)){i=Math.min(i,1);var n=this.easing,a="string"==typeof n?r[n]:n,o="function"==typeof a?a(i):i;return this.fire("frame",o),1==i?this.loop?(this.restart(t),"restart"):(this._needsRemove=!0,"destroy"):null}}},restart:function(t){var e=(t-this._startTime-this._pausedTime)%this._life;this._startTime=t-e+this.gap,this._pausedTime=0,this._needsRemove=!1},fire:function(t,e){this[t="on"+t]&&this[t](this._target,e)},pause:function(){this._paused=!0},resume:function(){this._paused=!1}};var a=n;t.exports=a},384:function(t,e){var i={linear:function(t){return t},quadraticIn:function(t){return t*t},quadraticOut:function(t){return t*(2-t)},quadraticInOut:function(t){return(t*=2)<1?.5*t*t:-.5*(--t*(t-2)-1)},cubicIn:function(t){return t*t*t},cubicOut:function(t){return--t*t*t+1},cubicInOut:function(t){return(t*=2)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},quarticIn:function(t){return t*t*t*t},quarticOut:function(t){return 1- --t*t*t*t},quarticInOut:function(t){return(t*=2)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)},quinticIn:function(t){return t*t*t*t*t},quinticOut:function(t){return--t*t*t*t*t+1},quinticInOut:function(t){return(t*=2)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},sinusoidalIn:function(t){return 1-Math.cos(t*Math.PI/2)},sinusoidalOut:function(t){return Math.sin(t*Math.PI/2)},sinusoidalInOut:function(t){return.5*(1-Math.cos(Math.PI*t))},exponentialIn:function(t){return 0===t?0:Math.pow(1024,t-1)},exponentialOut:function(t){return 1===t?1:1-Math.pow(2,-10*t)},exponentialInOut:function(t){return 0===t?0:1===t?1:(t*=2)<1?.5*Math.pow(1024,t-1):.5*(2-Math.pow(2,-10*(t-1)))},circularIn:function(t){return 1-Math.sqrt(1-t*t)},circularOut:function(t){return Math.sqrt(1- --t*t)},circularInOut:function(t){return(t*=2)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},elasticIn:function(t){var e,i=.1;return 0===t?0:1===t?1:(!i||i<1?(i=1,e=.1):e=.4*Math.asin(1/i)/(2*Math.PI),-i*Math.pow(2,10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/.4))},elasticOut:function(t){var e,i=.1;return 0===t?0:1===t?1:(!i||i<1?(i=1,e=.1):e=.4*Math.asin(1/i)/(2*Math.PI),i*Math.pow(2,-10*t)*Math.sin((t-e)*(2*Math.PI)/.4)+1)},elasticInOut:function(t){var e,i=.1;return 0===t?0:1===t?1:(!i||i<1?(i=1,e=.1):e=.4*Math.asin(1/i)/(2*Math.PI),(t*=2)<1?i*Math.pow(2,10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/.4)*-.5:i*Math.pow(2,-10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/.4)*.5+1)},backIn:function(t){var e=1.70158;return t*t*((e+1)*t-e)},backOut:function(t){var e=1.70158;return--t*t*((e+1)*t+e)+1},backInOut:function(t){var e=2.5949095;return(t*=2)<1?t*t*((e+1)*t-e)*.5:.5*((t-=2)*t*((e+1)*t+e)+2)},bounceIn:function(t){return 1-i.bounceOut(1-t)},bounceOut:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},bounceInOut:function(t){return t<.5?.5*i.bounceIn(2*t):.5*i.bounceOut(2*t-1)+.5}},r=i;t.exports=r},385:function(t,e,i){var r=i(104).devicePixelRatio,n=i(0),a=i(76),o=i(17),s=i(139),h=i(386),l=i(197),u=i(77),c=i(19);function f(t){return parseInt(t,10)}var d=new o(0,0,0,0),p=new o(0,0,0,0);var v=function(t,e,i){this.type="canvas";var a=!t.nodeName||"CANVAS"===t.nodeName.toUpperCase();this._opts=i=n.extend({},i||{}),this.dpr=i.devicePixelRatio||r,this._singleCanvas=a,this.root=t;var o=t.style;o&&(o["-webkit-tap-highlight-color"]="transparent",o["-webkit-user-select"]=o["user-select"]=o["-webkit-touch-callout"]="none",t.innerHTML=""),this.storage=e;var s=this._zlevelList=[],l=this._layers={};if(this._layerConfig={},this._needsManuallyCompositing=!1,a){var u=t.width,c=t.height;null!=i.width&&(u=i.width),null!=i.height&&(c=i.height),this.dpr=i.devicePixelRatio||1,t.width=u*this.dpr,t.height=c*this.dpr,this._width=u,this._height=c;var f=new h(t,this,this.dpr);f.__builtin__=!0,f.initContext(),l[314159]=f,f.zlevel=314159,s.push(314159),this._domRoot=t}else{this._width=this._getSize(0),this._height=this._getSize(1);var d=this._domRoot=function(t,e){var i=document.createElement("div");return i.style.cssText=["position:relative","overflow:hidden","width:"+t+"px","height:"+e+"px","padding:0","margin:0","border-width:0"].join(";")+";",i}(this._width,this._height);t.appendChild(d)}this._hoverlayer=null,this._hoverElements=[]};v.prototype={constructor:v,getType:function(){return"canvas"},isSingleCanvas:function(){return this._singleCanvas},getViewportRoot:function(){return this._domRoot},getViewportRootOffset:function(){var t=this.getViewportRoot();if(t)return{offsetLeft:t.offsetLeft||0,offsetTop:t.offsetTop||0}},refresh:function(t){var e=this.storage.getDisplayList(!0),i=this._zlevelList;this._redrawId=Math.random(),this._paintList(e,t,this._redrawId);for(var r=0;r<i.length;r++){var n=i[r],a=this._layers[n];if(!a.__builtin__&&a.refresh){var o=0===r?this._backgroundColor:null;a.refresh(o)}}return this.refreshHover(),this},addHover:function(t,e){if(!t.__hoverMir){var i=new t.constructor({style:t.style,shape:t.shape});i.__from=t,t.__hoverMir=i,i.setStyle(e),this._hoverElements.push(i)}},removeHover:function(t){var e=t.__hoverMir,i=this._hoverElements,r=n.indexOf(i,e);r>=0&&i.splice(r,1),t.__hoverMir=null},clearHover:function(t){for(var e=this._hoverElements,i=0;i<e.length;i++){var r=e[i].__from;r&&(r.__hoverMir=null)}e.length=0},refreshHover:function(){var t=this._hoverElements,e=t.length,i=this._hoverlayer;if(i&&i.clear(),e){s(t,this.storage.displayableSortFunc),i||(i=this._hoverlayer=this.getLayer(1e5));var r={};i.ctx.save();for(var n=0;n<e;){var a=t[n],o=a.__from;o&&o.__zr?(n++,o.invisible||(a.transform=o.transform,a.invTransform=o.invTransform,a.__clipPaths=o.__clipPaths,this._doPaintEl(a,i,!0,r))):(t.splice(n,1),o.__hoverMir=null,e--)}i.ctx.restore()}},getHoverLayer:function(){return this.getLayer(1e5)},_paintList:function(t,e,i){if(this._redrawId===i){e=e||!1,this._updateLayerStatus(t);var r=this._doPaintList(t,e);if(this._needsManuallyCompositing&&this._compositeManually(),!r){var n=this;l(function(){n._paintList(t,e,i)})}}},_compositeManually:function(){var t=this.getLayer(314159).ctx,e=this._domRoot.width,i=this._domRoot.height;t.clearRect(0,0,e,i),this.eachBuiltinLayer(function(r){r.virtual&&t.drawImage(r.dom,0,0,e,i)})},_doPaintList:function(t,e){for(var i=[],r=0;r<this._zlevelList.length;r++){var a=this._zlevelList[r];(h=this._layers[a]).__builtin__&&h!==this._hoverlayer&&(h.__dirty||e)&&i.push(h)}for(var o=!0,s=0;s<i.length;s++){var h,l=(h=i[s]).ctx,u={};l.save();var f=e?h.__startIndex:h.__drawIndex,d=!e&&h.incremental&&Date.now,p=d&&Date.now(),v=h.zlevel===this._zlevelList[0]?this._backgroundColor:null;if(h.__startIndex===h.__endIndex)h.clear(!1,v);else if(f===h.__startIndex){var g=t[f];g.incremental&&g.notClear&&!e||h.clear(!1,v)}-1===f&&(console.error("For some unknown reason. drawIndex is -1"),f=h.__startIndex);for(var m=f;m<h.__endIndex;m++){var _=t[m];if(this._doPaintEl(_,h,e,u),_.__dirty=!1,d)if(Date.now()-p>15)break}h.__drawIndex=m,h.__drawIndex<h.__endIndex&&(o=!1),u.prevElClipPaths&&l.restore(),l.restore()}return c.wxa&&n.each(this._layers,function(t){t&&t.ctx&&t.ctx.draw&&t.ctx.draw()}),o},_doPaintEl:function(t,e,i,r){var n=e.ctx,a=t.transform;if((e.__dirty||i)&&!t.invisible&&0!==t.style.opacity&&(!a||a[0]||a[3])&&(!t.culling||!function(t,e,i){return d.copy(t.getBoundingRect()),t.transform&&d.applyTransform(t.transform),p.width=e,p.height=i,!d.intersect(p)}(t,this._width,this._height))){var o=t.__clipPaths;r.prevElClipPaths&&!function(t,e){if(t==e)return!1;if(!t||!e||t.length!==e.length)return!0;for(var i=0;i<t.length;i++)if(t[i]!==e[i])return!0}(o,r.prevElClipPaths)||(r.prevElClipPaths&&(e.ctx.restore(),r.prevElClipPaths=null,r.prevEl=null),o&&(n.save(),function(t,e){for(var i=0;i<t.length;i++){var r=t[i];r.setTransform(e),e.beginPath(),r.buildPath(e,r.shape),e.clip(),r.restoreTransform(e)}}(o,n),r.prevElClipPaths=o)),t.beforeBrush&&t.beforeBrush(n),t.brush(n,r.prevEl||null),r.prevEl=t,t.afterBrush&&t.afterBrush(n)}},getLayer:function(t,e){this._singleCanvas&&!this._needsManuallyCompositing&&(t=314159);var i=this._layers[t];return i||((i=new h("zr_"+t,this,this.dpr)).zlevel=t,i.__builtin__=!0,this._layerConfig[t]&&n.merge(i,this._layerConfig[t],!0),e&&(i.virtual=e),this.insertLayer(t,i),i.initContext()),i},insertLayer:function(t,e){var i=this._layers,r=this._zlevelList,n=r.length,o=null,s=-1,h=this._domRoot;if(i[t])a("ZLevel "+t+" has been used already");else if(function(t){return!!t&&(!!t.__builtin__||"function"==typeof t.resize&&"function"==typeof t.refresh)}(e)){if(n>0&&t>r[0]){for(s=0;s<n-1&&!(r[s]<t&&r[s+1]>t);s++);o=i[r[s]]}if(r.splice(s+1,0,t),i[t]=e,!e.virtual)if(o){var l=o.dom;l.nextSibling?h.insertBefore(e.dom,l.nextSibling):h.appendChild(e.dom)}else h.firstChild?h.insertBefore(e.dom,h.firstChild):h.appendChild(e.dom)}else a("Layer of zlevel "+t+" is not valid")},eachLayer:function(t,e){var i,r,n=this._zlevelList;for(r=0;r<n.length;r++)i=n[r],t.call(e,this._layers[i],i)},eachBuiltinLayer:function(t,e){var i,r,n,a=this._zlevelList;for(n=0;n<a.length;n++)r=a[n],(i=this._layers[r]).__builtin__&&t.call(e,i,r)},eachOtherLayer:function(t,e){var i,r,n,a=this._zlevelList;for(n=0;n<a.length;n++)r=a[n],(i=this._layers[r]).__builtin__||t.call(e,i,r)},getLayers:function(){return this._layers},_updateLayerStatus:function(t){function e(t){r&&(r.__endIndex!==t&&(r.__dirty=!0),r.__endIndex=t)}if(this.eachBuiltinLayer(function(t,e){t.__dirty=t.__used=!1}),this._singleCanvas)for(var i=1;i<t.length;i++){if((o=t[i]).zlevel!==t[i-1].zlevel||o.incremental){this._needsManuallyCompositing=!0;break}}var r=null,n=0;for(i=0;i<t.length;i++){var o,s,h=(o=t[i]).zlevel;o.incremental?((s=this.getLayer(h+.001,this._needsManuallyCompositing)).incremental=!0,n=1):s=this.getLayer(h+(n>0?.01:0),this._needsManuallyCompositing),s.__builtin__||a("ZLevel "+h+" has been used by unkown layer "+s.id),s!==r&&(s.__used=!0,s.__startIndex!==i&&(s.__dirty=!0),s.__startIndex=i,s.incremental?s.__drawIndex=-1:s.__drawIndex=i,e(i),r=s),o.__dirty&&(s.__dirty=!0,s.incremental&&s.__drawIndex<0&&(s.__drawIndex=i))}e(i),this.eachBuiltinLayer(function(t,e){!t.__used&&t.getElementCount()>0&&(t.__dirty=!0,t.__startIndex=t.__endIndex=t.__drawIndex=0),t.__dirty&&t.__drawIndex<0&&(t.__drawIndex=t.__startIndex)})},clear:function(){return this.eachBuiltinLayer(this._clearLayer),this},_clearLayer:function(t){t.clear()},setBackgroundColor:function(t){this._backgroundColor=t},configLayer:function(t,e){if(e){var i=this._layerConfig;i[t]?n.merge(i[t],e,!0):i[t]=e;for(var r=0;r<this._zlevelList.length;r++){var a=this._zlevelList[r];if(a===t||a===t+.01){var o=this._layers[a];n.merge(o,i[t],!0)}}}},delLayer:function(t){var e=this._layers,i=this._zlevelList,r=e[t];r&&(r.dom.parentNode.removeChild(r.dom),delete e[t],i.splice(n.indexOf(i,t),1))},resize:function(t,e){if(this._domRoot.style){var i=this._domRoot;i.style.display="none";var r=this._opts;if(null!=t&&(r.width=t),null!=e&&(r.height=e),t=this._getSize(0),e=this._getSize(1),i.style.display="",this._width!=t||e!=this._height){for(var a in i.style.width=t+"px",i.style.height=e+"px",this._layers)this._layers.hasOwnProperty(a)&&this._layers[a].resize(t,e);n.each(this._progressiveLayers,function(i){i.resize(t,e)}),this.refresh(!0)}this._width=t,this._height=e}else{if(null==t||null==e)return;this._width=t,this._height=e,this.getLayer(314159).resize(t,e)}return this},clearLayer:function(t){var e=this._layers[t];e&&e.clear()},dispose:function(){this.root.innerHTML="",this.root=this.storage=this._domRoot=this._layers=null},getRenderedCanvas:function(t){if(t=t||{},this._singleCanvas&&!this._compositeManually)return this._layers[314159].dom;var e=new h("image",this,t.pixelRatio||this.dpr);if(e.initContext(),e.clear(!1,t.backgroundColor||this._backgroundColor),t.pixelRatio<=this.dpr){this.refresh();var i=e.dom.width,r=e.dom.height,n=e.ctx;this.eachLayer(function(t){t.__builtin__?n.drawImage(t.dom,0,0,i,r):t.renderToCanvas&&(e.ctx.save(),t.renderToCanvas(e.ctx),e.ctx.restore())})}else for(var a={},o=this.storage.getDisplayList(!0),s=0;s<o.length;s++){var l=o[s];this._doPaintEl(l,e,!0,a)}return e.dom},getWidth:function(){return this._width},getHeight:function(){return this._height},_getSize:function(t){var e=this._opts,i=["width","height"][t],r=["clientWidth","clientHeight"][t],n=["paddingLeft","paddingTop"][t],a=["paddingRight","paddingBottom"][t];if(null!=e[i]&&"auto"!==e[i])return parseFloat(e[i]);var o=this.root,s=document.defaultView.getComputedStyle(o);return(o[r]||f(s[i])||f(o.style[i]))-(f(s[n])||0)-(f(s[a])||0)|0},pathToImage:function(t,e){e=e||this.dpr;var i=document.createElement("canvas"),r=i.getContext("2d"),n=t.getBoundingRect(),a=t.style,o=a.shadowBlur*e,s=a.shadowOffsetX*e,h=a.shadowOffsetY*e,l=a.hasStroke()?a.lineWidth:0,c=Math.max(l/2,-s+o),f=Math.max(l/2,s+o),d=Math.max(l/2,-h+o),p=Math.max(l/2,h+o),v=n.width+c+f,g=n.height+d+p;i.width=v*e,i.height=g*e,r.scale(e,e),r.clearRect(0,0,v,g),r.dpr=e;var m={position:t.position,rotation:t.rotation,scale:t.scale};t.position=[c-n.x,d-n.y],t.rotation=0,t.scale=[1,1],t.updateTransform(),t&&t.brush(r);var _=new u({style:{x:0,y:0,image:i}});return null!=m.position&&(_.position=t.position=m.position),null!=m.rotation&&(_.rotation=t.rotation=m.rotation),null!=m.scale&&(_.scale=t.scale=m.scale),_}};var g=v;t.exports=g},386:function(t,e,i){var r=i(0),n=i(104).devicePixelRatio,a=i(194),o=i(196);function s(){return!1}function h(t,e,i){var n=r.createCanvas(),a=e.getWidth(),o=e.getHeight(),s=n.style;return s&&(s.position="absolute",s.left=0,s.top=0,s.width=a+"px",s.height=o+"px",n.setAttribute("data-zr-dom-id",t)),n.width=a*i,n.height=o*i,n}var l=function(t,e,i){var a;i=i||n,"string"==typeof t?a=h(t,e,i):r.isObject(t)&&(t=(a=t).id),this.id=t,this.dom=a;var o=a.style;o&&(a.onselectstart=s,o["-webkit-user-select"]="none",o["user-select"]="none",o["-webkit-touch-callout"]="none",o["-webkit-tap-highlight-color"]="rgba(0,0,0,0)",o.padding=0,o.margin=0,o["border-width"]=0),this.domBack=null,this.ctxBack=null,this.painter=e,this.config=null,this.clearColor=0,this.motionBlur=!1,this.lastFrameAlpha=.7,this.dpr=i};l.prototype={constructor:l,__dirty:!0,__used:!1,__drawIndex:0,__startIndex:0,__endIndex:0,incremental:!1,getElementCount:function(){return this.__endIndex-this.__startIndex},initContext:function(){this.ctx=this.dom.getContext("2d"),this.ctx.dpr=this.dpr},createBackBuffer:function(){var t=this.dpr;this.domBack=h("back-"+this.id,this.painter,t),this.ctxBack=this.domBack.getContext("2d"),1!=t&&this.ctxBack.scale(t,t)},resize:function(t,e){var i=this.dpr,r=this.dom,n=r.style,a=this.domBack;n&&(n.width=t+"px",n.height=e+"px"),r.width=t*i,r.height=e*i,a&&(a.width=t*i,a.height=e*i,1!=i&&this.ctxBack.scale(i,i))},clear:function(t,e){var i,r=this.dom,n=this.ctx,s=r.width,h=r.height,l=(e=e||this.clearColor,this.motionBlur&&!t),u=this.lastFrameAlpha,c=this.dpr;(l&&(this.domBack||this.createBackBuffer(),this.ctxBack.globalCompositeOperation="copy",this.ctxBack.drawImage(r,0,0,s/c,h/c)),n.clearRect(0,0,s,h),e&&"transparent"!==e)&&(e.colorStops?(i=e.__canvasGradient||a.getGradient(n,e,{x:0,y:0,width:s,height:h}),e.__canvasGradient=i):e.image&&(i=o.prototype.getCanvasPattern.call(e,n)),n.save(),n.fillStyle=i||e,n.fillRect(0,0,s,h),n.restore());if(l){var f=this.domBack;n.save(),n.globalAlpha=u,n.drawImage(f,0,0,s,h),n.restore()}}};var u=l;t.exports=u},387:function(t,e,i){var r=i(0),n=i(35).Dispatcher,a=i(197),o=i(192),s=function(t){t=t||{},this.stage=t.stage||{},this.onframe=t.onframe||function(){},this._clips=[],this._running=!1,this._time,this._pausedTime,this._pauseStart,this._paused=!1,n.call(this)};s.prototype={constructor:s,addClip:function(t){this._clips.push(t)},addAnimator:function(t){t.animation=this;for(var e=t.getClips(),i=0;i<e.length;i++)this.addClip(e[i])},removeClip:function(t){var e=r.indexOf(this._clips,t);e>=0&&this._clips.splice(e,1)},removeAnimator:function(t){for(var e=t.getClips(),i=0;i<e.length;i++)this.removeClip(e[i]);t.animation=null},_update:function(){for(var t=(new Date).getTime()-this._pausedTime,e=t-this._time,i=this._clips,r=i.length,n=[],a=[],o=0;o<r;o++){var s=i[o],h=s.step(t,e);h&&(n.push(h),a.push(s))}for(o=0;o<r;)i[o]._needsRemove?(i[o]=i[r-1],i.pop(),r--):o++;r=n.length;for(o=0;o<r;o++)a[o].fire(n[o]);this._time=t,this.onframe(e),this.trigger("frame",e),this.stage.update&&this.stage.update()},_startLoop:function(){var t=this;this._running=!0,a(function e(){t._running&&(a(e),!t._paused&&t._update())})},start:function(){this._time=(new Date).getTime(),this._pausedTime=0,this._startLoop()},stop:function(){this._running=!1},pause:function(){this._paused||(this._pauseStart=(new Date).getTime(),this._paused=!0)},resume:function(){this._paused&&(this._pausedTime+=(new Date).getTime()-this._pauseStart,this._paused=!1)},clear:function(){this._clips=[]},isFinished:function(){return!this._clips.length},animate:function(t,e){var i=new o(t,(e=e||{}).loop,e.getter,e.setter);return this.addAnimator(i),i}},r.mixin(s,n);var h=s;t.exports=h},388:function(t,e,i){var r=i(35),n=r.addEventListener,a=r.removeEventListener,o=r.normalizeEvent,s=i(0),h=i(51),l=i(19),u=i(389),c=["click","dblclick","mousewheel","mouseout","mouseup","mousedown","mousemove","contextmenu"],f=["touchstart","touchend","touchmove"],d={pointerdown:1,pointerup:1,pointermove:1,pointerout:1},p=s.map(c,function(t){var e=t.replace("mouse","pointer");return d[e]?e:t});function v(t){return"mousewheel"===t&&l.browser.firefox?"DOMMouseScroll":t}function g(t,e,i){var r=t._gestureMgr;"start"===i&&r.clear();var n=r.recognize(e,t.handler.findHover(e.zrX,e.zrY,null).target,t.dom);if("end"===i&&r.clear(),n){var a=n.type;e.gestureEvent=a,t.handler.dispatchToElement({target:n.target},a,n.event)}}function m(t){t._touching=!0,clearTimeout(t._touchTimer),t._touchTimer=setTimeout(function(){t._touching=!1},700)}var _={mousemove:function(t){t=o(this.dom,t),this.trigger("mousemove",t)},mouseout:function(t){var e=(t=o(this.dom,t)).toElement||t.relatedTarget;if(e!=this.dom)for(;e&&9!=e.nodeType;){if(e===this.dom)return;e=e.parentNode}this.trigger("mouseout",t)},touchstart:function(t){(t=o(this.dom,t)).zrByTouch=!0,this._lastTouchMoment=new Date,g(this,t,"start"),_.mousemove.call(this,t),_.mousedown.call(this,t),m(this)},touchmove:function(t){(t=o(this.dom,t)).zrByTouch=!0,g(this,t,"change"),_.mousemove.call(this,t),m(this)},touchend:function(t){(t=o(this.dom,t)).zrByTouch=!0,g(this,t,"end"),_.mouseup.call(this,t),+new Date-this._lastTouchMoment<300&&_.click.call(this,t),m(this)},pointerdown:function(t){_.mousedown.call(this,t)},pointermove:function(t){y(t)||_.mousemove.call(this,t)},pointerup:function(t){_.mouseup.call(this,t)},pointerout:function(t){y(t)||_.mouseout.call(this,t)}};function y(t){var e=t.pointerType;return"pen"===e||"touch"===e}function x(t){var e;function i(e,i){s.each(e,function(e){n(t,v(e),i._handlers[e])},i)}h.call(this),this.dom=t,this._touching=!1,this._touchTimer,this._gestureMgr=new u,this._handlers={},e=this,s.each(f,function(t){e._handlers[t]=s.bind(_[t],e)}),s.each(p,function(t){e._handlers[t]=s.bind(_[t],e)}),s.each(c,function(t){e._handlers[t]=function(t,e){return function(){if(!e._touching)return t.apply(e,arguments)}}(_[t],e)}),l.pointerEventsSupported?i(p,this):(l.touchEventsSupported&&i(f,this),i(c,this))}s.each(["click","mousedown","mouseup","mousewheel","dblclick","contextmenu"],function(t){_[t]=function(e){e=o(this.dom,e),this.trigger(t,e)}});var w=x.prototype;w.dispose=function(){for(var t=c.concat(f),e=0;e<t.length;e++){var i=t[e];a(this.dom,v(i),this._handlers[i])}},w.setCursor=function(t){this.dom.style&&(this.dom.style.cursor=t||"default")},s.mixin(x,h);var b=x;t.exports=b},389:function(t,e,i){var r=i(35),n=function(){this._track=[]};function a(t){var e=t[1][0]-t[0][0],i=t[1][1]-t[0][1];return Math.sqrt(e*e+i*i)}n.prototype={constructor:n,recognize:function(t,e,i){return this._doTrack(t,e,i),this._recognize(t)},clear:function(){return this._track.length=0,this},_doTrack:function(t,e,i){var n=t.touches;if(n){for(var a={points:[],touches:[],target:e,event:t},o=0,s=n.length;o<s;o++){var h=n[o],l=r.clientToLocal(i,h,{});a.points.push([l.zrX,l.zrY]),a.touches.push(h)}this._track.push(a)}},_recognize:function(t){for(var e in o)if(o.hasOwnProperty(e)){var i=o[e](this._track,t);if(i)return i}}};var o={pinch:function(t,e){var i=t.length;if(i){var r,n=(t[i-1]||{}).points,o=(t[i-2]||{}).points||n;if(o&&o.length>1&&n&&n.length>1){var s=a(n)/a(o);!isFinite(s)&&(s=1),e.pinchScale=s;var h=[((r=n)[0][0]+r[1][0])/2,(r[0][1]+r[1][1])/2];return e.pinchX=h[0],e.pinchY=h[1],{type:"pinch",target:t[0].target,event:e}}}}},s=n;t.exports=s},393:function(t,e,i){var r=i(18),n=i(68),a=i(397),o=["m","M","l","L","v","V","h","H","z","Z","c","C","q","Q","t","T","s","S","a","A"],s=Math.sqrt,h=Math.sin,l=Math.cos,u=Math.PI,c=function(t){return Math.sqrt(t[0]*t[0]+t[1]*t[1])},f=function(t,e){return(t[0]*e[0]+t[1]*e[1])/(c(t)*c(e))},d=function(t,e){return(t[0]*e[1]<t[1]*e[0]?-1:1)*Math.acos(f(t,e))};function p(t,e,i,r,n,a,o,c,p,v,g){var m=p*(u/180),_=l(m)*(t-i)/2+h(m)*(e-r)/2,y=-1*h(m)*(t-i)/2+l(m)*(e-r)/2,x=_*_/(o*o)+y*y/(c*c);x>1&&(o*=s(x),c*=s(x));var w=(n===a?-1:1)*s((o*o*(c*c)-o*o*(y*y)-c*c*(_*_))/(o*o*(y*y)+c*c*(_*_)))||0,b=w*o*y/c,k=w*-c*_/o,T=(t+i)/2+l(m)*b-h(m)*k,S=(e+r)/2+h(m)*b+l(m)*k,M=d([1,0],[(_-b)/o,(y-k)/c]),P=[(_-b)/o,(y-k)/c],C=[(-1*_-b)/o,(-1*y-k)/c],L=d(P,C);f(P,C)<=-1&&(L=u),f(P,C)>=1&&(L=0),0===a&&L>0&&(L-=2*u),1===a&&L<0&&(L+=2*u),g.addData(v,T,S,o,c,M,L,m,a)}function v(t,e){var i=function(t){if(!t)return[];var e,i=t.replace(/-/g," -").replace(/  /g," ").replace(/ /g,",").replace(/,,/g,",");for(e=0;e<o.length;e++)i=i.replace(new RegExp(o[e],"g"),"|"+o[e]);var r,a=i.split("|"),s=0,h=0,l=new n,u=n.CMD;for(e=1;e<a.length;e++){var c,f=a[e],d=f.charAt(0),v=0,g=f.slice(1).replace(/e,-/g,"e-").split(",");g.length>0&&""===g[0]&&g.shift();for(var m=0;m<g.length;m++)g[m]=parseFloat(g[m]);for(;v<g.length&&!isNaN(g[v])&&!isNaN(g[0]);){var _,y,x,w,b,k,T,S=s,M=h;switch(d){case"l":s+=g[v++],h+=g[v++],c=u.L,l.addData(c,s,h);break;case"L":s=g[v++],h=g[v++],c=u.L,l.addData(c,s,h);break;case"m":s+=g[v++],h+=g[v++],c=u.M,l.addData(c,s,h),d="l";break;case"M":s=g[v++],h=g[v++],c=u.M,l.addData(c,s,h),d="L";break;case"h":s+=g[v++],c=u.L,l.addData(c,s,h);break;case"H":s=g[v++],c=u.L,l.addData(c,s,h);break;case"v":h+=g[v++],c=u.L,l.addData(c,s,h);break;case"V":h=g[v++],c=u.L,l.addData(c,s,h);break;case"C":c=u.C,l.addData(c,g[v++],g[v++],g[v++],g[v++],g[v++],g[v++]),s=g[v-2],h=g[v-1];break;case"c":c=u.C,l.addData(c,g[v++]+s,g[v++]+h,g[v++]+s,g[v++]+h,g[v++]+s,g[v++]+h),s+=g[v-2],h+=g[v-1];break;case"S":_=s,y=h;var P=l.len(),C=l.data;r===u.C&&(_+=s-C[P-4],y+=h-C[P-3]),c=u.C,S=g[v++],M=g[v++],s=g[v++],h=g[v++],l.addData(c,_,y,S,M,s,h);break;case"s":_=s,y=h,P=l.len(),C=l.data,r===u.C&&(_+=s-C[P-4],y+=h-C[P-3]),c=u.C,S=s+g[v++],M=h+g[v++],s+=g[v++],h+=g[v++],l.addData(c,_,y,S,M,s,h);break;case"Q":S=g[v++],M=g[v++],s=g[v++],h=g[v++],c=u.Q,l.addData(c,S,M,s,h);break;case"q":S=g[v++]+s,M=g[v++]+h,s+=g[v++],h+=g[v++],c=u.Q,l.addData(c,S,M,s,h);break;case"T":_=s,y=h,P=l.len(),C=l.data,r===u.Q&&(_+=s-C[P-4],y+=h-C[P-3]),s=g[v++],h=g[v++],c=u.Q,l.addData(c,_,y,s,h);break;case"t":_=s,y=h,P=l.len(),C=l.data,r===u.Q&&(_+=s-C[P-4],y+=h-C[P-3]),s+=g[v++],h+=g[v++],c=u.Q,l.addData(c,_,y,s,h);break;case"A":x=g[v++],w=g[v++],b=g[v++],k=g[v++],T=g[v++],p(S=s,M=h,s=g[v++],h=g[v++],k,T,x,w,b,c=u.A,l);break;case"a":x=g[v++],w=g[v++],b=g[v++],k=g[v++],T=g[v++],p(S=s,M=h,s+=g[v++],h+=g[v++],k,T,x,w,b,c=u.A,l)}}"z"!==d&&"Z"!==d||(c=u.Z,l.addData(c)),r=c}return l.toStatic(),l}(t);return(e=e||{}).buildPath=function(t){if(t.setData){t.setData(i.data),(e=t.getContext())&&t.rebuildPath(e)}else{var e=t;i.rebuildPath(e)}},e.applyTransform=function(t){a(i,t),this.dirty(!0)},e}e.createFromString=function(t,e){return new r(v(t,e))},e.extendFromString=function(t,e){return r.extend(v(t,e))},e.mergePath=function(t,e){for(var i=[],n=t.length,a=0;a<n;a++){var o=t[a];o.path||o.createPathProxy(),o.__dirtyPath&&o.buildPath(o.path,o.shape,!0),i.push(o.path)}var s=new r(e);return s.createPathProxy(),s.buildPath=function(t){t.appendPath(i);var e=t.getContext();e&&t.rebuildPath(e)},s}},394:function(t,e,i){var r=i(68),n=i(201),a=i(395),o=i(202),s=i(396),h=i(203).normalizeRadian,l=i(42),u=i(204),c=r.CMD,f=2*Math.PI,d=1e-4;var p=[-1,-1,-1],v=[-1,-1];function g(t,e,i,r,n,a,o,s,h,u){if(u>e&&u>r&&u>a&&u>s||u<e&&u<r&&u<a&&u<s)return 0;var c,f=l.cubicRootAt(e,r,a,s,u,p);if(0===f)return 0;for(var d,g,m=0,_=-1,y=0;y<f;y++){var x=p[y],w=0===x||1===x?.5:1;l.cubicAt(t,i,n,o,x)<h||(_<0&&(_=l.cubicExtrema(e,r,a,s,v),v[1]<v[0]&&_>1&&(c=void 0,c=v[0],v[0]=v[1],v[1]=c),d=l.cubicAt(e,r,a,s,v[0]),_>1&&(g=l.cubicAt(e,r,a,s,v[1]))),2==_?x<v[0]?m+=d<e?w:-w:x<v[1]?m+=g<d?w:-w:m+=s<g?w:-w:x<v[0]?m+=d<e?w:-w:m+=s<d?w:-w)}return m}function m(t,e,i,r,n,a,o,s){if(s>e&&s>r&&s>a||s<e&&s<r&&s<a)return 0;var h=l.quadraticRootAt(e,r,a,s,p);if(0===h)return 0;var u=l.quadraticExtremum(e,r,a);if(u>=0&&u<=1){for(var c=0,f=l.quadraticAt(e,r,a,u),d=0;d<h;d++){var v=0===p[d]||1===p[d]?.5:1;l.quadraticAt(t,i,n,p[d])<o||(p[d]<u?c+=f<e?v:-v:c+=a<f?v:-v)}return c}v=0===p[0]||1===p[0]?.5:1;return l.quadraticAt(t,i,n,p[0])<o?0:a<e?v:-v}function _(t,e,i,r,n,a,o,s){if((s-=e)>i||s<-i)return 0;var l=Math.sqrt(i*i-s*s);p[0]=-l,p[1]=l;var u=Math.abs(r-n);if(u<1e-4)return 0;if(u%f<1e-4){r=0,n=f;var c=a?1:-1;return o>=p[0]+t&&o<=p[1]+t?c:0}if(a){l=r;r=h(n),n=h(l)}else r=h(r),n=h(n);r>n&&(n+=f);for(var d=0,v=0;v<2;v++){var g=p[v];if(g+t>o){var m=Math.atan2(s,g);c=a?1:-1;m<0&&(m=f+m),(m>=r&&m<=n||m+f>=r&&m+f<=n)&&(m>Math.PI/2&&m<1.5*Math.PI&&(c=-c),d+=c)}}return d}function y(t,e,i,r,h){for(var l,f,p=0,v=0,y=0,x=0,w=0,b=0;b<t.length;){var k=t[b++];switch(k===c.M&&b>1&&(i||(p+=u(v,y,x,w,r,h))),1==b&&(x=v=t[b],w=y=t[b+1]),k){case c.M:v=x=t[b++],y=w=t[b++];break;case c.L:if(i){if(n.containStroke(v,y,t[b],t[b+1],e,r,h))return!0}else p+=u(v,y,t[b],t[b+1],r,h)||0;v=t[b++],y=t[b++];break;case c.C:if(i){if(a.containStroke(v,y,t[b++],t[b++],t[b++],t[b++],t[b],t[b+1],e,r,h))return!0}else p+=g(v,y,t[b++],t[b++],t[b++],t[b++],t[b],t[b+1],r,h)||0;v=t[b++],y=t[b++];break;case c.Q:if(i){if(o.containStroke(v,y,t[b++],t[b++],t[b],t[b+1],e,r,h))return!0}else p+=m(v,y,t[b++],t[b++],t[b],t[b+1],r,h)||0;v=t[b++],y=t[b++];break;case c.A:var T=t[b++],S=t[b++],M=t[b++],P=t[b++],C=t[b++],L=t[b++],A=(t[b++],1-t[b++]),D=Math.cos(C)*M+T,z=Math.sin(C)*P+S;b>1?p+=u(v,y,D,z,r,h):(x=D,w=z);var R=(r-T)*P/M+T;if(i){if(s.containStroke(T,S,P,C,C+L,A,e,R,h))return!0}else p+=_(T,S,P,C,C+L,A,R,h);v=Math.cos(C+L)*M+T,y=Math.sin(C+L)*P+S;break;case c.R:x=v=t[b++],w=y=t[b++];D=x+t[b++],z=w+t[b++];if(i){if(n.containStroke(x,w,D,w,e,r,h)||n.containStroke(D,w,D,z,e,r,h)||n.containStroke(D,z,x,z,e,r,h)||n.containStroke(x,z,x,w,e,r,h))return!0}else p+=u(D,w,D,z,r,h),p+=u(x,z,x,w,r,h);break;case c.Z:if(i){if(n.containStroke(v,y,x,w,e,r,h))return!0}else p+=u(v,y,x,w,r,h);v=x,y=w}}return i||(l=y,f=w,Math.abs(l-f)<d)||(p+=u(v,y,x,w,r,h)||0),0!==p}e.contain=function(t,e,i){return y(t,0,!1,e,i)},e.containStroke=function(t,e,i,r){return y(t,e,!0,i,r)}},395:function(t,e,i){var r=i(42);e.containStroke=function(t,e,i,n,a,o,s,h,l,u,c){if(0===l)return!1;var f=l;return!(c>e+f&&c>n+f&&c>o+f&&c>h+f||c<e-f&&c<n-f&&c<o-f&&c<h-f||u>t+f&&u>i+f&&u>a+f&&u>s+f||u<t-f&&u<i-f&&u<a-f&&u<s-f)&&r.cubicProjectPoint(t,e,i,n,a,o,s,h,u,c,null)<=f/2}},396:function(t,e,i){var r=i(203).normalizeRadian,n=2*Math.PI;e.containStroke=function(t,e,i,a,o,s,h,l,u){if(0===h)return!1;var c=h;l-=t,u-=e;var f=Math.sqrt(l*l+u*u);if(f-c>i||f+c<i)return!1;if(Math.abs(a-o)%n<1e-4)return!0;if(s){var d=a;a=r(o),o=r(d)}else a=r(a),o=r(o);a>o&&(o+=n);var p=Math.atan2(u,l);return p<0&&(p+=n),p>=a&&p<=o||p+n>=a&&p+n<=o}},397:function(t,e,i){var r=i(68),n=i(15).applyTransform,a=r.CMD,o=[[],[],[]],s=Math.sqrt,h=Math.atan2;t.exports=function(t,e){var i,r,l,u,c,f=t.data,d=a.M,p=a.C,v=a.L,g=a.R,m=a.A,_=a.Q;for(l=0,u=0;l<f.length;){switch(i=f[l++],u=l,r=0,i){case d:case v:r=1;break;case p:r=3;break;case _:r=2;break;case m:var y=e[4],x=e[5],w=s(e[0]*e[0]+e[1]*e[1]),b=s(e[2]*e[2]+e[3]*e[3]),k=h(-e[1]/b,e[0]/w);f[l]*=w,f[l++]+=y,f[l]*=b,f[l++]+=x,f[l++]*=w,f[l++]*=b,f[l++]+=k,f[l++]+=k,u=l+=2;break;case g:T[0]=f[l++],T[1]=f[l++],n(T,T,e),f[u++]=T[0],f[u++]=T[1],T[0]+=f[l++],T[1]+=f[l++],n(T,T,e),f[u++]=T[0],f[u++]=T[1]}for(c=0;c<r;c++){var T;(T=o[c])[0]=f[l++],T[1]=f[l++],n(T,T,e),f[u++]=T[0],f[u++]=T[1]}}}},398:function(t,e,i){var r=i(18).extend({type:"circle",shape:{cx:0,cy:0,r:0},buildPath:function(t,e,i){i&&t.moveTo(e.cx+e.r,e.cy),t.arc(e.cx,e.cy,e.r,0,2*Math.PI,!0)}});t.exports=r},399:function(t,e,i){var r=i(18),n=i(205),a=r.extend({type:"sector",shape:{cx:0,cy:0,r0:0,r:0,startAngle:0,endAngle:2*Math.PI,clockwise:!0},brush:n(r.prototype.brush),buildPath:function(t,e){var i=e.cx,r=e.cy,n=Math.max(e.r0||0,0),a=Math.max(e.r,0),o=e.startAngle,s=e.endAngle,h=e.clockwise,l=Math.cos(o),u=Math.sin(o);t.moveTo(l*n+i,u*n+r),t.lineTo(l*a+i,u*a+r),t.arc(i,r,a,o,s,!h),t.lineTo(Math.cos(s)*n+i,Math.sin(s)*n+r),0!==n&&t.arc(i,r,n,s,o,h),t.closePath()}});t.exports=a},400:function(t,e,i){var r=i(18).extend({type:"ring",shape:{cx:0,cy:0,r:0,r0:0},buildPath:function(t,e){var i=e.cx,r=e.cy,n=2*Math.PI;t.moveTo(i+e.r,r),t.arc(i,r,e.r,0,n,!1),t.moveTo(i+e.r0,r),t.arc(i,r,e.r0,0,n,!0)}});t.exports=r},401:function(t,e,i){var r=i(18),n=i(206),a=r.extend({type:"polygon",shape:{points:null,smooth:!1,smoothConstraint:null},buildPath:function(t,e){n.buildPath(t,e,!0)}});t.exports=a},402:function(t,e,i){var r=i(15).distance;function n(t,e,i,r,n,a,o){var s=.5*(i-t),h=.5*(r-e);return(2*(e-i)+s+h)*o+(-3*(e-i)-2*s-h)*a+s*n+e}t.exports=function(t,e){for(var i=t.length,a=[],o=0,s=1;s<i;s++)o+=r(t[s-1],t[s]);var h=o/2;for(h=h<i?i:h,s=0;s<h;s++){var l,u,c,f=s/(h-1)*(e?i:i-1),d=Math.floor(f),p=f-d,v=t[d%i];e?(l=t[(d-1+i)%i],u=t[(d+1)%i],c=t[(d+2)%i]):(l=t[0===d?d:d-1],u=t[d>i-2?i-1:d+1],c=t[d>i-3?i-1:d+2]);var g=p*p,m=p*g;a.push([n(l[0],v[0],u[0],c[0],p,g,m),n(l[1],v[1],u[1],c[1],p,g,m)])}return a}},403:function(t,e,i){var r=i(15),n=r.min,a=r.max,o=r.scale,s=r.distance,h=r.add,l=r.clone,u=r.sub;t.exports=function(t,e,i,r){var c,f,d,p,v=[],g=[],m=[],_=[];if(r){d=[1/0,1/0],p=[-1/0,-1/0];for(var y=0,x=t.length;y<x;y++)n(d,d,t[y]),a(p,p,t[y]);n(d,d,r[0]),a(p,p,r[1])}for(y=0,x=t.length;y<x;y++){var w=t[y];if(i)c=t[y?y-1:x-1],f=t[(y+1)%x];else{if(0===y||y===x-1){v.push(l(t[y]));continue}c=t[y-1],f=t[y+1]}u(g,f,c),o(g,g,e);var b=s(w,c),k=s(w,f),T=b+k;0!==T&&(b/=T,k/=T),o(m,g,-b),o(_,g,k);var S=h([],w,m),M=h([],w,_);r&&(a(S,S,d),n(S,S,p),a(M,M,d),n(M,M,p)),v.push(S),v.push(M)}return i&&v.push(v.shift()),v}},404:function(t,e,i){var r=i(18),n=i(206),a=r.extend({type:"polyline",shape:{points:null,smooth:!1,smoothConstraint:null},style:{stroke:"#000",fill:null},buildPath:function(t,e){n.buildPath(t,e,!1)}});t.exports=a},405:function(t,e,i){var r=i(18),n=i(199),a=r.extend({type:"rect",shape:{r:0,x:0,y:0,width:0,height:0},buildPath:function(t,e){var i=e.x,r=e.y,a=e.width,o=e.height;e.r?n.buildPath(t,e):t.rect(i,r,a,o),t.closePath()}});t.exports=a},406:function(t,e,i){var r=i(18).extend({type:"line",shape:{x1:0,y1:0,x2:0,y2:0,percent:1},style:{stroke:"#000",fill:null},buildPath:function(t,e){var i=e.x1,r=e.y1,n=e.x2,a=e.y2,o=e.percent;0!==o&&(t.moveTo(i,r),o<1&&(n=i*(1-o)+n*o,a=r*(1-o)+a*o),t.lineTo(n,a))},pointAt:function(t){var e=this.shape;return[e.x1*(1-t)+e.x2*t,e.y1*(1-t)+e.y2*t]}});t.exports=r},407:function(t,e,i){var r=i(18),n=i(15),a=i(42),o=a.quadraticSubdivide,s=a.cubicSubdivide,h=a.quadraticAt,l=a.cubicAt,u=a.quadraticDerivativeAt,c=a.cubicDerivativeAt,f=[];function d(t,e,i){var r=t.cpx2,n=t.cpy2;return null===r||null===n?[(i?c:l)(t.x1,t.cpx1,t.cpx2,t.x2,e),(i?c:l)(t.y1,t.cpy1,t.cpy2,t.y2,e)]:[(i?u:h)(t.x1,t.cpx1,t.x2,e),(i?u:h)(t.y1,t.cpy1,t.y2,e)]}var p=r.extend({type:"bezier-curve",shape:{x1:0,y1:0,x2:0,y2:0,cpx1:0,cpy1:0,percent:1},style:{stroke:"#000",fill:null},buildPath:function(t,e){var i=e.x1,r=e.y1,n=e.x2,a=e.y2,h=e.cpx1,l=e.cpy1,u=e.cpx2,c=e.cpy2,d=e.percent;0!==d&&(t.moveTo(i,r),null==u||null==c?(d<1&&(o(i,h,n,d,f),h=f[1],n=f[2],o(r,l,a,d,f),l=f[1],a=f[2]),t.quadraticCurveTo(h,l,n,a)):(d<1&&(s(i,h,u,n,d,f),h=f[1],u=f[2],n=f[3],s(r,l,c,a,d,f),l=f[1],c=f[2],a=f[3]),t.bezierCurveTo(h,l,u,c,n,a)))},pointAt:function(t){return d(this.shape,t,!1)},tangentAt:function(t){var e=d(this.shape,t,!0);return n.normalize(e,e)}});t.exports=p},408:function(t,e,i){var r=i(18).extend({type:"arc",shape:{cx:0,cy:0,r:0,startAngle:0,endAngle:2*Math.PI,clockwise:!0},style:{stroke:"#000",fill:null},buildPath:function(t,e){var i=e.cx,r=e.cy,n=Math.max(e.r,0),a=e.startAngle,o=e.endAngle,s=e.clockwise,h=Math.cos(a),l=Math.sin(a);t.moveTo(h*n+i,l*n+r),t.arc(i,r,n,a,o,!s)}});t.exports=r},409:function(t,e,i){var r=i(18),n=r.extend({type:"compound",shape:{paths:null},_updatePathDirty:function(){for(var t=this.__dirtyPath,e=this.shape.paths,i=0;i<e.length;i++)t=t||e[i].__dirtyPath;this.__dirtyPath=t,this.__dirty=this.__dirty||t},beforeBrush:function(){this._updatePathDirty();for(var t=this.shape.paths||[],e=this.getGlobalScale(),i=0;i<t.length;i++)t[i].path||t[i].createPathProxy(),t[i].path.setScale(e[0],e[1])},buildPath:function(t,e){for(var i=e.paths||[],r=0;r<i.length;r++)i[r].buildPath(t,i[r].shape,!0)},afterBrush:function(){for(var t=this.shape.paths||[],e=0;e<t.length;e++)t[e].__dirtyPath=!1},getBoundingRect:function(){return this._updatePathDirty(),r.prototype.getBoundingRect.call(this)}});t.exports=n},410:function(t,e,i){var r=i(0),n=i(106),a=function(t,e,i,r,a){this.x=null==t?.5:t,this.y=null==e?.5:e,this.r=null==i?.5:i,this.type="radial",this.global=a||!1,n.call(this,r)};a.prototype={constructor:a},r.inherits(a,n);var o=a;t.exports=o},42:function(t,e,i){var r=i(15),n=r.create,a=r.distSquare,o=Math.pow,s=Math.sqrt,h=1e-8,l=1e-4,u=s(3),c=1/3,f=n(),d=n(),p=n();function v(t){return t>-h&&t<h}function g(t){return t>h||t<-h}function m(t,e,i,r,n){var a=1-n;return a*a*(a*t+3*n*e)+n*n*(n*r+3*a*i)}function _(t,e,i,r){var n=1-r;return n*(n*t+2*r*e)+r*r*i}e.cubicAt=m,e.cubicDerivativeAt=function(t,e,i,r,n){var a=1-n;return 3*(((e-t)*a+2*(i-e)*n)*a+(r-i)*n*n)},e.cubicRootAt=function(t,e,i,r,n,a){var h=r+3*(e-i)-t,l=3*(i-2*e+t),f=3*(e-t),d=t-n,p=l*l-3*h*f,g=l*f-9*h*d,m=f*f-3*l*d,_=0;if(v(p)&&v(g))v(l)?a[0]=0:(L=-f/l)>=0&&L<=1&&(a[_++]=L);else{var y=g*g-4*p*m;if(v(y)){var x=g/p,w=-x/2;(L=-l/h+x)>=0&&L<=1&&(a[_++]=L),w>=0&&w<=1&&(a[_++]=w)}else if(y>0){var b=s(y),k=p*l+1.5*h*(-g+b),T=p*l+1.5*h*(-g-b);(L=(-l-((k=k<0?-o(-k,c):o(k,c))+(T=T<0?-o(-T,c):o(T,c))))/(3*h))>=0&&L<=1&&(a[_++]=L)}else{var S=(2*p*l-3*h*g)/(2*s(p*p*p)),M=Math.acos(S)/3,P=s(p),C=Math.cos(M),L=(-l-2*P*C)/(3*h),A=(w=(-l+P*(C+u*Math.sin(M)))/(3*h),(-l+P*(C-u*Math.sin(M)))/(3*h));L>=0&&L<=1&&(a[_++]=L),w>=0&&w<=1&&(a[_++]=w),A>=0&&A<=1&&(a[_++]=A)}}return _},e.cubicExtrema=function(t,e,i,r,n){var a=6*i-12*e+6*t,o=9*e+3*r-3*t-9*i,h=3*e-3*t,l=0;if(v(o))g(a)&&(c=-h/a)>=0&&c<=1&&(n[l++]=c);else{var u=a*a-4*o*h;if(v(u))n[0]=-a/(2*o);else if(u>0){var c,f=s(u),d=(-a-f)/(2*o);(c=(-a+f)/(2*o))>=0&&c<=1&&(n[l++]=c),d>=0&&d<=1&&(n[l++]=d)}}return l},e.cubicSubdivide=function(t,e,i,r,n,a){var o=(e-t)*n+t,s=(i-e)*n+e,h=(r-i)*n+i,l=(s-o)*n+o,u=(h-s)*n+s,c=(u-l)*n+l;a[0]=t,a[1]=o,a[2]=l,a[3]=c,a[4]=c,a[5]=u,a[6]=h,a[7]=r},e.cubicProjectPoint=function(t,e,i,r,n,o,h,u,c,v,g){var _,y,x,w,b,k=.005,T=1/0;f[0]=c,f[1]=v;for(var S=0;S<1;S+=.05)d[0]=m(t,i,n,h,S),d[1]=m(e,r,o,u,S),(w=a(f,d))<T&&(_=S,T=w);T=1/0;for(var M=0;M<32&&!(k<l);M++)y=_-k,x=_+k,d[0]=m(t,i,n,h,y),d[1]=m(e,r,o,u,y),w=a(d,f),y>=0&&w<T?(_=y,T=w):(p[0]=m(t,i,n,h,x),p[1]=m(e,r,o,u,x),b=a(p,f),x<=1&&b<T?(_=x,T=b):k*=.5);return g&&(g[0]=m(t,i,n,h,_),g[1]=m(e,r,o,u,_)),s(T)},e.quadraticAt=_,e.quadraticDerivativeAt=function(t,e,i,r){return 2*((1-r)*(e-t)+r*(i-e))},e.quadraticRootAt=function(t,e,i,r,n){var a=t-2*e+i,o=2*(e-t),h=t-r,l=0;if(v(a))g(o)&&(c=-h/o)>=0&&c<=1&&(n[l++]=c);else{var u=o*o-4*a*h;if(v(u))(c=-o/(2*a))>=0&&c<=1&&(n[l++]=c);else if(u>0){var c,f=s(u),d=(-o-f)/(2*a);(c=(-o+f)/(2*a))>=0&&c<=1&&(n[l++]=c),d>=0&&d<=1&&(n[l++]=d)}}return l},e.quadraticExtremum=function(t,e,i){var r=t+i-2*e;return 0===r?.5:(t-e)/r},e.quadraticSubdivide=function(t,e,i,r,n){var a=(e-t)*r+t,o=(i-e)*r+e,s=(o-a)*r+a;n[0]=t,n[1]=a,n[2]=s,n[3]=s,n[4]=o,n[5]=i},e.quadraticProjectPoint=function(t,e,i,r,n,o,h,u,c){var v,g=.005,m=1/0;f[0]=h,f[1]=u;for(var y=0;y<1;y+=.05)d[0]=_(t,i,n,y),d[1]=_(e,r,o,y),(k=a(f,d))<m&&(v=y,m=k);m=1/0;for(var x=0;x<32&&!(g<l);x++){var w=v-g,b=v+g;d[0]=_(t,i,n,w),d[1]=_(e,r,o,w);var k=a(d,f);if(w>=0&&k<m)v=w,m=k;else{p[0]=_(t,i,n,b),p[1]=_(e,r,o,b);var T=a(p,f);b<=1&&T<m?(v=b,m=T):g*=.5}}return c&&(c[0]=_(t,i,n,v),c[1]=_(e,r,o,v)),s(m)}},51:function(t,e){var i=Array.prototype.slice,r=function(){this._$handlers={}};r.prototype={constructor:r,one:function(t,e,i){var r=this._$handlers;if(!e||!t)return this;r[t]||(r[t]=[]);for(var n=0;n<r[t].length;n++)if(r[t][n].h===e)return this;return r[t].push({h:e,one:!0,ctx:i||this}),this},on:function(t,e,i){var r=this._$handlers;if(!e||!t)return this;r[t]||(r[t]=[]);for(var n=0;n<r[t].length;n++)if(r[t][n].h===e)return this;return r[t].push({h:e,one:!1,ctx:i||this}),this},isSilent:function(t){var e=this._$handlers;return e[t]&&e[t].length},off:function(t,e){var i=this._$handlers;if(!t)return this._$handlers={},this;if(e){if(i[t]){for(var r=[],n=0,a=i[t].length;n<a;n++)i[t][n].h!=e&&r.push(i[t][n]);i[t]=r}i[t]&&0===i[t].length&&delete i[t]}else delete i[t];return this},trigger:function(t){if(this._$handlers[t]){var e=arguments,r=e.length;r>3&&(e=i.call(e,1));for(var n=this._$handlers[t],a=n.length,o=0;o<a;){switch(r){case 1:n[o].h.call(n[o].ctx);break;case 2:n[o].h.call(n[o].ctx,e[1]);break;case 3:n[o].h.call(n[o].ctx,e[1],e[2]);break;default:n[o].h.apply(n[o].ctx,e)}n[o].one?(n.splice(o,1),a--):o++}}return this},triggerWithContext:function(t){if(this._$handlers[t]){var e=arguments,r=e.length;r>4&&(e=i.call(e,1,e.length-1));for(var n=e[e.length-1],a=this._$handlers[t],o=a.length,s=0;s<o;){switch(r){case 1:a[s].h.call(n);break;case 2:a[s].h.call(n,e[1]);break;case 3:a[s].h.call(n,e[1],e[2]);break;default:a[s].h.apply(n,e)}a[s].one?(a.splice(s,1),o--):s++}}return this}};var n=r;t.exports=n},668:function(t,e,i){i(669),(0,i(102).registerPainter)("vml",i(670))},669:function(t,e,i){var r=i(19),n=i(15).applyTransform,a=i(17),o=i(34),s=i(33),h=i(105),l=i(198),u=i(78),c=i(77),f=i(79),d=i(18),p=i(68),v=i(106),g=i(267),m=p.CMD,_=Math.round,y=Math.sqrt,x=Math.abs,w=Math.cos,b=Math.sin,k=Math.max;if(!r.canvasSupported){var T=21600,S=T/2,M=function(t){t.style.cssText="position:absolute;left:0;top:0;width:1px;height:1px;",t.coordsize=T+","+T,t.coordorigin="0,0"},P=function(t,e,i){return"rgb("+[t,e,i].join(",")+")"},C=function(t,e){e&&t&&e.parentNode!==t&&t.appendChild(e)},L=function(t,e){e&&t&&e.parentNode===t&&t.removeChild(e)},A=function(t,e,i){return 1e5*(parseFloat(t)||0)+1e3*(parseFloat(e)||0)+i},D=function(t,e){return"string"==typeof t?t.lastIndexOf("%")>=0?parseFloat(t)/100*e:parseFloat(t):t},z=function(t,e,i){var r=o.parse(e);i=+i,isNaN(i)&&(i=1),r&&(t.color=P(r[0],r[1],r[2]),t.opacity=i*r[3])},R=function(t,e,i,r){var a="fill"==e,s=t.getElementsByTagName(e)[0];null!=i[e]&&"none"!==i[e]&&(a||!a&&i.lineWidth)?(t[a?"filled":"stroked"]="true",i[e]instanceof v&&L(t,s),s||(s=g.createNode(e)),a?function(t,e,i){var r,a,s=e.fill;if(null!=s)if(s instanceof v){var h,l=0,u=[0,0],c=0,f=1,d=i.getBoundingRect(),p=d.width,g=d.height;if("linear"===s.type){h="gradient";var m=i.transform,_=[s.x*p,s.y*g],y=[s.x2*p,s.y2*g];m&&(n(_,_,m),n(y,y,m));var x=y[0]-_[0],w=y[1]-_[1];(l=180*Math.atan2(x,w)/Math.PI)<0&&(l+=360),l<1e-6&&(l=0)}else{h="gradientradial",_=[s.x*p,s.y*g],m=i.transform;var b=i.scale,S=p,M=g;u=[(_[0]-d.x)/S,(_[1]-d.y)/M],m&&n(_,_,m),S/=b[0]*T,M/=b[1]*T;var C=k(S,M);c=0/C,f=2*s.r/C-c}var L=s.colorStops.slice();L.sort(function(t,e){return t.offset-e.offset});for(var A=L.length,D=[],R=[],B=0;B<A;B++){var I=L[B],E=(r=I.color,a=void 0,a=o.parse(r),[P(a[0],a[1],a[2]),a[3]]);R.push(I.offset*f+c+" "+E[0]),0!==B&&B!==A-1||D.push(E)}if(A>=2){var O=D[0][0],F=D[1][0],H=D[0][1]*e.opacity,N=D[1][1]*e.opacity;t.type=h,t.method="none",t.focus="100%",t.angle=l,t.color=O,t.color2=F,t.colors=R.join(","),t.opacity=N,t.opacity2=H}"radial"===h&&(t.focusposition=u.join(","))}else z(t,s,e.opacity)}(s,i,r):function(t,e){null!=e.lineDash&&(t.dashstyle=e.lineDash.join(" ")),null==e.stroke||e.stroke instanceof v||z(t,e.stroke,e.opacity)}(s,i),C(t,s)):(t[a?"filled":"stroked"]="false",L(t,s))},B=[[],[],[]];d.prototype.brushVML=function(t){var e=this.style,i=this._vmlEl;i||(i=g.createNode("shape"),M(i),this._vmlEl=i),R(i,"fill",e,this),R(i,"stroke",e,this);var r=this.transform,a=null!=r,o=i.getElementsByTagName("stroke")[0];if(o){var s=e.lineWidth;if(a&&!e.strokeNoScale){var h=r[0]*r[3]-r[1]*r[2];s*=y(x(h))}o.weight=s+"px"}var l=this.path||(this.path=new p);this.__dirtyPath&&(l.beginPath(),this.buildPath(l,this.shape),l.toStatic(),this.__dirtyPath=!1),i.path=function(t,e){var i,r,a,o,s,h,l=m.M,u=m.C,c=m.L,f=m.A,d=m.Q,p=[],v=t.data,g=t.len();for(o=0;o<g;){switch(r="",i=0,a=v[o++]){case l:r=" m ",i=1,s=v[o++],h=v[o++],B[0][0]=s,B[0][1]=h;break;case c:r=" l ",i=1,s=v[o++],h=v[o++],B[0][0]=s,B[0][1]=h;break;case d:case u:r=" c ",i=3;var x,k,M=v[o++],P=v[o++],C=v[o++],L=v[o++];a===d?(x=C,k=L,C=(C+2*M)/3,L=(L+2*P)/3,M=(s+2*M)/3,P=(h+2*P)/3):(x=v[o++],k=v[o++]),B[0][0]=M,B[0][1]=P,B[1][0]=C,B[1][1]=L,B[2][0]=x,B[2][1]=k,s=x,h=k;break;case f:var A=0,D=0,z=1,R=1,I=0;e&&(A=e[4],D=e[5],z=y(e[0]*e[0]+e[1]*e[1]),R=y(e[2]*e[2]+e[3]*e[3]),I=Math.atan2(-e[1]/R,e[0]/z));var E=v[o++],O=v[o++],F=v[o++],H=v[o++],N=v[o++]+I,W=v[o++]+N+I;o++;var q=v[o++],j=E+w(N)*F,V=O+b(N)*H,X=(M=E+w(W)*F,P=O+b(W)*H,q?" wa ":" at ");Math.abs(j-M)<1e-4&&(Math.abs(W-N)>.01?q&&(j+=.0125):Math.abs(V-O)<1e-4?q&&j<E||!q&&j>E?P-=.0125:P+=.0125:q&&V<O||!q&&V>O?M+=.0125:M-=.0125),p.push(X,_(((E-F)*z+A)*T-S),",",_(((O-H)*R+D)*T-S),",",_(((E+F)*z+A)*T-S),",",_(((O+H)*R+D)*T-S),",",_((j*z+A)*T-S),",",_((V*R+D)*T-S),",",_((M*z+A)*T-S),",",_((P*R+D)*T-S)),s=M,h=P;break;case m.R:var U=B[0],Y=B[1];U[0]=v[o++],U[1]=v[o++],Y[0]=U[0]+v[o++],Y[1]=U[1]+v[o++],e&&(n(U,U,e),n(Y,Y,e)),U[0]=_(U[0]*T-S),Y[0]=_(Y[0]*T-S),U[1]=_(U[1]*T-S),Y[1]=_(Y[1]*T-S),p.push(" m ",U[0],",",U[1]," l ",Y[0],",",U[1]," l ",Y[0],",",Y[1]," l ",U[0],",",Y[1]);break;case m.Z:p.push(" x ")}if(i>0){p.push(r);for(var G=0;G<i;G++){var Z=B[G];e&&n(Z,Z,e),p.push(_(Z[0]*T-S),",",_(Z[1]*T-S),G<i-1?",":"")}}}return p.join("")}(l,this.transform),i.style.zIndex=A(this.zlevel,this.z,this.z2),C(t,i),null!=e.text?this.drawRectText(t,this.getBoundingRect()):this.removeRectText(t)},d.prototype.onRemove=function(t){L(t,this._vmlEl),this.removeRectText(t)},d.prototype.onAdd=function(t){C(t,this._vmlEl),this.appendRectText(t)};c.prototype.brushVML=function(t){var e,i,r,a=this.style,o=a.image;if("object"==typeof(r=o)&&r.tagName&&"IMG"===r.tagName.toUpperCase()){var s=o.src;if(s===this._imageSrc)e=this._imageWidth,i=this._imageHeight;else{var h=o.runtimeStyle,l=h.width,u=h.height;h.width="auto",h.height="auto",e=o.width,i=o.height,h.width=l,h.height=u,this._imageSrc=s,this._imageWidth=e,this._imageHeight=i}o=s}else o===this._imageSrc&&(e=this._imageWidth,i=this._imageHeight);if(o){var c=a.x||0,f=a.y||0,d=a.width,p=a.height,v=a.sWidth,m=a.sHeight,x=a.sx||0,w=a.sy||0,b=v&&m,T=this._vmlEl;T||(T=g.doc.createElement("div"),M(T),this._vmlEl=T);var S,P=T.style,L=!1,D=1,z=1;if(this.transform&&(S=this.transform,D=y(S[0]*S[0]+S[1]*S[1]),z=y(S[2]*S[2]+S[3]*S[3]),L=S[1]||S[2]),L){var R=[c,f],B=[c+d,f],I=[c,f+p],E=[c+d,f+p];n(R,R,S),n(B,B,S),n(I,I,S),n(E,E,S);var O=k(R[0],B[0],I[0],E[0]),F=k(R[1],B[1],I[1],E[1]),H=[];H.push("M11=",S[0]/D,",","M12=",S[2]/z,",","M21=",S[1]/D,",","M22=",S[3]/z,",","Dx=",_(c*D+S[4]),",","Dy=",_(f*z+S[5])),P.padding="0 "+_(O)+"px "+_(F)+"px 0",P.filter="progid:DXImageTransform.Microsoft.Matrix("+H.join("")+", SizingMethod=clip)"}else S&&(c=c*D+S[4],f=f*z+S[5]),P.filter="",P.left=_(c)+"px",P.top=_(f)+"px";var N=this._imageEl,W=this._cropEl;N||(N=g.doc.createElement("div"),this._imageEl=N);var q=N.style;if(b){if(e&&i)q.width=_(D*e*d/v)+"px",q.height=_(z*i*p/m)+"px";else{var j=new Image,V=this;j.onload=function(){j.onload=null,e=j.width,i=j.height,q.width=_(D*e*d/v)+"px",q.height=_(z*i*p/m)+"px",V._imageWidth=e,V._imageHeight=i,V._imageSrc=o},j.src=o}W||((W=g.doc.createElement("div")).style.overflow="hidden",this._cropEl=W);var X=W.style;X.width=_((d+x*d/v)*D),X.height=_((p+w*p/m)*z),X.filter="progid:DXImageTransform.Microsoft.Matrix(Dx="+-x*d/v*D+",Dy="+-w*p/m*z+")",W.parentNode||T.appendChild(W),N.parentNode!=W&&W.appendChild(N)}else q.width=_(D*d)+"px",q.height=_(z*p)+"px",T.appendChild(N),W&&W.parentNode&&(T.removeChild(W),this._cropEl=null);var U="",Y=a.opacity;Y<1&&(U+=".Alpha(opacity="+_(100*Y)+") "),U+="progid:DXImageTransform.Microsoft.AlphaImageLoader(src="+o+", SizingMethod=scale)",q.filter=U,T.style.zIndex=A(this.zlevel,this.z,this.z2),C(t,T),null!=a.text&&this.drawRectText(t,this.getBoundingRect())}},c.prototype.onRemove=function(t){L(t,this._vmlEl),this._vmlEl=null,this._cropEl=null,this._imageEl=null,this.removeRectText(t)},c.prototype.onAdd=function(t){C(t,this._vmlEl),this.appendRectText(t)};var I,E={},O=0,F=document.createElement("div");s.$override("measureText",function(t,e){var i=g.doc;I||((I=i.createElement("div")).style.cssText="position:absolute;top:-20000px;left:0;padding:0;margin:0;border:none;white-space:pre;",g.doc.body.appendChild(I));try{I.style.font=e}catch(t){}return I.innerHTML="",I.appendChild(i.createTextNode(t)),{width:I.offsetWidth}});for(var H=new a,N=function(t,e,i,r){var a=this.style;this.__dirty&&h.normalizeTextStyle(a,!0);var o=a.text;if(null!=o&&(o+=""),o){if(a.rich){var l=s.parseRichText(o,a);o=[];for(var u=0;u<l.lines.length;u++){for(var c=l.lines[u].tokens,f=[],d=0;d<c.length;d++)f.push(c[d].text);o.push(f.join(""))}o=o.join("\n")}var p,v,m=a.textAlign,y=a.textVerticalAlign,x=function(t){var e=E[t];if(!e){O>100&&(O=0,E={});var i,r=F.style;try{r.font=t,i=r.fontFamily.split(",")[0]}catch(t){}e={style:r.fontStyle||"normal",variant:r.fontVariant||"normal",weight:r.fontWeight||"normal",size:0|parseFloat(r.fontSize||12),family:i||"Microsoft YaHei"},E[t]=e,O++}return e}(a.font),w=x.style+" "+x.variant+" "+x.weight+" "+x.size+'px "'+x.family+'"';i=i||s.getBoundingRect(o,w,m,y);var b=this.transform;if(b&&!r&&(H.copy(e),H.applyTransform(b),e=H),r)p=e.x,v=e.y;else{var k=a.textPosition,T=a.textDistance;if(k instanceof Array)p=e.x+D(k[0],e.width),v=e.y+D(k[1],e.height),m=m||"left";else{var S=s.adjustTextPositionOnRect(k,e,T);p=S.x,v=S.y,m=m||S.textAlign,y=y||S.textVerticalAlign}}p=s.adjustTextX(p,i.width,m),v=s.adjustTextY(v,i.height,y),v+=i.height/2;var P,L,z,B=g.createNode,I=this._textVmlEl;I?L=(P=(z=I.firstChild).nextSibling).nextSibling:(I=B("line"),P=B("path"),L=B("textpath"),z=B("skew"),L.style["v-text-align"]="left",M(I),P.textpathok=!0,L.on=!0,I.from="0 0",I.to="1000 0.05",C(I,z),C(I,P),C(I,L),this._textVmlEl=I);var N=[p,v],W=I.style;b&&r?(n(N,N,b),z.on=!0,z.matrix=b[0].toFixed(3)+","+b[2].toFixed(3)+","+b[1].toFixed(3)+","+b[3].toFixed(3)+",0,0",z.offset=(_(N[0])||0)+","+(_(N[1])||0),z.origin="0 0",W.left="0px",W.top="0px"):(z.on=!1,W.left=_(p)+"px",W.top=_(v)+"px"),L.string=String(o).replace(/&/g,"&amp;").replace(/"/g,"&quot;");try{L.style.font=w}catch(t){}R(I,"fill",{fill:a.textFill,opacity:a.opacity},this),R(I,"stroke",{stroke:a.textStroke,opacity:a.opacity,lineDash:a.lineDash},this),I.style.zIndex=A(this.zlevel,this.z,this.z2),C(t,I)}},W=function(t){L(t,this._textVmlEl),this._textVmlEl=null},q=function(t){C(t,this._textVmlEl)},j=[l,u,c,d,f],V=0;V<j.length;V++){var X=j[V].prototype;X.drawRectText=N,X.removeRectText=W,X.appendRectText=q}f.prototype.brushVML=function(t){var e=this.style;null!=e.text?this.drawRectText(t,{x:e.x||0,y:e.y||0,width:0,height:0},this.getBoundingRect(),!0):this.removeRectText(t)},f.prototype.onRemove=function(t){this.removeRectText(t)},f.prototype.onAdd=function(t){this.appendRectText(t)}}},670:function(t,e,i){var r=i(76),n=i(267),a=i(0).each;function o(t){return parseInt(t,10)}function s(t,e){n.initVML(),this.root=t,this.storage=e;var i=document.createElement("div"),r=document.createElement("div");i.style.cssText="display:inline-block;overflow:hidden;position:relative;width:300px;height:150px;",r.style.cssText="position:absolute;left:0;top:0;",t.appendChild(i),this._vmlRoot=r,this._vmlViewport=i,this.resize();var a=e.delFromStorage,o=e.addToStorage;e.delFromStorage=function(t){a.call(e,t),t&&t.onRemove&&t.onRemove(r)},e.addToStorage=function(t){t.onAdd&&t.onAdd(r),o.call(e,t)},this._firstPaint=!0}s.prototype={constructor:s,getType:function(){return"vml"},getViewportRoot:function(){return this._vmlViewport},getViewportRootOffset:function(){var t=this.getViewportRoot();if(t)return{offsetLeft:t.offsetLeft||0,offsetTop:t.offsetTop||0}},refresh:function(){var t=this.storage.getDisplayList(!0,!0);this._paintList(t)},_paintList:function(t){for(var e=this._vmlRoot,i=0;i<t.length;i++){var r=t[i];r.invisible||r.ignore?(r.__alreadyNotVisible||r.onRemove(e),r.__alreadyNotVisible=!0):(r.__alreadyNotVisible&&r.onAdd(e),r.__alreadyNotVisible=!1,r.__dirty&&(r.beforeBrush&&r.beforeBrush(),(r.brushVML||r.brush).call(r,e),r.afterBrush&&r.afterBrush())),r.__dirty=!1}this._firstPaint&&(this._vmlViewport.appendChild(e),this._firstPaint=!1)},resize:function(t,e){t=null==t?this._getWidth():t,e=null==e?this._getHeight():e;if(this._width!=t||this._height!=e){this._width=t,this._height=e;var i=this._vmlViewport.style;i.width=t+"px",i.height=e+"px"}},dispose:function(){this.root.innerHTML="",this._vmlRoot=this._vmlViewport=this.storage=null},getWidth:function(){return this._width},getHeight:function(){return this._height},clear:function(){this._vmlViewport&&this.root.removeChild(this._vmlViewport)},_getWidth:function(){var t=this.root,e=t.currentStyle;return(t.clientWidth||o(e.width))-o(e.paddingLeft)-o(e.paddingRight)|0},_getHeight:function(){var t=this.root,e=t.currentStyle;return(t.clientHeight||o(e.height))-o(e.paddingTop)-o(e.paddingBottom)|0}},a(["getLayer","insertLayer","eachLayer","eachBuiltinLayer","eachOtherLayer","getLayers","modLayer","delLayer","clearLayer","toDataURL","pathToImage"],function(t){var e;s.prototype[t]=(e=t,function(){r('In IE8.0 VML mode painter not support method "'+e+'"')})});var h=s;t.exports=h},671:function(t,e,i){i(159),(0,i(102).registerPainter)("svg",i(672))},672:function(t,e,i){var r=i(160).createElement,n=i(0),a=n.each,o=i(76),s=i(18),h=i(77),l=i(79),u=i(673),c=i(674),f=i(675),d=i(676),p=i(159),v=p.path,g=p.image,m=p.text;function _(t){return parseInt(t,10)}function y(t,e){return e&&t&&e.parentNode!==t}function x(t,e,i){if(y(t,e)&&i){var r=i.nextSibling;r?t.insertBefore(e,r):t.appendChild(e)}}function w(t,e){if(y(t,e)){var i=t.firstChild;i?t.insertBefore(e,i):t.appendChild(e)}}function b(t,e){e&&t&&e.parentNode===t&&t.removeChild(e)}function k(t){return t.__textSvgEl}function T(t){return t.__svgEl}var S=function(t,e,i,a){this.root=t,this.storage=e,this._opts=i=n.extend({},i||{});var o=r("svg");o.setAttribute("xmlns","http://www.w3.org/2000/svg"),o.setAttribute("version","1.1"),o.setAttribute("baseProfile","full"),o.style.cssText="user-select:none;position:absolute;left:0;top:0;",this.gradientManager=new c(a,o),this.clipPathManager=new f(a,o),this.shadowManager=new d(a,o);var s=document.createElement("div");s.style.cssText="overflow:hidden;position:relative",this._svgRoot=o,this._viewport=s,t.appendChild(s),s.appendChild(o),this.resize(i.width,i.height),this._visibleList=[]};S.prototype={constructor:S,getType:function(){return"svg"},getViewportRoot:function(){return this._viewport},getViewportRootOffset:function(){var t=this.getViewportRoot();if(t)return{offsetLeft:t.offsetLeft||0,offsetTop:t.offsetTop||0}},refresh:function(){var t=this.storage.getDisplayList(!0);this._paintList(t)},setBackgroundColor:function(t){this._viewport.style.background=t},_paintList:function(t){this.gradientManager.markAllUnused(),this.clipPathManager.markAllUnused(),this.shadowManager.markAllUnused();var e,i,r=this._svgRoot,n=this._visibleList,a=t.length,o=[];for(e=0;e<a;e++){var c=t[e],f=(i=c)instanceof s?v:i instanceof h?g:i instanceof l?m:v,d=T(c)||k(c);c.invisible||(c.__dirty&&(f&&f.brush(c),this.clipPathManager.update(c),c.style&&(this.gradientManager.update(c.style.fill),this.gradientManager.update(c.style.stroke),this.shadowManager.update(d,c)),c.__dirty=!1),o.push(c))}var p,_=u(n,o);for(e=0;e<_.length;e++){if((M=_[e]).removed)for(var y=0;y<M.count;y++){d=T(c=n[M.indices[y]]);var S=k(c);b(r,d),b(r,S)}}for(e=0;e<_.length;e++){var M;if((M=_[e]).added)for(y=0;y<M.count;y++){d=T(c=o[M.indices[y]]),S=k(c);p?x(r,d,p):w(r,d),d?x(r,S,d):p?x(r,S,p):w(r,S),x(r,S,d),p=S||d||p,this.gradientManager.addWithoutUpdate(d,c),this.shadowManager.addWithoutUpdate(p,c),this.clipPathManager.markUsed(c)}else if(!M.removed)for(y=0;y<M.count;y++){p=d=k(c=o[M.indices[y]])||T(c)||p,this.gradientManager.markUsed(c),this.gradientManager.addWithoutUpdate(d,c),this.shadowManager.markUsed(c),this.shadowManager.addWithoutUpdate(d,c),this.clipPathManager.markUsed(c)}}this.gradientManager.removeUnused(),this.clipPathManager.removeUnused(),this.shadowManager.removeUnused(),this._visibleList=o},_getDefs:function(t){var e,i=this._svgRoot;return 0===(e=this._svgRoot.getElementsByTagName("defs")).length?t?((e=i.insertBefore(r("defs"),i.firstChild)).contains||(e.contains=function(t){var i=e.children;if(!i)return!1;for(var r=i.length-1;r>=0;--r)if(i[r]===t)return!0;return!1}),e):null:e[0]},resize:function(t,e){var i=this._viewport;i.style.display="none";var r=this._opts;if(null!=t&&(r.width=t),null!=e&&(r.height=e),t=this._getSize(0),e=this._getSize(1),i.style.display="",this._width!==t||this._height!==e){this._width=t,this._height=e;var n=i.style;n.width=t+"px",n.height=e+"px";var a=this._svgRoot;a.setAttribute("width",t),a.setAttribute("height",e)}},getWidth:function(){return this._width},getHeight:function(){return this._height},_getSize:function(t){var e=this._opts,i=["width","height"][t],r=["clientWidth","clientHeight"][t],n=["paddingLeft","paddingTop"][t],a=["paddingRight","paddingBottom"][t];if(null!=e[i]&&"auto"!==e[i])return parseFloat(e[i]);var o=this.root,s=document.defaultView.getComputedStyle(o);return(o[r]||_(s[i])||_(o.style[i]))-(_(s[n])||0)-(_(s[a])||0)|0},dispose:function(){this.root.innerHTML="",this._svgRoot=this._viewport=this.storage=null},clear:function(){this._viewport&&this.root.removeChild(this._viewport)},pathToDataUrl:function(){return this.refresh(),"data:image/svg+xml;charset=UTF-8,"+this._svgRoot.outerHTML}},a(["getLayer","insertLayer","eachLayer","eachBuiltinLayer","eachOtherLayer","getLayers","modLayer","delLayer","clearLayer","toDataURL","pathToImage"],function(t){var e;S.prototype[t]=(e=t,function(){o('In SVG mode painter not support method "'+e+'"')})});var M=S;t.exports=M},673:function(t,e){function i(){}function r(t,e,i,r){for(var n=0,a=e.length,o=0,s=0;n<a;n++){var h=e[n];if(h.removed){for(l=[],u=s;u<s+h.count;u++)l.push(u);h.indices=l,s+=h.count}else{for(var l=[],u=o;u<o+h.count;u++)l.push(u);h.indices=l,o+=h.count,h.added||(s+=h.count)}}return e}i.prototype={diff:function(t,e,i){i||(i=function(t,e){return t===e}),this.equals=i;var n=this;t=t.slice();var a=(e=e.slice()).length,o=t.length,s=1,h=a+o,l=[{newPos:-1,components:[]}],u=this.extractCommon(l[0],e,t,0);if(l[0].newPos+1>=a&&u+1>=o){for(var c=[],f=0;f<e.length;f++)c.push(f);return[{indices:c,count:e.length}]}function d(){for(var i=-1*s;i<=s;i+=2){var h,u=l[i-1],c=l[i+1],f=(c?c.newPos:0)-i;u&&(l[i-1]=void 0);var d=u&&u.newPos+1<a,p=c&&0<=f&&f<o;if(d||p){if(!d||p&&u.newPos<c.newPos?(h={newPos:(v=c).newPos,components:v.components.slice(0)},n.pushComponent(h.components,void 0,!0)):((h=u).newPos++,n.pushComponent(h.components,!0,void 0)),f=n.extractCommon(h,e,t,i),h.newPos+1>=a&&f+1>=o)return r(n,h.components,e,t);l[i]=h}else l[i]=void 0}var v;s++}for(;s<=h;){var p=d();if(p)return p}},pushComponent:function(t,e,i){var r=t[t.length-1];r&&r.added===e&&r.removed===i?t[t.length-1]={count:r.count+1,added:e,removed:i}:t.push({count:1,added:e,removed:i})},extractCommon:function(t,e,i,r){for(var n=e.length,a=i.length,o=t.newPos,s=o-r,h=0;o+1<n&&s+1<a&&this.equals(e[o+1],i[s+1]);)o++,s++,h++;return h&&t.components.push({count:h}),t.newPos=o,s},tokenize:function(t){return t.slice()},join:function(t){return t.slice()}};var n=new i;t.exports=function(t,e,i){return n.diff(t,e,i)}},674:function(t,e,i){var r=i(161),n=i(0),a=i(76);function o(t,e){r.call(this,t,e,["linearGradient","radialGradient"],"__gradient_in_use__")}n.inherits(o,r),o.prototype.addWithoutUpdate=function(t,e){if(e&&e.style){var i=this;n.each(["fill","stroke"],function(r){if(e.style[r]&&("linear"===e.style[r].type||"radial"===e.style[r].type)){var n,a=e.style[r],o=i.getDefs(!0);a._dom?(n=a._dom,o.contains(a._dom)||i.addDom(n)):n=i.add(a),i.markUsed(e);var s=n.getAttribute("id");t.setAttribute(r,"url(#"+s+")")}})}},o.prototype.add=function(t){var e;if("linear"===t.type)e=this.createElement("linearGradient");else{if("radial"!==t.type)return a("Illegal gradient type."),null;e=this.createElement("radialGradient")}return t.id=t.id||this.nextId++,e.setAttribute("id","zr"+this._zrId+"-gradient-"+t.id),this.updateDom(t,e),this.addDom(e),e},o.prototype.update=function(t){var e=this;r.prototype.update.call(this,t,function(){var i=t.type,r=t._dom.tagName;"linear"===i&&"linearGradient"===r||"radial"===i&&"radialGradient"===r?e.updateDom(t,t._dom):(e.removeDom(t),e.add(t))})},o.prototype.updateDom=function(t,e){if("linear"===t.type)e.setAttribute("x1",t.x),e.setAttribute("y1",t.y),e.setAttribute("x2",t.x2),e.setAttribute("y2",t.y2);else{if("radial"!==t.type)return void a("Illegal gradient type.");e.setAttribute("cx",t.x),e.setAttribute("cy",t.y),e.setAttribute("r",t.r)}t.global?e.setAttribute("gradientUnits","userSpaceOnUse"):e.setAttribute("gradientUnits","objectBoundingBox"),e.innerHTML="";for(var i=t.colorStops,r=0,n=i.length;r<n;++r){var o=this.createElement("stop");o.setAttribute("offset",100*i[r].offset+"%"),o.setAttribute("stop-color",i[r].color),e.appendChild(o)}t._dom=e},o.prototype.markUsed=function(t){if(t.style){var e=t.style.fill;e&&e._dom&&r.prototype.markUsed.call(this,e._dom),(e=t.style.stroke)&&e._dom&&r.prototype.markUsed.call(this,e._dom)}};var s=o;t.exports=s},675:function(t,e,i){var r=i(161),n=i(0),a=i(25);function o(t,e){r.call(this,t,e,"clipPath","__clippath_in_use__")}n.inherits(o,r),o.prototype.update=function(t){var e=this.getSvgElement(t);e&&this.updateDom(e,t.__clipPaths,!1);var i=this.getTextSvgElement(t);i&&this.updateDom(i,t.__clipPaths,!0),this.markUsed(t)},o.prototype.updateDom=function(t,e,i){if(e&&e.length>0){var r,n,o=this.getDefs(!0),s=e[0],h=i?"_textDom":"_dom";s[h]?(n=s[h].getAttribute("id"),r=s[h],o.contains(r)||o.appendChild(r)):(n="zr"+this._zrId+"-clip-"+this.nextId,++this.nextId,(r=this.createElement("clipPath")).setAttribute("id",n),o.appendChild(r),s[h]=r);var l=this.getSvgProxy(s);if(s.transform&&s.parent.invTransform&&!i){var u=Array.prototype.slice.call(s.transform);a.mul(s.transform,s.parent.invTransform,s.transform),l.brush(s),s.transform=u}else l.brush(s);var c=this.getSvgElement(s);r.innerHTML="",r.appendChild(c.cloneNode()),t.setAttribute("clip-path","url(#"+n+")"),e.length>1&&this.updateDom(r,e.slice(1),i)}else t&&t.setAttribute("clip-path","none")},o.prototype.markUsed=function(t){var e=this;t.__clipPaths&&t.__clipPaths.length>0&&n.each(t.__clipPaths,function(t){t._dom&&r.prototype.markUsed.call(e,t._dom),t._textDom&&r.prototype.markUsed.call(e,t._textDom)})};var s=o;t.exports=s},676:function(t,e,i){var r=i(161);function n(t,e){r.call(this,t,e,["filter"],"__filter_in_use__","_shadowDom")}function a(t){return t&&(t.shadowBlur||t.shadowOffsetX||t.shadowOffsetY||t.textShadowBlur||t.textShadowOffsetX||t.textShadowOffsetY)}i(0).inherits(n,r),n.prototype.addWithoutUpdate=function(t,e){if(e&&a(e.style)){var i,r=e.style;if(r._shadowDom)i=r._shadowDom,this.getDefs(!0).contains(r._shadowDom)||this.addDom(i);else i=this.add(e);this.markUsed(e);var n=i.getAttribute("id");t.style.filter="url(#"+n+")"}},n.prototype.add=function(t){var e=this.createElement("filter"),i=t.style;return i._shadowDomId=i._shadowDomId||this.nextId++,e.setAttribute("id","zr"+this._zrId+"-shadow-"+i._shadowDomId),this.updateDom(t,e),this.addDom(e),e},n.prototype.update=function(t,e){var i=e.style;if(a(i)){var n=this;r.prototype.update.call(this,e,function(t){n.updateDom(e,t._shadowDom)})}else this.remove(t,i)},n.prototype.remove=function(t,e){null!=e._shadowDomId&&(this.removeDom(e),t.style.filter="")},n.prototype.updateDom=function(t,e){var i=e.getElementsByTagName("feDropShadow");i=0===i.length?this.createElement("feDropShadow"):i[0];var r,n,a,o,s=t.style,h=t.scale&&t.scale[0]||1,l=t.scale&&t.scale[1]||1;if(s.shadowBlur||s.shadowOffsetX||s.shadowOffsetY)r=s.shadowOffsetX||0,n=s.shadowOffsetY||0,a=s.shadowBlur,o=s.shadowColor;else{if(!s.textShadowBlur)return void this.removeDom(e,s);r=s.textShadowOffsetX||0,n=s.textShadowOffsetY||0,a=s.textShadowBlur,o=s.textShadowColor}i.setAttribute("dx",r/h),i.setAttribute("dy",n/l),i.setAttribute("flood-color",o);var u=a/2/h+" "+a/2/l;i.setAttribute("stdDeviation",u),e.setAttribute("x","-100%"),e.setAttribute("y","-100%"),e.setAttribute("width",Math.ceil(a/2*200)+"%"),e.setAttribute("height",Math.ceil(a/2*200)+"%"),e.appendChild(i),s._shadowDom=e},n.prototype.markUsed=function(t){var e=t.style;e&&e._shadowDom&&r.prototype.markUsed.call(this,e._shadowDom)};var o=n;t.exports=o},68:function(t,e,i){var r=i(42),n=i(15),a=i(141),o=i(17),s=i(104).devicePixelRatio,h={M:1,L:2,C:3,Q:4,A:5,Z:6,R:7},l=[],u=[],c=[],f=[],d=Math.min,p=Math.max,v=Math.cos,g=Math.sin,m=Math.sqrt,_=Math.abs,y="undefined"!=typeof Float32Array,x=function(t){this._saveData=!t,this._saveData&&(this.data=[]),this._ctx=null};x.prototype={constructor:x,_xi:0,_yi:0,_x0:0,_y0:0,_ux:0,_uy:0,_len:0,_lineDash:null,_dashOffset:0,_dashIdx:0,_dashSum:0,setScale:function(t,e){this._ux=_(1/s/t)||0,this._uy=_(1/s/e)||0},getContext:function(){return this._ctx},beginPath:function(t){return this._ctx=t,t&&t.beginPath(),t&&(this.dpr=t.dpr),this._saveData&&(this._len=0),this._lineDash&&(this._lineDash=null,this._dashOffset=0),this},moveTo:function(t,e){return this.addData(h.M,t,e),this._ctx&&this._ctx.moveTo(t,e),this._x0=t,this._y0=e,this._xi=t,this._yi=e,this},lineTo:function(t,e){var i=_(t-this._xi)>this._ux||_(e-this._yi)>this._uy||this._len<5;return this.addData(h.L,t,e),this._ctx&&i&&(this._needsDash()?this._dashedLineTo(t,e):this._ctx.lineTo(t,e)),i&&(this._xi=t,this._yi=e),this},bezierCurveTo:function(t,e,i,r,n,a){return this.addData(h.C,t,e,i,r,n,a),this._ctx&&(this._needsDash()?this._dashedBezierTo(t,e,i,r,n,a):this._ctx.bezierCurveTo(t,e,i,r,n,a)),this._xi=n,this._yi=a,this},quadraticCurveTo:function(t,e,i,r){return this.addData(h.Q,t,e,i,r),this._ctx&&(this._needsDash()?this._dashedQuadraticTo(t,e,i,r):this._ctx.quadraticCurveTo(t,e,i,r)),this._xi=i,this._yi=r,this},arc:function(t,e,i,r,n,a){return this.addData(h.A,t,e,i,i,r,n-r,0,a?0:1),this._ctx&&this._ctx.arc(t,e,i,r,n,a),this._xi=v(n)*i+t,this._yi=g(n)*i+t,this},arcTo:function(t,e,i,r,n){return this._ctx&&this._ctx.arcTo(t,e,i,r,n),this},rect:function(t,e,i,r){return this._ctx&&this._ctx.rect(t,e,i,r),this.addData(h.R,t,e,i,r),this},closePath:function(){this.addData(h.Z);var t=this._ctx,e=this._x0,i=this._y0;return t&&(this._needsDash()&&this._dashedLineTo(e,i),t.closePath()),this._xi=e,this._yi=i,this},fill:function(t){t&&t.fill(),this.toStatic()},stroke:function(t){t&&t.stroke(),this.toStatic()},setLineDash:function(t){if(t instanceof Array){this._lineDash=t,this._dashIdx=0;for(var e=0,i=0;i<t.length;i++)e+=t[i];this._dashSum=e}return this},setLineDashOffset:function(t){return this._dashOffset=t,this},len:function(){return this._len},setData:function(t){var e=t.length;this.data&&this.data.length==e||!y||(this.data=new Float32Array(e));for(var i=0;i<e;i++)this.data[i]=t[i];this._len=e},appendPath:function(t){t instanceof Array||(t=[t]);for(var e=t.length,i=0,r=this._len,n=0;n<e;n++)i+=t[n].len();y&&this.data instanceof Float32Array&&(this.data=new Float32Array(r+i));for(n=0;n<e;n++)for(var a=t[n].data,o=0;o<a.length;o++)this.data[r++]=a[o];this._len=r},addData:function(t){if(this._saveData){var e=this.data;this._len+arguments.length>e.length&&(this._expandData(),e=this.data);for(var i=0;i<arguments.length;i++)e[this._len++]=arguments[i];this._prevCmd=t}},_expandData:function(){if(!(this.data instanceof Array)){for(var t=[],e=0;e<this._len;e++)t[e]=this.data[e];this.data=t}},_needsDash:function(){return this._lineDash},_dashedLineTo:function(t,e){var i,r,n=this._dashSum,a=this._dashOffset,o=this._lineDash,s=this._ctx,h=this._xi,l=this._yi,u=t-h,c=e-l,f=m(u*u+c*c),v=h,g=l,_=o.length;for(a<0&&(a=n+a),v-=(a%=n)*(u/=f),g-=a*(c/=f);u>0&&v<=t||u<0&&v>=t||0==u&&(c>0&&g<=e||c<0&&g>=e);)v+=u*(i=o[r=this._dashIdx]),g+=c*i,this._dashIdx=(r+1)%_,u>0&&v<h||u<0&&v>h||c>0&&g<l||c<0&&g>l||s[r%2?"moveTo":"lineTo"](u>=0?d(v,t):p(v,t),c>=0?d(g,e):p(g,e));u=v-t,c=g-e,this._dashOffset=-m(u*u+c*c)},_dashedBezierTo:function(t,e,i,n,a,o){var s,h,l,u,c,f=this._dashSum,d=this._dashOffset,p=this._lineDash,v=this._ctx,g=this._xi,_=this._yi,y=r.cubicAt,x=0,w=this._dashIdx,b=p.length,k=0;for(d<0&&(d=f+d),d%=f,s=0;s<1;s+=.1)h=y(g,t,i,a,s+.1)-y(g,t,i,a,s),l=y(_,e,n,o,s+.1)-y(_,e,n,o,s),x+=m(h*h+l*l);for(;w<b&&!((k+=p[w])>d);w++);for(s=(k-d)/x;s<=1;)u=y(g,t,i,a,s),c=y(_,e,n,o,s),w%2?v.moveTo(u,c):v.lineTo(u,c),s+=p[w]/x,w=(w+1)%b;w%2!=0&&v.lineTo(a,o),h=a-u,l=o-c,this._dashOffset=-m(h*h+l*l)},_dashedQuadraticTo:function(t,e,i,r){var n=i,a=r;i=(i+2*t)/3,r=(r+2*e)/3,t=(this._xi+2*t)/3,e=(this._yi+2*e)/3,this._dashedBezierTo(t,e,i,r,n,a)},toStatic:function(){var t=this.data;t instanceof Array&&(t.length=this._len,y&&(this.data=new Float32Array(t)))},getBoundingRect:function(){l[0]=l[1]=c[0]=c[1]=Number.MAX_VALUE,u[0]=u[1]=f[0]=f[1]=-Number.MAX_VALUE;for(var t=this.data,e=0,i=0,r=0,s=0,d=0;d<t.length;){var p=t[d++];switch(1==d&&(r=e=t[d],s=i=t[d+1]),p){case h.M:e=r=t[d++],i=s=t[d++],c[0]=r,c[1]=s,f[0]=r,f[1]=s;break;case h.L:a.fromLine(e,i,t[d],t[d+1],c,f),e=t[d++],i=t[d++];break;case h.C:a.fromCubic(e,i,t[d++],t[d++],t[d++],t[d++],t[d],t[d+1],c,f),e=t[d++],i=t[d++];break;case h.Q:a.fromQuadratic(e,i,t[d++],t[d++],t[d],t[d+1],c,f),e=t[d++],i=t[d++];break;case h.A:var m=t[d++],_=t[d++],y=t[d++],x=t[d++],w=t[d++],b=t[d++]+w,k=(t[d++],1-t[d++]);1==d&&(r=v(w)*y+m,s=g(w)*x+_),a.fromArc(m,_,y,x,w,b,k,c,f),e=v(b)*y+m,i=g(b)*x+_;break;case h.R:r=e=t[d++],s=i=t[d++];var T=t[d++],S=t[d++];a.fromLine(r,s,r+T,s+S,c,f);break;case h.Z:e=r,i=s}n.min(l,l,c),n.max(u,u,f)}return 0===d&&(l[0]=l[1]=u[0]=u[1]=0),new o(l[0],l[1],u[0]-l[0],u[1]-l[1])},rebuildPath:function(t){for(var e,i,r,n,a,o,s=this.data,l=this._ux,u=this._uy,c=this._len,f=0;f<c;){var d=s[f++];switch(1==f&&(e=r=s[f],i=n=s[f+1]),d){case h.M:e=r=s[f++],i=n=s[f++],t.moveTo(r,n);break;case h.L:a=s[f++],o=s[f++],(_(a-r)>l||_(o-n)>u||f===c-1)&&(t.lineTo(a,o),r=a,n=o);break;case h.C:t.bezierCurveTo(s[f++],s[f++],s[f++],s[f++],s[f++],s[f++]),r=s[f-2],n=s[f-1];break;case h.Q:t.quadraticCurveTo(s[f++],s[f++],s[f++],s[f++]),r=s[f-2],n=s[f-1];break;case h.A:var p=s[f++],m=s[f++],y=s[f++],x=s[f++],w=s[f++],b=s[f++],k=s[f++],T=s[f++],S=y>x?y:x,M=y>x?1:y/x,P=y>x?x/y:1,C=w+b;Math.abs(y-x)>.001?(t.translate(p,m),t.rotate(k),t.scale(M,P),t.arc(0,0,S,w,C,1-T),t.scale(1/M,1/P),t.rotate(-k),t.translate(-p,-m)):t.arc(p,m,S,w,C,1-T),1==f&&(e=v(w)*y+p,i=g(w)*x+m),r=v(C)*y+p,n=g(C)*x+m;break;case h.R:e=r=s[f],i=n=s[f+1],t.rect(s[f++],s[f++],s[f++],s[f++]);break;case h.Z:t.closePath(),r=e,n=i}}}},x.CMD=h;var w=x;t.exports=w},76:function(t,e,i){var r=i(104).debugMode,n=function(){};1===r?n=function(){for(var t in arguments)throw new Error(arguments[t])}:r>1&&(n=function(){for(var t in arguments)console.log(arguments[t])});var a=n;t.exports=a},77:function(t,e,i){var r=i(78),n=i(17),a=i(0),o=i(140);function s(t){r.call(this,t)}s.prototype={constructor:s,type:"image",brush:function(t,e){var i=this.style,r=i.image;i.bind(t,this,e);var n=this._image=o.createOrUpdateImage(r,this._image,this,this.onload);if(n&&o.isImageReady(n)){var a=i.x||0,s=i.y||0,h=i.width,l=i.height,u=n.width/n.height;if(null==h&&null!=l?h=l*u:null==l&&null!=h?l=h/u:null==h&&null==l&&(h=n.width,l=n.height),this.setTransform(t),i.sWidth&&i.sHeight){var c=i.sx||0,f=i.sy||0;t.drawImage(n,c,f,i.sWidth,i.sHeight,a,s,h,l)}else if(i.sx&&i.sy){var d=h-(c=i.sx),p=l-(f=i.sy);t.drawImage(n,c,f,d,p,a,s,h,l)}else t.drawImage(n,a,s,h,l);null!=i.text&&(this.restoreTransform(t),this.drawRectText(t,this.getBoundingRect()))}},getBoundingRect:function(){var t=this.style;return this._rect||(this._rect=new n(t.x||0,t.y||0,t.width||0,t.height||0)),this._rect}},a.inherits(s,r);var h=s;t.exports=h},78:function(t,e,i){var r=i(0),n=i(194),a=i(191),o=i(198);function s(t){for(var e in t=t||{},a.call(this,t),t)t.hasOwnProperty(e)&&"style"!==e&&(this[e]=t[e]);this.style=new n(t.style,this),this._rect=null,this.__clipPaths=[]}s.prototype={constructor:s,type:"displayable",__dirty:!0,invisible:!1,z:0,z2:0,zlevel:0,draggable:!1,dragging:!1,silent:!1,culling:!1,cursor:"pointer",rectHover:!1,progressive:!1,incremental:!1,inplace:!1,beforeBrush:function(t){},afterBrush:function(t){},brush:function(t,e){},getBoundingRect:function(){},contain:function(t,e){return this.rectContain(t,e)},traverse:function(t,e){t.call(e,this)},rectContain:function(t,e){var i=this.transformCoordToLocal(t,e);return this.getBoundingRect().contain(i[0],i[1])},dirty:function(){this.__dirty=!0,this._rect=null,this.__zr&&this.__zr.refresh()},animateStyle:function(t){return this.animate("style",t)},attrKV:function(t,e){"style"!==t?a.prototype.attrKV.call(this,t,e):this.style.set(e)},setStyle:function(t,e){return this.style.set(t,e),this.dirty(!1),this},useStyle:function(t){return this.style=new n(t,this),this.dirty(!1),this}},r.inherits(s,a),r.mixin(s,o);var h=s;t.exports=h},79:function(t,e,i){var r=i(78),n=i(0),a=i(33),o=i(105),s=function(t){r.call(this,t)};s.prototype={constructor:s,type:"text",brush:function(t,e){var i=this.style;this.__dirty&&o.normalizeTextStyle(i,!0),i.fill=i.stroke=i.shadowBlur=i.shadowColor=i.shadowOffsetX=i.shadowOffsetY=null;var r=i.text;null!=r&&(r+=""),i.bind(t,this,e),o.needDrawText(r,i)&&(this.setTransform(t),o.renderText(this,t,r,i),this.restoreTransform(t))},getBoundingRect:function(){var t=this.style;if(this.__dirty&&o.normalizeTextStyle(t,!0),!this._rect){var e=t.text;null!=e?e+="":e="";var i=a.getBoundingRect(t.text+"",t.font,t.textAlign,t.textVerticalAlign,t.textPadding,t.rich);if(i.x+=t.x||0,i.y+=t.y||0,o.getStroke(t.textStroke,t.textStrokeWidth)){var r=t.textStrokeWidth;i.x-=r/2,i.y-=r/2,i.width+=r,i.height+=r}this._rect=i}return this._rect}},n.inherits(s,r);var h=s;t.exports=h}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,