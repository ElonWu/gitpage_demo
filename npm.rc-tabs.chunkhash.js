(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{184:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=p(n(42)),r=p(n(169)),i=p(n(165)),o=p(n(168)),s=p(n(166)),l=p(n(167)),f=p(n(0)),u=p(n(11)),c=p(n(1)),d=n(197);function p(e){return e&&e.__esModule?e:{default:e}}var v=function(e){function t(){return(0,i.default)(this,t),(0,s.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,l.default)(t,e),(0,o.default)(t,[{key:"getTabPanes",value:function(){var e=this.props,t=e.activeKey,n=e.children,a=[];return f.default.Children.forEach(n,function(n){if(n){var r=n.key,i=t===r;a.push(f.default.cloneElement(n,{active:i,destroyInactiveTabPane:e.destroyInactiveTabPane,rootPrefixCls:e.prefixCls}))}}),a}},{key:"render",value:function(){var e,t=this.props,n=t.prefixCls,i=t.children,o=t.activeKey,s=t.className,l=t.tabBarPosition,u=t.animated,p=t.animatedWithMargin,v=t.style,h=(0,c.default)((e={},(0,r.default)(e,n+"-content",!0),(0,r.default)(e,u?n+"-content-animated":n+"-content-no-animated",!0),e),s);if(u){var y=(0,d.getActiveIndex)(i,o);if(-1!==y){var b=p?(0,d.getMarginStyle)(y,l):(0,d.getTransformPropValue)((0,d.getTransformByIndex)(y,l));v=(0,a.default)({},v,b)}else v=(0,a.default)({},v,{display:"none"})}return f.default.createElement("div",{className:h,style:v},this.getTabPanes())}}]),t}(f.default.Component);t.default=v,v.propTypes={animated:u.default.bool,animatedWithMargin:u.default.bool,prefixCls:u.default.string,children:u.default.node,activeKey:u.default.string,style:u.default.any,tabBarPosition:u.default.string,className:u.default.string},v.defaultProps={animated:!0},e.exports=t.default},185:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=y(n(42)),r=y(n(170)),i=y(n(165)),o=y(n(168)),s=y(n(166)),l=y(n(167)),f=y(n(0)),u=y(n(11)),c=y(n(230)),d=y(n(231)),p=y(n(233)),v=y(n(234)),h=y(n(235));function y(e){return e&&e.__esModule?e:{default:e}}var b=function(e){function t(){return(0,i.default)(this,t),(0,s.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,l.default)(t,e),(0,o.default)(t,[{key:"render",value:function(){var e=this.props,t=e.children,n=(0,r.default)(e,["children"]);return f.default.createElement(h.default,null,function(e,r){return f.default.createElement(p.default,(0,a.default)({saveRef:e},n),f.default.createElement(v.default,(0,a.default)({saveRef:e,getRef:r},n),f.default.createElement(d.default,(0,a.default)({saveRef:e,renderTabBarNode:t},n)),f.default.createElement(c.default,(0,a.default)({saveRef:e,getRef:r},n))))})}}]),t}(f.default.Component);t.default=b,b.propTypes={children:u.default.func},e.exports=t.default},186:function(e,t,n){"use strict";n.r(t);var a=n(42),r=n.n(a),i=n(169),o=n.n(i),s=n(170),l=n.n(s),f=n(165),u=n.n(f),c=n(168),d=n.n(c),p=n(166),v=n.n(p),h=n(167),y=n.n(h),b=n(0),m=n.n(b),g=n(11),x=n.n(g),P=n(1),T=n.n(P),k=n(174),C=n.n(k),_=37,E=38,S=39,R=40;function B(e){var t=[];return m.a.Children.forEach(e,function(e){e&&t.push(e)}),t}function N(e){return"left"===e||"right"===e}function O(e){return Object.keys(e).reduce(function(t,n){return"aria-"!==n.substr(0,5)&&"data-"!==n.substr(0,5)&&"role"!==n||(t[n]=e[n]),t},{})}var K=n(200),w=n(72),W=n.n(w)()({}),A=W.Provider,M=W.Consumer,j={width:0,height:0,overflow:"hidden",position:"absolute"},I=function(e){function t(){var e,n,a,r;u()(this,t);for(var i=arguments.length,o=Array(i),s=0;s<i;s++)o[s]=arguments[s];return n=a=v()(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(o))),a.onKeyDown=function(e){var t=e.target,n=e.which,r=e.shiftKey,i=a.props,o=i.nextElement,s=i.prevElement;n===K.a.TAB&&document.activeElement===t&&(!r&&o&&o.focus(),r&&s&&s.focus())},r=n,v()(a,r)}return y()(t,e),d()(t,[{key:"render",value:function(){var e=this.props.setRef;return m.a.createElement("div",{tabIndex:0,ref:e,style:j,onKeyDown:this.onKeyDown,role:"presentation"})}}]),t}(m.a.Component);I.propTypes={setRef:x.a.func,prevElement:x.a.object,nextElement:x.a.object};var D=I,z=function(e){function t(){return u()(this,t),v()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return y()(t,e),d()(t,[{key:"render",value:function(){var e,t=this.props,n=t.id,a=t.className,i=t.destroyInactiveTabPane,s=t.active,f=t.forceRender,u=t.rootPrefixCls,c=t.style,d=t.children,p=t.placeholder,v=l()(t,["id","className","destroyInactiveTabPane","active","forceRender","rootPrefixCls","style","children","placeholder"]);this._isActived=this._isActived||s;var h=u+"-tabpane",y=T()((e={},o()(e,h,1),o()(e,h+"-inactive",!s),o()(e,h+"-active",s),o()(e,a,a),e)),b=(i?s:this._isActived)||f;return m.a.createElement(M,null,function(e){var t=e.sentinelStart,a=e.sentinelEnd,i=e.setPanelSentinelStart,o=e.setPanelSentinelEnd,l=void 0,f=void 0;return s&&b&&(l=m.a.createElement(D,{setRef:i,prevElement:t}),f=m.a.createElement(D,{setRef:o,nextElement:a})),m.a.createElement("div",r()({style:c,role:"tabpanel","aria-hidden":s?"false":"true",className:y,id:n},O(v)),l,b?d:p,f)})}}]),t}(m.a.Component),H=z;function L(e){var t=void 0;return m.a.Children.forEach(e.children,function(e){!e||t||e.props.disabled||(t=e.key)}),t}z.propTypes={className:x.a.string,active:x.a.bool,style:x.a.any,destroyInactiveTabPane:x.a.bool,forceRender:x.a.bool,placeholder:x.a.node,rootPrefixCls:x.a.string,children:x.a.node,id:x.a.string},z.defaultProps={placeholder:null};var U=function(e){function t(e){u()(this,t);var n=v()(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));V.call(n);var a=void 0;return a="activeKey"in e?e.activeKey:"defaultActiveKey"in e?e.defaultActiveKey:L(e),n.state={activeKey:a},n}return y()(t,e),d()(t,[{key:"componentWillReceiveProps",value:function(e){var t,n;"activeKey"in e?this.setState({activeKey:e.activeKey}):(t=e,n=this.state.activeKey,m.a.Children.map(t.children,function(e){return e&&e.key}).indexOf(n)>=0||this.setState({activeKey:L(e)}))}},{key:"componentWillUnmount",value:function(){this.destroy=!0,C.a.cancel(this.sentinelId)}},{key:"updateSentinelContext",value:function(){var e=this;this.destroy||(C.a.cancel(this.sentinelId),this.sentinelId=C()(function(){e.forceUpdate()}))}},{key:"render",value:function(){var e,t=this.props,n=t.prefixCls,a=t.navWrapper,i=t.tabBarPosition,s=t.className,f=t.renderTabContent,u=t.renderTabBar,c=t.destroyInactiveTabPane,d=l()(t,["prefixCls","navWrapper","tabBarPosition","className","renderTabContent","renderTabBar","destroyInactiveTabPane"]),p=T()((e={},o()(e,n,1),o()(e,n+"-"+i,1),o()(e,s,!!s),e));this.tabBar=u();var v=m.a.cloneElement(this.tabBar,{prefixCls:n,navWrapper:a,key:"tabBar",onKeyDown:this.onNavKeyDown,tabBarPosition:i,onTabClick:this.onTabClick,panels:t.children,activeKey:this.state.activeKey}),h=m.a.cloneElement(f(),{prefixCls:n,tabBarPosition:i,activeKey:this.state.activeKey,destroyInactiveTabPane:c,children:t.children,onChange:this.setActiveKey,key:"tabContent"}),y=m.a.createElement(D,{key:"sentinelStart",setRef:this.setSentinelStart,nextElement:this.panelSentinelStart}),b=m.a.createElement(D,{key:"sentinelEnd",setRef:this.setSentinelEnd,prevElement:this.panelSentinelEnd}),g=[];return"bottom"===i?g.push(y,h,b,v):g.push(v,y,h,b),m.a.createElement(A,{value:{sentinelStart:this.sentinelStart,sentinelEnd:this.sentinelEnd,setPanelSentinelStart:this.setPanelSentinelStart,setPanelSentinelEnd:this.setPanelSentinelEnd}},m.a.createElement("div",r()({className:p,style:t.style},O(d),{onScroll:this.onScroll}),g))}}]),t}(m.a.Component),V=function(){var e=this;this.onTabClick=function(t,n){e.tabBar.props.onTabClick&&e.tabBar.props.onTabClick(t,n),e.setActiveKey(t)},this.onNavKeyDown=function(t){var n=t.keyCode;if(n===S||n===R){t.preventDefault();var a=e.getNextActiveKey(!0);e.onTabClick(a)}else if(n===_||n===E){t.preventDefault();var r=e.getNextActiveKey(!1);e.onTabClick(r)}},this.onScroll=function(e){var t=e.target;t===e.currentTarget&&t.scrollLeft>0&&(t.scrollLeft=0)},this.setSentinelStart=function(t){e.sentinelStart=t},this.setSentinelEnd=function(t){e.sentinelEnd=t},this.setPanelSentinelStart=function(t){t!==e.panelSentinelStart&&e.updateSentinelContext(),e.panelSentinelStart=t},this.setPanelSentinelEnd=function(t){t!==e.panelSentinelEnd&&e.updateSentinelContext(),e.panelSentinelEnd=t},this.setActiveKey=function(t){e.state.activeKey!==t&&("activeKey"in e.props||e.setState({activeKey:t}),e.props.onChange(t))},this.getNextActiveKey=function(t){var n=e.state.activeKey,a=[];m.a.Children.forEach(e.props.children,function(e){e&&!e.props.disabled&&(t?a.push(e):a.unshift(e))});var r=a.length,i=r&&a[0].key;return a.forEach(function(e,t){e.key===n&&(i=t===r-1?a[0].key:a[t+1].key)}),i}},q=U;U.propTypes={destroyInactiveTabPane:x.a.bool,renderTabBar:x.a.func.isRequired,renderTabContent:x.a.func.isRequired,navWrapper:x.a.func,onChange:x.a.func,children:x.a.node,prefixCls:x.a.string,className:x.a.string,tabBarPosition:x.a.string,style:x.a.object,activeKey:x.a.string,defaultActiveKey:x.a.string},U.defaultProps={prefixCls:"rc-tabs",destroyInactiveTabPane:!1,onChange:function(){},navWrapper:function(e){return e},tabBarPosition:"top",children:null,style:{}},U.TabPane=H;var G=function(e){function t(){return u()(this,t),v()(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return y()(t,e),d()(t,[{key:"getTabPanes",value:function(){var e=this.props,t=e.activeKey,n=e.children,a=[];return m.a.Children.forEach(n,function(n){if(n){var r=n.key,i=t===r;a.push(m.a.cloneElement(n,{active:i,destroyInactiveTabPane:e.destroyInactiveTabPane,rootPrefixCls:e.prefixCls}))}}),a}},{key:"render",value:function(){var e,t,n=this.props,a=n.prefixCls,i=n.children,s=n.activeKey,l=n.className,f=n.tabBarPosition,u=n.animated,c=n.animatedWithMargin,d=n.style,p=T()((e={},o()(e,a+"-content",!0),o()(e,u?a+"-content-animated":a+"-content-no-animated",!0),e),l);if(u){var v=function(e,t){for(var n=B(e),a=0;a<n.length;a++)if(n[a].key===t)return a;return-1}(i,s);if(-1!==v){var h=c?function(e,t){var n=N(t)?"marginTop":"marginLeft";return o()({},n,100*-e+"%")}(v,f):{transform:t=function(e,t){return(N(t)?"translateY":"translateX")+"("+100*-e+"%) translateZ(0)"}(v,f),WebkitTransform:t,MozTransform:t};d=r()({},d,h)}else d=r()({},d,{display:"none"})}return m.a.createElement("div",{className:p,style:d},this.getTabPanes())}}]),t}(m.a.Component),F=G;G.propTypes={animated:x.a.bool,animatedWithMargin:x.a.bool,prefixCls:x.a.string,children:x.a.node,activeKey:x.a.string,style:x.a.any,tabBarPosition:x.a.string,className:x.a.string},G.defaultProps={animated:!0},n.d(t,"TabPane",function(){return H}),n.d(t,"TabContent",function(){return F});t.default=q},197:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=i(n(169));t.toArray=o,t.getActiveIndex=function(e,t){for(var n=o(e),a=0;a<n.length;a++)if(n[a].key===t)return a;return-1},t.getActiveKey=function(e,t){return o(e)[t].key},t.setTransform=s,t.isTransformSupported=function(e){return"transform"in e||"webkitTransform"in e||"MozTransform"in e},t.setTransition=function(e,t){e.transition=t,e.webkitTransition=t,e.MozTransition=t},t.getTransformPropValue=function(e){return{transform:e,WebkitTransform:e,MozTransform:e}},t.isVertical=l,t.getTransformByIndex=function(e,t){return(l(t)?"translateY":"translateX")+"("+100*-e+"%) translateZ(0)"},t.getMarginStyle=function(e,t){var n=l(t)?"marginTop":"marginLeft";return(0,a.default)({},n,100*-e+"%")},t.getStyle=f,t.setPxStyle=function(e,t,n){t=n?"0px, "+t+"px, 0px":t+"px, 0px, 0px",s(e.style,"translate3d("+t+")")},t.getDataAttr=function(e){return Object.keys(e).reduce(function(t,n){return"aria-"!==n.substr(0,5)&&"data-"!==n.substr(0,5)&&"role"!==n||(t[n]=e[n]),t},{})},t.getLeft=function(e,t){return c("left","offsetWidth","right",e,t)},t.getTop=function(e,t){return c("top","offsetHeight","bottom",e,t)};var r=i(n(0));function i(e){return e&&e.__esModule?e:{default:e}}function o(e){var t=[];return r.default.Children.forEach(e,function(e){e&&t.push(e)}),t}function s(e,t){e.transform=t,e.webkitTransform=t,e.mozTransform=t}function l(e){return"left"===e||"right"===e}function f(e,t){return+window.getComputedStyle(e).getPropertyValue(t).replace("px","")}function u(e,t){return+e.getPropertyValue(t).replace("px","")}function c(e,t,n,a,r){var i=f(r,"padding-"+e);if(!a||!a.parentNode)return i;var o=a.parentNode.childNodes;return Array.prototype.some.call(o,function(r){var o=window.getComputedStyle(r);return r!==a?(i+=u(o,"margin-"+e),i+=r[t],i+=u(o,"margin-"+n),"content-box"===o.boxSizing&&(i+=u(o,"border-"+e+"-width")+u(o,"border-"+n+"-width")),!1):(i+=u(o,"margin-"+e),!0)}),i}},230:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=d(n(169)),r=d(n(165)),i=d(n(168)),o=d(n(166)),s=d(n(167)),l=d(n(0)),f=d(n(11)),u=d(n(1)),c=n(197);function d(e){return e&&e.__esModule?e:{default:e}}function p(e,t){var n=e.props,a=n.styles,r=n.panels,i=n.activeKey,o=e.props.getRef("root"),s=e.props.getRef("nav")||o,l=e.props.getRef("inkBar"),f=e.props.getRef("activeTab"),u=l.style,d=e.props.tabBarPosition,p=(0,c.getActiveIndex)(r,i);if(t&&(u.display="none"),f){var v=f,h=(0,c.isTransformSupported)(u);if((0,c.setTransform)(u,""),u.width="",u.height="",u.left="",u.top="",u.bottom="",u.right="","top"===d||"bottom"===d){var y=(0,c.getLeft)(v,s),b=v.offsetWidth;b===o.offsetWidth?b=0:a.inkBar&&void 0!==a.inkBar.width&&(b=parseFloat(a.inkBar.width,10))&&(y+=(v.offsetWidth-b)/2),h?(0,c.setTransform)(u,"translate3d("+y+"px,0,0)"):u.left=y+"px",u.width=b+"px"}else{var m=(0,c.getTop)(v,s,!0),g=v.offsetHeight;a.inkBar&&void 0!==a.inkBar.height&&(g=parseFloat(a.inkBar.height,10))&&(m+=(v.offsetHeight-g)/2),h?((0,c.setTransform)(u,"translate3d(0,"+m+"px,0)"),u.top="0"):u.top=m+"px",u.height=g+"px"}}u.display=-1!==p?"block":"none"}var v=function(e){function t(){return(0,r.default)(this,t),(0,o.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,s.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){var e=this;this.timeout=setTimeout(function(){p(e,!0)},0)}},{key:"componentDidUpdate",value:function(){p(this)}},{key:"componentWillUnmount",value:function(){clearTimeout(this.timeout)}},{key:"render",value:function(){var e,t=this.props,n=t.prefixCls,r=t.styles,i=t.inkBarAnimated,o=n+"-ink-bar",s=(0,u.default)((e={},(0,a.default)(e,o,!0),(0,a.default)(e,i?o+"-animated":o+"-no-animated",!0),e));return l.default.createElement("div",{style:r.inkBar,className:s,key:"inkBar",ref:this.props.saveRef("inkBar")})}}]),t}(l.default.Component);t.default=v,v.propTypes={prefixCls:f.default.string,styles:f.default.object,inkBarAnimated:f.default.bool,saveRef:f.default.func},v.defaultProps={prefixCls:"",inkBarAnimated:!0,styles:{},saveRef:function(){}},e.exports=t.default},231:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=p(n(42)),r=p(n(169)),i=p(n(165)),o=p(n(168)),s=p(n(166)),l=p(n(167)),f=p(n(0)),u=p(n(232)),c=p(n(11)),d=n(197);function p(e){return e&&e.__esModule?e:{default:e}}var v=function(e){function t(){return(0,i.default)(this,t),(0,s.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,l.default)(t,e),(0,o.default)(t,[{key:"render",value:function(){var e=this,t=this.props,n=t.panels,i=t.activeKey,o=t.prefixCls,s=t.tabBarGutter,l=t.saveRef,c=t.tabBarPosition,p=t.renderTabBarNode,v=[];return f.default.Children.forEach(n,function(t,h){if(t){var y=t.key,b=i===y?o+"-tab-active":"";b+=" "+o+"-tab";var m={};t.props.disabled?b+=" "+o+"-tab-disabled":m={onClick:e.props.onTabClick.bind(e,y)};var g={};i===y&&(g.ref=l("activeTab"));var x=s&&h===n.length-1?0:s,P=(0,r.default)({},(0,d.isVertical)(c)?"marginBottom":"marginRight",x);(0,u.default)("tab"in t.props,"There must be `tab` property on children of Tabs.");var T=f.default.createElement("div",(0,a.default)({role:"tab","aria-disabled":t.props.disabled?"true":"false","aria-selected":i===y?"true":"false"},m,{className:b,key:y,style:P},g),t.props.tab);p&&(T=p(T)),v.push(T)}}),f.default.createElement("div",{ref:l("navTabsContainer")},v)}}]),t}(f.default.Component);t.default=v,v.propTypes={activeKey:c.default.string,panels:c.default.node,prefixCls:c.default.string,tabBarGutter:c.default.number,onTabClick:c.default.func,saveRef:c.default.func,renderTabBarNode:c.default.func,tabBarPosition:c.default.string},v.defaultProps={panels:[],prefixCls:[],tabBarGutter:null,onTabClick:function(){},saveRef:function(){}},e.exports=t.default},232:function(e,t,n){"use strict";e.exports=function(){}},233:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=h(n(42)),r=h(n(169)),i=h(n(170)),o=h(n(165)),s=h(n(168)),l=h(n(166)),f=h(n(167)),u=n(0),c=h(u),d=h(n(11)),p=h(n(1)),v=n(197);function h(e){return e&&e.__esModule?e:{default:e}}var y=function(e){function t(){return(0,o.default)(this,t),(0,l.default)(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return(0,f.default)(t,e),(0,s.default)(t,[{key:"render",value:function(){var e=this.props,t=e.prefixCls,n=e.onKeyDown,o=e.className,s=e.extraContent,l=e.style,f=e.tabBarPosition,d=e.children,h=(0,i.default)(e,["prefixCls","onKeyDown","className","extraContent","style","tabBarPosition","children"]),y=(0,p.default)(t+"-bar",(0,r.default)({},o,!!o)),b="top"===f||"bottom"===f,m=b?{float:"right"}:{},g=s&&s.props?s.props.style:{},x=d;return s&&(x=[(0,u.cloneElement)(s,{key:"extra",style:(0,a.default)({},m,g)}),(0,u.cloneElement)(d,{key:"content"})],x=b?x:x.reverse()),c.default.createElement("div",(0,a.default)({role:"tablist",className:y,tabIndex:"0",ref:this.props.saveRef("root"),onKeyDown:n,style:l},(0,v.getDataAttr)(h)),x)}}]),t}(c.default.Component);t.default=y,y.propTypes={prefixCls:d.default.string,className:d.default.string,style:d.default.object,tabBarPosition:d.default.oneOf(["left","right","top","bottom"]),children:d.default.node,extraContent:d.default.node,onKeyDown:d.default.func,saveRef:d.default.func},y.defaultProps={prefixCls:"",className:"",style:{},tabBarPosition:"top",extraContent:null,children:null,onKeyDown:function(){},saveRef:function(){}},e.exports=t.default},234:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=v(n(169)),r=v(n(165)),i=v(n(168)),o=v(n(166)),s=v(n(167)),l=v(n(0)),f=v(n(11)),u=v(n(1)),c=v(n(173)),d=v(n(71)),p=n(197);function v(e){return e&&e.__esModule?e:{default:e}}var h=function(e){function t(e){(0,r.default)(this,t);var n=(0,o.default)(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.prevTransitionEnd=function(e){if("opacity"===e.propertyName){var t=n.props.getRef("container");n.scrollToActiveTab({target:t,currentTarget:t})}},n.scrollToActiveTab=function(e){var t=n.props.getRef("activeTab"),a=n.props.getRef("navWrap");if((!e||e.target===e.currentTarget)&&t){var r=n.isNextPrevShown()&&n.lastNextPrevShown;if(n.lastNextPrevShown=n.isNextPrevShown(),r){var i=n.getScrollWH(t),o=n.getOffsetWH(a),s=n.offset,l=n.getOffsetLT(a),f=n.getOffsetLT(t);l>f?(s+=l-f,n.setOffset(s)):l+o<f+i&&(s-=f+i-(l+o),n.setOffset(s))}}},n.prev=function(e){n.props.onPrevClick(e);var t=n.props.getRef("navWrap"),a=n.getOffsetWH(t),r=n.offset;n.setOffset(r+a)},n.next=function(e){n.props.onNextClick(e);var t=n.props.getRef("navWrap"),a=n.getOffsetWH(t),r=n.offset;n.setOffset(r-a)},n.offset=0,n.state={next:!1,prev:!1},n}return(0,s.default)(t,e),(0,i.default)(t,[{key:"componentDidMount",value:function(){var e=this;this.componentDidUpdate(),this.debouncedResize=(0,d.default)(function(){e.setNextPrev(),e.scrollToActiveTab()},200),this.resizeEvent=(0,c.default)(window,"resize",this.debouncedResize)}},{key:"componentDidUpdate",value:function(e){var t=this.props;if(e&&e.tabBarPosition!==t.tabBarPosition)this.setOffset(0);else{var n=this.setNextPrev();this.isNextPrevShown(this.state)!==this.isNextPrevShown(n)?this.setState({},this.scrollToActiveTab):e&&t.activeKey===e.activeKey||this.scrollToActiveTab()}}},{key:"componentWillUnmount",value:function(){this.resizeEvent&&this.resizeEvent.remove(),this.debouncedResize&&this.debouncedResize.cancel&&this.debouncedResize.cancel()}},{key:"setNextPrev",value:function(){var e=this.props.getRef("nav"),t=this.props.getRef("navTabsContainer"),n=this.getScrollWH(t||e),a=this.getOffsetWH(this.props.getRef("container"))+1,r=this.getOffsetWH(this.props.getRef("navWrap")),i=this.offset,o=a-n,s=this.state,l=s.next,f=s.prev;if(o>=0)l=!1,this.setOffset(0,!1),i=0;else if(o<i)l=!0;else{l=!1;var u=r-n;this.setOffset(u,!1),i=u}return f=i<0,this.setNext(l),this.setPrev(f),{next:l,prev:f}}},{key:"getOffsetWH",value:function(e){var t=this.props.tabBarPosition,n="offsetWidth";return"left"!==t&&"right"!==t||(n="offsetHeight"),e[n]}},{key:"getScrollWH",value:function(e){var t=this.props.tabBarPosition,n="scrollWidth";return"left"!==t&&"right"!==t||(n="scrollHeight"),e[n]}},{key:"getOffsetLT",value:function(e){var t=this.props.tabBarPosition,n="left";return"left"!==t&&"right"!==t||(n="top"),e.getBoundingClientRect()[n]}},{key:"setOffset",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=Math.min(0,e);if(this.offset!==n){this.offset=n;var a={},r=this.props.tabBarPosition,i=this.props.getRef("nav").style,o=(0,p.isTransformSupported)(i);a="left"===r||"right"===r?o?{value:"translate3d(0,"+n+"px,0)"}:{name:"top",value:n+"px"}:o?{value:"translate3d("+n+"px,0,0)"}:{name:"left",value:n+"px"},o?(0,p.setTransform)(i,a.value):i[a.name]=a.value,t&&this.setNextPrev()}}},{key:"setPrev",value:function(e){this.state.prev!==e&&this.setState({prev:e})}},{key:"setNext",value:function(e){this.state.next!==e&&this.setState({next:e})}},{key:"isNextPrevShown",value:function(e){return e?e.next||e.prev:this.state.next||this.state.prev}},{key:"render",value:function(){var e,t,n,r,i=this.state,o=i.next,s=i.prev,f=this.props,c=f.prefixCls,d=f.scrollAnimated,p=f.navWrapper,v=f.prevIcon,h=f.nextIcon,y=s||o,b=l.default.createElement("span",{onClick:s?this.prev:null,unselectable:"unselectable",className:(0,u.default)((e={},(0,a.default)(e,c+"-tab-prev",1),(0,a.default)(e,c+"-tab-btn-disabled",!s),(0,a.default)(e,c+"-tab-arrow-show",y),e)),onTransitionEnd:this.prevTransitionEnd},v||l.default.createElement("span",{className:c+"-tab-prev-icon"})),m=l.default.createElement("span",{onClick:o?this.next:null,unselectable:"unselectable",className:(0,u.default)((t={},(0,a.default)(t,c+"-tab-next",1),(0,a.default)(t,c+"-tab-btn-disabled",!o),(0,a.default)(t,c+"-tab-arrow-show",y),t))},h||l.default.createElement("span",{className:c+"-tab-next-icon"})),g=c+"-nav",x=(0,u.default)((n={},(0,a.default)(n,g,!0),(0,a.default)(n,d?g+"-animated":g+"-no-animated",!0),n));return l.default.createElement("div",{className:(0,u.default)((r={},(0,a.default)(r,c+"-nav-container",1),(0,a.default)(r,c+"-nav-container-scrolling",y),r)),key:"container",ref:this.props.saveRef("container")},b,m,l.default.createElement("div",{className:c+"-nav-wrap",ref:this.props.saveRef("navWrap")},l.default.createElement("div",{className:c+"-nav-scroll"},l.default.createElement("div",{className:x,ref:this.props.saveRef("nav")},p(this.props.children)))))}}]),t}(l.default.Component);t.default=h,h.propTypes={activeKey:f.default.string,getRef:f.default.func.isRequired,saveRef:f.default.func.isRequired,tabBarPosition:f.default.oneOf(["left","right","top","bottom"]),prefixCls:f.default.string,scrollAnimated:f.default.bool,onPrevClick:f.default.func,onNextClick:f.default.func,navWrapper:f.default.func,children:f.default.node,prevIcon:f.default.node,nextIcon:f.default.node},h.defaultProps={tabBarPosition:"left",prefixCls:"",scrollAnimated:!0,onPrevClick:function(){},onNextClick:function(){},navWrapper:function(e){return e}},e.exports=t.default},235:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var a=f(n(165)),r=f(n(168)),i=f(n(166)),o=f(n(167)),s=f(n(0)),l=f(n(11));function f(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(){var e,n,r,o;(0,a.default)(this,t);for(var s=arguments.length,l=Array(s),f=0;f<s;f++)l[f]=arguments[f];return n=r=(0,i.default)(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(l))),r.getRef=function(e){return r[e]},r.saveRef=function(e){return function(t){t&&(r[e]=t)}},o=n,(0,i.default)(r,o)}return(0,o.default)(t,e),(0,r.default)(t,[{key:"render",value:function(){return this.props.children(this.saveRef,this.getRef)}}]),t}(s.default.Component);t.default=u,u.propTypes={children:l.default.func},u.defaultProps={children:function(){return null}},e.exports=t.default}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFicy9saWIvVGFiQ29udGVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFicy9saWIvU2Nyb2xsYWJsZUlua1RhYkJhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFicy9lcy9LZXlDb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10YWJzL2VzL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10YWJzL2VzL1NlbnRpbmVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10YWJzL2VzL1RhYlBhbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRhYnMvZXMvVGFicy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFicy9lcy9UYWJDb250ZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10YWJzL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10YWJzL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFicy9saWIvSW5rVGFiQmFyTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFicy9saWIvVGFiQmFyVGFic05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRhYnMvbm9kZV9tb2R1bGVzL3dhcm5pbmcvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmMtdGFicy9saWIvVGFiQmFyUm9vdE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JjLXRhYnMvbGliL1Njcm9sbGFibGVUYWJCYXJOb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yYy10YWJzL2xpYi9TYXZlUmVmLmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiX2V4dGVuZHMzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9fd2VicGFja19yZXF1aXJlX18iLCJfZGVmaW5lUHJvcGVydHkzIiwiX2NsYXNzQ2FsbENoZWNrMyIsIl9jcmVhdGVDbGFzczMiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMiLCJfaW5oZXJpdHMzIiwiX3JlYWN0MiIsIl9wcm9wVHlwZXMyIiwiX2NsYXNzbmFtZXMzIiwiX3V0aWxzIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJUYWJDb250ZW50IiwiX1JlYWN0JENvbXBvbmVudCIsInRoaXMiLCJfX3Byb3RvX18iLCJnZXRQcm90b3R5cGVPZiIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwicHJvcHMiLCJhY3RpdmVLZXkiLCJjaGlsZHJlbiIsIm5ld0NoaWxkcmVuIiwiQ2hpbGRyZW4iLCJmb3JFYWNoIiwiY2hpbGQiLCJhY3RpdmUiLCJwdXNoIiwiY2xvbmVFbGVtZW50IiwiZGVzdHJveUluYWN0aXZlVGFiUGFuZSIsInJvb3RQcmVmaXhDbHMiLCJwcmVmaXhDbHMiLCJfY2xhc3NuYW1lcyIsImNsYXNzTmFtZSIsInRhYkJhclBvc2l0aW9uIiwiYW5pbWF0ZWQiLCJhbmltYXRlZFdpdGhNYXJnaW4iLCJzdHlsZSIsImNsYXNzZXMiLCJhY3RpdmVJbmRleCIsImdldEFjdGl2ZUluZGV4IiwiYW5pbWF0ZWRTdHlsZSIsImdldE1hcmdpblN0eWxlIiwiZ2V0VHJhbnNmb3JtUHJvcFZhbHVlIiwiZ2V0VHJhbnNmb3JtQnlJbmRleCIsImRpc3BsYXkiLCJjcmVhdGVFbGVtZW50IiwiZ2V0VGFiUGFuZXMiLCJDb21wb25lbnQiLCJwcm9wVHlwZXMiLCJib29sIiwic3RyaW5nIiwibm9kZSIsImFueSIsImRlZmF1bHRQcm9wcyIsIm1vZHVsZSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllczMiLCJfSW5rVGFiQmFyTm9kZTIiLCJfVGFiQmFyVGFic05vZGUyIiwiX1RhYkJhclJvb3ROb2RlMiIsIl9TY3JvbGxhYmxlVGFiQmFyTm9kZTIiLCJfU2F2ZVJlZjIiLCJTY3JvbGxhYmxlSW5rVGFiQmFyIiwiX3Byb3BzIiwicmVuZGVyVGFiQmFyTm9kZSIsInJlc3RQcm9wcyIsInNhdmVSZWYiLCJnZXRSZWYiLCJmdW5jIiwiS2V5Q29kZSIsInRvQXJyYXkiLCJjIiwicmVhY3RfZGVmYXVsdCIsImEiLCJpc1ZlcnRpY2FsIiwiZ2V0RGF0YUF0dHIiLCJrZXlzIiwicmVkdWNlIiwicHJldiIsInN1YnN0ciIsIlNlbnRpbmVsQ29udGV4dCIsImxpYl9kZWZhdWx0IiwiU2VudGluZWxQcm92aWRlciIsIlByb3ZpZGVyIiwiU2VudGluZWxDb25zdW1lciIsIkNvbnN1bWVyIiwic2VudGluZWxTdHlsZSIsIndpZHRoIiwiaGVpZ2h0Iiwib3ZlcmZsb3ciLCJwb3NpdGlvbiIsIlNlbnRpbmVsX1NlbnRpbmVsIiwiU2VudGluZWwiLCJfcmVmIiwiX3RlbXAiLCJfdGhpcyIsIl9yZXQiLCJjbGFzc0NhbGxDaGVja19kZWZhdWx0IiwiX2xlbiIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJwb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuX2RlZmF1bHQiLCJjYWxsIiwiY29uY2F0Iiwib25LZXlEb3duIiwiX3JlZjIiLCJ0YXJnZXQiLCJ3aGljaCIsInNoaWZ0S2V5IiwiX3RoaXMkcHJvcHMiLCJuZXh0RWxlbWVudCIsInByZXZFbGVtZW50IiwiZXNfS2V5Q29kZSIsIlRBQiIsImRvY3VtZW50IiwiYWN0aXZlRWxlbWVudCIsImZvY3VzIiwiaW5oZXJpdHNfZGVmYXVsdCIsImNyZWF0ZUNsYXNzX2RlZmF1bHQiLCJzZXRSZWYiLCJ0YWJJbmRleCIsInJlZiIsInJvbGUiLCJwcm9wX3R5cGVzX2RlZmF1bHQiLCJvYmplY3QiLCJlc19TZW50aW5lbCIsIlRhYlBhbmVfVGFiUGFuZSIsIlRhYlBhbmUiLCJpZCIsImZvcmNlUmVuZGVyIiwicGxhY2Vob2xkZXIiLCJvYmplY3RXaXRob3V0UHJvcGVydGllc19kZWZhdWx0IiwiX2lzQWN0aXZlZCIsImNscyIsImNsYXNzbmFtZXNfZGVmYXVsdCIsImRlZmluZVByb3BlcnR5X2RlZmF1bHQiLCJzaG91bGRSZW5kZXIiLCJzZW50aW5lbFN0YXJ0Iiwic2VudGluZWxFbmQiLCJzZXRQYW5lbFNlbnRpbmVsU3RhcnQiLCJzZXRQYW5lbFNlbnRpbmVsRW5kIiwicGFuZWxTZW50aW5lbFN0YXJ0IiwicGFuZWxTZW50aW5lbEVuZCIsImV4dGVuZHNfZGVmYXVsdCIsImFyaWEtaGlkZGVuIiwiZXNfVGFiUGFuZSIsImdldERlZmF1bHRBY3RpdmVLZXkiLCJkaXNhYmxlZCIsIlRhYnNfVGFicyIsIlRhYnMiLCJUYWJzX2luaXRpYWxpc2VQcm9wcyIsImRlZmF1bHRBY3RpdmVLZXkiLCJzdGF0ZSIsIm5leHRQcm9wcyIsInNldFN0YXRlIiwibWFwIiwiaW5kZXhPZiIsImRlc3Ryb3kiLCJyYWZfZGVmYXVsdCIsImNhbmNlbCIsInNlbnRpbmVsSWQiLCJfdGhpczIiLCJmb3JjZVVwZGF0ZSIsIm5hdldyYXBwZXIiLCJyZW5kZXJUYWJDb250ZW50IiwicmVuZGVyVGFiQmFyIiwidGFiQmFyIiwib25OYXZLZXlEb3duIiwib25UYWJDbGljayIsInBhbmVscyIsInRhYkNvbnRlbnQiLCJvbkNoYW5nZSIsInNldEFjdGl2ZUtleSIsInNldFNlbnRpbmVsU3RhcnQiLCJzZXRTZW50aW5lbEVuZCIsImNvbnRlbnRzIiwib25TY3JvbGwiLCJfdGhpczMiLCJlIiwiZXZlbnRLZXlDb2RlIiwia2V5Q29kZSIsInByZXZlbnREZWZhdWx0IiwibmV4dEtleSIsImdldE5leHRBY3RpdmVLZXkiLCJwcmV2aW91c0tleSIsImN1cnJlbnRUYXJnZXQiLCJzY3JvbGxMZWZ0IiwidXBkYXRlU2VudGluZWxDb250ZXh0IiwibmV4dCIsInVuc2hpZnQiLCJyZXQiLCJpIiwiZXNfVGFicyIsImlzUmVxdWlyZWQiLCJhcmciLCJUYWJDb250ZW50X1RhYkNvbnRlbnQiLCJ2IiwiaW5kZXgiLCJtYXJnaW5EaXJlY3Rpb24iLCJ0cmFuc2Zvcm0iLCJXZWJraXRUcmFuc2Zvcm0iLCJNb3pUcmFuc2Zvcm0iLCJlc19UYWJDb250ZW50IiwiZCIsIl9fd2VicGFja19leHBvcnRzX18iLCJnZXRBY3RpdmVLZXkiLCJzZXRUcmFuc2Zvcm0iLCJpc1RyYW5zZm9ybVN1cHBvcnRlZCIsInNldFRyYW5zaXRpb24iLCJ0cmFuc2l0aW9uIiwid2Via2l0VHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJnZXRTdHlsZSIsInNldFB4U3R5bGUiLCJlbCIsInZlcnRpY2FsIiwiZ2V0TGVmdCIsInRhYk5vZGUiLCJ3cmFwcGVyTm9kZSIsImdldFR5cGVWYWx1ZSIsImdldFRvcCIsIndlYmtpdFRyYW5zZm9ybSIsIm1velRyYW5zZm9ybSIsInByb3BlcnR5Iiwid2luZG93IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImdldFByb3BlcnR5VmFsdWUiLCJyZXBsYWNlIiwidG9OdW0iLCJzdGFydCIsImN1cnJlbnQiLCJlbmQiLCJ0b3RhbCIsInBhcmVudE5vZGUiLCJjaGlsZE5vZGVzIiwicHJvdG90eXBlIiwic29tZSIsImJveFNpemluZyIsIl9jb21wb25lbnREaWRVcGRhdGUiLCJjb21wb25lbnQiLCJpbml0IiwiX2NvbXBvbmVudCRwcm9wcyIsInN0eWxlcyIsInJvb3ROb2RlIiwid3JhcE5vZGUiLCJpbmtCYXJOb2RlIiwiYWN0aXZlVGFiIiwiaW5rQmFyTm9kZVN0eWxlIiwidHJhbnNmb3JtU3VwcG9ydGVkIiwibGVmdCIsInRvcCIsImJvdHRvbSIsInJpZ2h0Iiwib2Zmc2V0V2lkdGgiLCJpbmtCYXIiLCJ1bmRlZmluZWQiLCJwYXJzZUZsb2F0Iiwib2Zmc2V0SGVpZ2h0IiwiSW5rVGFiQmFyTm9kZSIsInRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiaW5rQmFyQW5pbWF0ZWQiLCJfd2FybmluZzIiLCJUYWJCYXJUYWJzTm9kZSIsInRhYkJhckd1dHRlciIsInJzdCIsImV2ZW50cyIsIm9uQ2xpY2siLCJiaW5kIiwiZ3V0dGVyIiwiYXJpYS1kaXNhYmxlZCIsImFyaWEtc2VsZWN0ZWQiLCJ0YWIiLCJudW1iZXIiLCJfcmVhY3QiLCJUYWJCYXJSb290Tm9kZSIsImV4dHJhQ29udGVudCIsInRvcE9yQm90dG9tIiwidGFiQmFyRXh0cmFDb250ZW50U3R5bGUiLCJmbG9hdCIsImV4dHJhQ29udGVudFN0eWxlIiwicmV2ZXJzZSIsIm9uZU9mIiwiX2NsYXNzbmFtZXM2IiwiX2FkZEV2ZW50TGlzdGVuZXIyIiwiX2RlYm91bmNlMiIsIlNjcm9sbGFibGVUYWJCYXJOb2RlIiwicHJldlRyYW5zaXRpb25FbmQiLCJwcm9wZXJ0eU5hbWUiLCJjb250YWluZXIiLCJzY3JvbGxUb0FjdGl2ZVRhYiIsIm5hdldyYXAiLCJuZWVkVG9Tcm9sbCIsImlzTmV4dFByZXZTaG93biIsImxhc3ROZXh0UHJldlNob3duIiwiYWN0aXZlVGFiV0giLCJnZXRTY3JvbGxXSCIsIm5hdldyYXBOb2RlV0giLCJnZXRPZmZzZXRXSCIsIm9mZnNldCIsIndyYXBPZmZzZXQiLCJnZXRPZmZzZXRMVCIsImFjdGl2ZVRhYk9mZnNldCIsInNldE9mZnNldCIsIm9uUHJldkNsaWNrIiwibmF2V3JhcE5vZGUiLCJvbk5leHRDbGljayIsImNvbXBvbmVudERpZFVwZGF0ZSIsImRlYm91bmNlZFJlc2l6ZSIsInNldE5leHRQcmV2IiwicmVzaXplRXZlbnQiLCJwcmV2UHJvcHMiLCJuZXh0UHJldiIsInJlbW92ZSIsIm5hdk5vZGUiLCJuYXZUYWJzQ29udGFpbmVyIiwibmF2Tm9kZVdIIiwiY29udGFpbmVyV0giLCJtaW5PZmZzZXQiLCJfc3RhdGUiLCJyZWFsT2Zmc2V0Iiwic2V0TmV4dCIsInNldFByZXYiLCJwcm9wIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiY2hlY2tOZXh0UHJldiIsIk1hdGgiLCJtaW4iLCJuYXZPZmZzZXQiLCJuYXZTdHlsZSIsIm5hbWUiLCJfY2xhc3NuYW1lczIiLCJfY2xhc3NuYW1lczQiLCJfc3RhdGUyIiwic2Nyb2xsQW5pbWF0ZWQiLCJwcmV2SWNvbiIsIm5leHRJY29uIiwic2hvd05leHRQcmV2IiwicHJldkJ1dHRvbiIsInVuc2VsZWN0YWJsZSIsIm9uVHJhbnNpdGlvbkVuZCIsIm5leHRCdXR0b24iLCJuYXZDbGFzc05hbWUiLCJuYXZDbGFzc2VzIiwiZWxlIiwiU2F2ZVJlZiJdLCJtYXBwaW5ncyI6IjJGQUVBQSxPQUFBQyxlQUFBQyxFQUFBLGNBQ0FDLE9BQUEsSUFHQSxJQUVBQyxFQUFBQyxFQUZnQkMsRUFBUSxLQU14QkMsRUFBQUYsRUFGdUJDLEVBQVEsTUFNL0JFLEVBQUFILEVBRnVCQyxFQUFRLE1BTS9CRyxFQUFBSixFQUZvQkMsRUFBUSxNQU01QkksRUFBQUwsRUFGa0NDLEVBQVEsTUFNMUNLLEVBQUFOLEVBRmlCQyxFQUFRLE1BTXpCTSxFQUFBUCxFQUZhQyxFQUFRLElBTXJCTyxFQUFBUixFQUZpQkMsRUFBUSxLQU16QlEsRUFBQVQsRUFGbUJDLEVBQVEsSUFJM0JTLEVBQWFULEVBQVEsS0FFckIsU0FBQUQsRUFBQVcsR0FBc0MsT0FBQUEsS0FBQUMsV0FBQUQsRUFBQSxDQUF1Q0UsUUFBQUYsR0FFN0UsSUFBQUcsRUFBQSxTQUFBQyxHQUdBLFNBQUFELElBRUEsT0FEQSxFQUFBWCxFQUFBLFNBQUFhLEtBQUFGLElBQ0EsRUFBQVQsRUFBQSxTQUFBVyxNQUFBRixFQUFBRyxXQUFBdEIsT0FBQXVCLGVBQUFKLElBQUFLLE1BQUFILEtBQUFJLFlBK0RBLE9BbkVBLEVBQUFkLEVBQUEsU0FBQVEsRUFBQUMsSUFPQSxFQUFBWCxFQUFBLFNBQUFVLEVBQUEsRUFDQU8sSUFBQSxjQUNBdkIsTUFBQSxXQUNBLElBQUF3QixFQUFBTixLQUFBTSxNQUNBQyxFQUFBRCxFQUFBQyxVQUNBQyxFQUFBRixFQUFBRSxTQUNBQyxFQUFBLEdBZUEsT0FiQWxCLEVBQUEsUUFBQW1CLFNBQUFDLFFBQUFILEVBQUEsU0FBQUksR0FDQSxHQUFBQSxFQUFBLENB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TyxJQUNLOU8sRUFBQTdCLFFBQUEsU0FBQTJRLEdBQ0wsZ0JBQUF6UixHQUNBQSxJQUNBMkMsRUFBQThPLEdBQUF6UixLQUxBNEMsRUFRS0YsR0FBQSxFQUFBNUYsRUFBQSxTQUFBNkYsRUFBQUMsR0FTTCxPQTlCQSxFQUFBN0YsRUFBQSxTQUFBeVYsRUFBQWhWLElBd0JBLEVBQUFYLEVBQUEsU0FBQTJWLEVBQUEsRUFDQTFVLElBQUEsU0FDQXZCLE1BQUEsV0FDQSxPQUFBa0IsS0FBQU0sTUFBQUUsU0FBQVIsS0FBQXFELFFBQUFyRCxLQUFBc0QsWUFHQXlSLEVBL0JBLENBZ0NDeFYsRUFBQSxRQUFBNEMsV0FFRHRELEVBQUEsUUFBQWtXLEVBR0FBLEVBQUEzUyxVQUFBLENBQ0E1QixTQUFBaEIsRUFBQSxRQUFBK0QsTUFHQXdSLEVBQUF0UyxhQUFBLENBQ0FqQyxTQUFBLFdBQ0EsY0FHQWtDLEVBQUE3RCxVQUFBIiwiZmlsZSI6Im5wbS5yYy10YWJzLmNodW5raGFzaC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5Jyk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmaW5lUHJvcGVydHkyKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfY2xhc3NuYW1lczIgPSByZXF1aXJlKCdjbGFzc25hbWVzJyk7XG5cbnZhciBfY2xhc3NuYW1lczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzMik7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIFRhYkNvbnRlbnQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzM1snZGVmYXVsdCddKShUYWJDb250ZW50LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWJDb250ZW50KCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szWydkZWZhdWx0J10pKHRoaXMsIFRhYkNvbnRlbnQpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zWydkZWZhdWx0J10pKHRoaXMsIChUYWJDb250ZW50Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGFiQ29udGVudCkpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczNbJ2RlZmF1bHQnXSkoVGFiQ29udGVudCwgW3tcbiAgICBrZXk6ICdnZXRUYWJQYW5lcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRhYlBhbmVzKCkge1xuICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgIHZhciBhY3RpdmVLZXkgPSBwcm9wcy5hY3RpdmVLZXk7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciBuZXdDaGlsZHJlbiA9IFtdO1xuXG4gICAgICBfcmVhY3QyWydkZWZhdWx0J10uQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmICghY2hpbGQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGtleSA9IGNoaWxkLmtleTtcbiAgICAgICAgdmFyIGFjdGl2ZSA9IGFjdGl2ZUtleSA9PT0ga2V5O1xuICAgICAgICBuZXdDaGlsZHJlbi5wdXNoKF9yZWFjdDJbJ2RlZmF1bHQnXS5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcbiAgICAgICAgICBhY3RpdmU6IGFjdGl2ZSxcbiAgICAgICAgICBkZXN0cm95SW5hY3RpdmVUYWJQYW5lOiBwcm9wcy5kZXN0cm95SW5hY3RpdmVUYWJQYW5lLFxuICAgICAgICAgIHJvb3RQcmVmaXhDbHM6IHByb3BzLnByZWZpeENsc1xuICAgICAgICB9KSk7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG5ld0NoaWxkcmVuO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfY2xhc3NuYW1lcztcblxuICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgIHZhciBwcmVmaXhDbHMgPSBwcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgICAgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICBhY3RpdmVLZXkgPSBwcm9wcy5hY3RpdmVLZXksXG4gICAgICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIHRhYkJhclBvc2l0aW9uID0gcHJvcHMudGFiQmFyUG9zaXRpb24sXG4gICAgICAgICAgYW5pbWF0ZWQgPSBwcm9wcy5hbmltYXRlZCxcbiAgICAgICAgICBhbmltYXRlZFdpdGhNYXJnaW4gPSBwcm9wcy5hbmltYXRlZFdpdGhNYXJnaW47XG4gICAgICB2YXIgc3R5bGUgPSBwcm9wcy5zdHlsZTtcblxuICAgICAgdmFyIGNsYXNzZXMgPSAoMCwgX2NsYXNzbmFtZXMzWydkZWZhdWx0J10pKChfY2xhc3NuYW1lcyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5M1snZGVmYXVsdCddKShfY2xhc3NuYW1lcywgcHJlZml4Q2xzICsgJy1jb250ZW50JywgdHJ1ZSksICgwLCBfZGVmaW5lUHJvcGVydHkzWydkZWZhdWx0J10pKF9jbGFzc25hbWVzLCBhbmltYXRlZCA/IHByZWZpeENscyArICctY29udGVudC1hbmltYXRlZCcgOiBwcmVmaXhDbHMgKyAnLWNvbnRlbnQtbm8tYW5pbWF0ZWQnLCB0cnVlKSwgX2NsYXNzbmFtZXMpLCBjbGFzc05hbWUpO1xuICAgICAgaWYgKGFuaW1hdGVkKSB7XG4gICAgICAgIHZhciBhY3RpdmVJbmRleCA9ICgwLCBfdXRpbHMuZ2V0QWN0aXZlSW5kZXgpKGNoaWxkcmVuLCBhY3RpdmVLZXkpO1xuICAgICAgICBpZiAoYWN0aXZlSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgdmFyIGFuaW1hdGVkU3R5bGUgPSBhbmltYXRlZFdpdGhNYXJnaW4gPyAoMCwgX3V0aWxzLmdldE1hcmdpblN0eWxlKShhY3RpdmVJbmRleCwgdGFiQmFyUG9zaXRpb24pIDogKDAsIF91dGlscy5nZXRUcmFuc2Zvcm1Qcm9wVmFsdWUpKCgwLCBfdXRpbHMuZ2V0VHJhbnNmb3JtQnlJbmRleCkoYWN0aXZlSW5kZXgsIHRhYkJhclBvc2l0aW9uKSk7XG4gICAgICAgICAgc3R5bGUgPSAoMCwgX2V4dGVuZHMzWydkZWZhdWx0J10pKHt9LCBzdHlsZSwgYW5pbWF0ZWRTdHlsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3R5bGUgPSAoMCwgX2V4dGVuZHMzWydkZWZhdWx0J10pKHt9LCBzdHlsZSwge1xuICAgICAgICAgICAgZGlzcGxheTogJ25vbmUnXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgICAgc3R5bGU6IHN0eWxlXG4gICAgICAgIH0sXG4gICAgICAgIHRoaXMuZ2V0VGFiUGFuZXMoKVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFRhYkNvbnRlbnQ7XG59KF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBUYWJDb250ZW50O1xuXG5cblRhYkNvbnRlbnQucHJvcFR5cGVzID0ge1xuICBhbmltYXRlZDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ib29sLFxuICBhbmltYXRlZFdpdGhNYXJnaW46IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgcHJlZml4Q2xzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZyxcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubm9kZSxcbiAgYWN0aXZlS2V5OiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZyxcbiAgc3R5bGU6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYW55LFxuICB0YWJCYXJQb3NpdGlvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmdcbn07XG5cblRhYkNvbnRlbnQuZGVmYXVsdFByb3BzID0ge1xuICBhbmltYXRlZDogdHJ1ZVxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJyk7XG5cbnZhciBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMyKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfSW5rVGFiQmFyTm9kZSA9IHJlcXVpcmUoJy4vSW5rVGFiQmFyTm9kZScpO1xuXG52YXIgX0lua1RhYkJhck5vZGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfSW5rVGFiQmFyTm9kZSk7XG5cbnZhciBfVGFiQmFyVGFic05vZGUgPSByZXF1aXJlKCcuL1RhYkJhclRhYnNOb2RlJyk7XG5cbnZhciBfVGFiQmFyVGFic05vZGUyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfVGFiQmFyVGFic05vZGUpO1xuXG52YXIgX1RhYkJhclJvb3ROb2RlID0gcmVxdWlyZSgnLi9UYWJCYXJSb290Tm9kZScpO1xuXG52YXIgX1RhYkJhclJvb3ROb2RlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX1RhYkJhclJvb3ROb2RlKTtcblxudmFyIF9TY3JvbGxhYmxlVGFiQmFyTm9kZSA9IHJlcXVpcmUoJy4vU2Nyb2xsYWJsZVRhYkJhck5vZGUnKTtcblxudmFyIF9TY3JvbGxhYmxlVGFiQmFyTm9kZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9TY3JvbGxhYmxlVGFiQmFyTm9kZSk7XG5cbnZhciBfU2F2ZVJlZiA9IHJlcXVpcmUoJy4vU2F2ZVJlZicpO1xuXG52YXIgX1NhdmVSZWYyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfU2F2ZVJlZik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIFNjcm9sbGFibGVJbmtUYWJCYXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzM1snZGVmYXVsdCddKShTY3JvbGxhYmxlSW5rVGFiQmFyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTY3JvbGxhYmxlSW5rVGFiQmFyKCkge1xuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szWydkZWZhdWx0J10pKHRoaXMsIFNjcm9sbGFibGVJbmtUYWJCYXIpO1xuICAgIHJldHVybiAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zWydkZWZhdWx0J10pKHRoaXMsIChTY3JvbGxhYmxlSW5rVGFiQmFyLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoU2Nyb2xsYWJsZUlua1RhYkJhcikpLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgKDAsIF9jcmVhdGVDbGFzczNbJ2RlZmF1bHQnXSkoU2Nyb2xsYWJsZUlua1RhYkJhciwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICByZW5kZXJUYWJCYXJOb2RlID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIHJlc3RQcm9wcyA9ICgwLCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMzWydkZWZhdWx0J10pKF9wcm9wcywgWydjaGlsZHJlbiddKTtcblxuXG4gICAgICByZXR1cm4gX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIF9TYXZlUmVmMlsnZGVmYXVsdCddLFxuICAgICAgICBudWxsLFxuICAgICAgICBmdW5jdGlvbiAoc2F2ZVJlZiwgZ2V0UmVmKSB7XG4gICAgICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgX1RhYkJhclJvb3ROb2RlMlsnZGVmYXVsdCddLFxuICAgICAgICAgICAgKDAsIF9leHRlbmRzM1snZGVmYXVsdCddKSh7IHNhdmVSZWY6IHNhdmVSZWYgfSwgcmVzdFByb3BzKSxcbiAgICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICBfU2Nyb2xsYWJsZVRhYkJhck5vZGUyWydkZWZhdWx0J10sXG4gICAgICAgICAgICAgICgwLCBfZXh0ZW5kczNbJ2RlZmF1bHQnXSkoeyBzYXZlUmVmOiBzYXZlUmVmLCBnZXRSZWY6IGdldFJlZiB9LCByZXN0UHJvcHMpLFxuICAgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfVGFiQmFyVGFic05vZGUyWydkZWZhdWx0J10sICgwLCBfZXh0ZW5kczNbJ2RlZmF1bHQnXSkoeyBzYXZlUmVmOiBzYXZlUmVmLCByZW5kZXJUYWJCYXJOb2RlOiByZW5kZXJUYWJCYXJOb2RlIH0sIHJlc3RQcm9wcykpLFxuICAgICAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChfSW5rVGFiQmFyTm9kZTJbJ2RlZmF1bHQnXSwgKDAsIF9leHRlbmRzM1snZGVmYXVsdCddKSh7IHNhdmVSZWY6IHNhdmVSZWYsIGdldFJlZjogZ2V0UmVmIH0sIHJlc3RQcm9wcykpXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcbiAgcmV0dXJuIFNjcm9sbGFibGVJbmtUYWJCYXI7XG59KF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpOyAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC9wcmVmZXItc3RhdGVsZXNzLWZ1bmN0aW9uICovXG5cblxuZXhwb3J0c1snZGVmYXVsdCddID0gU2Nyb2xsYWJsZUlua1RhYkJhcjtcblxuXG5TY3JvbGxhYmxlSW5rVGFiQmFyLnByb3BUeXBlcyA9IHtcbiAgY2hpbGRyZW46IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuY1xufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsImV4cG9ydCBkZWZhdWx0IHtcbiAgLyoqXG4gICAqIExFRlRcbiAgICovXG4gIExFRlQ6IDM3LCAvLyBhbHNvIE5VTV9XRVNUXG4gIC8qKlxuICAgKiBVUFxuICAgKi9cbiAgVVA6IDM4LCAvLyBhbHNvIE5VTV9OT1JUSFxuICAvKipcbiAgICogUklHSFRcbiAgICovXG4gIFJJR0hUOiAzOSwgLy8gYWxzbyBOVU1fRUFTVFxuICAvKipcbiAgICogRE9XTlxuICAgKi9cbiAgRE9XTjogNDAgLy8gYWxzbyBOVU1fU09VVEhcbn07IiwiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuZXhwb3J0IGZ1bmN0aW9uIHRvQXJyYXkoY2hpbGRyZW4pIHtcbiAgLy8gYWxsb3cgW2MsW2EsYl1dXG4gIHZhciBjID0gW107XG4gIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmIChjaGlsZCkge1xuICAgICAgYy5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFjdGl2ZUluZGV4KGNoaWxkcmVuLCBhY3RpdmVLZXkpIHtcbiAgdmFyIGMgPSB0b0FycmF5KGNoaWxkcmVuKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGNbaV0ua2V5ID09PSBhY3RpdmVLZXkpIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBY3RpdmVLZXkoY2hpbGRyZW4sIGluZGV4KSB7XG4gIHZhciBjID0gdG9BcnJheShjaGlsZHJlbik7XG4gIHJldHVybiBjW2luZGV4XS5rZXk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRUcmFuc2Zvcm0oc3R5bGUsIHYpIHtcbiAgc3R5bGUudHJhbnNmb3JtID0gdjtcbiAgc3R5bGUud2Via2l0VHJhbnNmb3JtID0gdjtcbiAgc3R5bGUubW96VHJhbnNmb3JtID0gdjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVHJhbnNmb3JtU3VwcG9ydGVkKHN0eWxlKSB7XG4gIHJldHVybiAndHJhbnNmb3JtJyBpbiBzdHlsZSB8fCAnd2Via2l0VHJhbnNmb3JtJyBpbiBzdHlsZSB8fCAnTW96VHJhbnNmb3JtJyBpbiBzdHlsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldFRyYW5zaXRpb24oc3R5bGUsIHYpIHtcbiAgc3R5bGUudHJhbnNpdGlvbiA9IHY7XG4gIHN0eWxlLndlYmtpdFRyYW5zaXRpb24gPSB2O1xuICBzdHlsZS5Nb3pUcmFuc2l0aW9uID0gdjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1Qcm9wVmFsdWUodikge1xuICByZXR1cm4ge1xuICAgIHRyYW5zZm9ybTogdixcbiAgICBXZWJraXRUcmFuc2Zvcm06IHYsXG4gICAgTW96VHJhbnNmb3JtOiB2XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZlcnRpY2FsKHRhYkJhclBvc2l0aW9uKSB7XG4gIHJldHVybiB0YWJCYXJQb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHRhYkJhclBvc2l0aW9uID09PSAncmlnaHQnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VHJhbnNmb3JtQnlJbmRleChpbmRleCwgdGFiQmFyUG9zaXRpb24pIHtcbiAgdmFyIHRyYW5zbGF0ZSA9IGlzVmVydGljYWwodGFiQmFyUG9zaXRpb24pID8gJ3RyYW5zbGF0ZVknIDogJ3RyYW5zbGF0ZVgnO1xuICByZXR1cm4gdHJhbnNsYXRlICsgJygnICsgLWluZGV4ICogMTAwICsgJyUpIHRyYW5zbGF0ZVooMCknO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TWFyZ2luU3R5bGUoaW5kZXgsIHRhYkJhclBvc2l0aW9uKSB7XG4gIHZhciBtYXJnaW5EaXJlY3Rpb24gPSBpc1ZlcnRpY2FsKHRhYkJhclBvc2l0aW9uKSA/ICdtYXJnaW5Ub3AnIDogJ21hcmdpbkxlZnQnO1xuICByZXR1cm4gX2RlZmluZVByb3BlcnR5KHt9LCBtYXJnaW5EaXJlY3Rpb24sIC1pbmRleCAqIDEwMCArICclJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdHlsZShlbCwgcHJvcGVydHkpIHtcbiAgcmV0dXJuICt3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSkucmVwbGFjZSgncHgnLCAnJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRQeFN0eWxlKGVsLCB2YWx1ZSwgdmVydGljYWwpIHtcbiAgdmFsdWUgPSB2ZXJ0aWNhbCA/ICcwcHgsICcgKyB2YWx1ZSArICdweCwgMHB4JyA6IHZhbHVlICsgJ3B4LCAwcHgsIDBweCc7XG4gIHNldFRyYW5zZm9ybShlbC5zdHlsZSwgJ3RyYW5zbGF0ZTNkKCcgKyB2YWx1ZSArICcpJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRhQXR0cihwcm9wcykge1xuICByZXR1cm4gT2JqZWN0LmtleXMocHJvcHMpLnJlZHVjZShmdW5jdGlvbiAocHJldiwga2V5KSB7XG4gICAgaWYgKGtleS5zdWJzdHIoMCwgNSkgPT09ICdhcmlhLScgfHwga2V5LnN1YnN0cigwLCA1KSA9PT0gJ2RhdGEtJyB8fCBrZXkgPT09ICdyb2xlJykge1xuICAgICAgcHJldltrZXldID0gcHJvcHNba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIHByZXY7XG4gIH0sIHt9KTtcbn1cblxuZnVuY3Rpb24gdG9OdW0oc3R5bGUsIHByb3BlcnR5KSB7XG4gIHJldHVybiArc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSkucmVwbGFjZSgncHgnLCAnJyk7XG59XG5cbmZ1bmN0aW9uIGdldFR5cGVWYWx1ZShzdGFydCwgY3VycmVudCwgZW5kLCB0YWJOb2RlLCB3cmFwcGVyTm9kZSkge1xuICB2YXIgdG90YWwgPSBnZXRTdHlsZSh3cmFwcGVyTm9kZSwgJ3BhZGRpbmctJyArIHN0YXJ0KTtcbiAgaWYgKCF0YWJOb2RlIHx8ICF0YWJOb2RlLnBhcmVudE5vZGUpIHtcbiAgICByZXR1cm4gdG90YWw7XG4gIH1cblxuICB2YXIgY2hpbGROb2RlcyA9IHRhYk5vZGUucGFyZW50Tm9kZS5jaGlsZE5vZGVzO1xuXG4gIEFycmF5LnByb3RvdHlwZS5zb21lLmNhbGwoY2hpbGROb2RlcywgZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgc3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcblxuICAgIGlmIChub2RlICE9PSB0YWJOb2RlKSB7XG4gICAgICB0b3RhbCArPSB0b051bShzdHlsZSwgJ21hcmdpbi0nICsgc3RhcnQpO1xuICAgICAgdG90YWwgKz0gbm9kZVtjdXJyZW50XTtcbiAgICAgIHRvdGFsICs9IHRvTnVtKHN0eWxlLCAnbWFyZ2luLScgKyBlbmQpO1xuXG4gICAgICBpZiAoc3R5bGUuYm94U2l6aW5nID09PSAnY29udGVudC1ib3gnKSB7XG4gICAgICAgIHRvdGFsICs9IHRvTnVtKHN0eWxlLCAnYm9yZGVyLScgKyBzdGFydCArICctd2lkdGgnKSArIHRvTnVtKHN0eWxlLCAnYm9yZGVyLScgKyBlbmQgKyAnLXdpZHRoJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gV2UgbmVlZCBjb3VudCBjdXJyZW50IG5vZGUgbWFyZ2luXG4gICAgLy8gcmVmOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtY29tcG9uZW50L3RhYnMvcHVsbC8xMzkjaXNzdWVjb21tZW50LTQzMTAwNTI2MlxuICAgIHRvdGFsICs9IHRvTnVtKHN0eWxlLCAnbWFyZ2luLScgKyBzdGFydCk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIHRvdGFsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGVmdCh0YWJOb2RlLCB3cmFwcGVyTm9kZSkge1xuICByZXR1cm4gZ2V0VHlwZVZhbHVlKCdsZWZ0JywgJ29mZnNldFdpZHRoJywgJ3JpZ2h0JywgdGFiTm9kZSwgd3JhcHBlck5vZGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9wKHRhYk5vZGUsIHdyYXBwZXJOb2RlKSB7XG4gIHJldHVybiBnZXRUeXBlVmFsdWUoJ3RvcCcsICdvZmZzZXRIZWlnaHQnLCAnYm90dG9tJywgdGFiTm9kZSwgd3JhcHBlck5vZGUpO1xufSIsImltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG4vKiBlc2xpbnQtZGlzYWJsZSBqc3gtYTExeS9uby1ub25pbnRlcmFjdGl2ZS10YWJpbmRleCAqL1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgS2V5Q29kZSBmcm9tICdyYy11dGlsL2VzL0tleUNvZGUnO1xuaW1wb3J0IGNyZWF0ZVJlYWN0Q29udGV4dCBmcm9tICdjcmVhdGUtcmVhY3QtY29udGV4dCc7XG5cbnZhciBTZW50aW5lbENvbnRleHQgPSBjcmVhdGVSZWFjdENvbnRleHQoe30pO1xuZXhwb3J0IHZhciBTZW50aW5lbFByb3ZpZGVyID0gU2VudGluZWxDb250ZXh0LlByb3ZpZGVyO1xuZXhwb3J0IHZhciBTZW50aW5lbENvbnN1bWVyID0gU2VudGluZWxDb250ZXh0LkNvbnN1bWVyO1xuXG52YXIgc2VudGluZWxTdHlsZSA9IHsgd2lkdGg6IDAsIGhlaWdodDogMCwgb3ZlcmZsb3c6ICdoaWRkZW4nLCBwb3NpdGlvbjogJ2Fic29sdXRlJyB9O1xuXG52YXIgU2VudGluZWwgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoU2VudGluZWwsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFNlbnRpbmVsKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTZW50aW5lbCk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gU2VudGluZWwuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihTZW50aW5lbCkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLm9uS2V5RG93biA9IGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgdmFyIHRhcmdldCA9IF9yZWYyLnRhcmdldCxcbiAgICAgICAgICB3aGljaCA9IF9yZWYyLndoaWNoLFxuICAgICAgICAgIHNoaWZ0S2V5ID0gX3JlZjIuc2hpZnRLZXk7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBuZXh0RWxlbWVudCA9IF90aGlzJHByb3BzLm5leHRFbGVtZW50LFxuICAgICAgICAgIHByZXZFbGVtZW50ID0gX3RoaXMkcHJvcHMucHJldkVsZW1lbnQ7XG5cbiAgICAgIGlmICh3aGljaCAhPT0gS2V5Q29kZS5UQUIgfHwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gdGFyZ2V0KSByZXR1cm47XG5cbiAgICAgIC8vIFRhYiBuZXh0XG4gICAgICBpZiAoIXNoaWZ0S2V5ICYmIG5leHRFbGVtZW50KSB7XG4gICAgICAgIG5leHRFbGVtZW50LmZvY3VzKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFRhYiBwcmV2XG4gICAgICBpZiAoc2hpZnRLZXkgJiYgcHJldkVsZW1lbnQpIHtcbiAgICAgICAgcHJldkVsZW1lbnQuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIF9jcmVhdGVDbGFzcyhTZW50aW5lbCwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgc2V0UmVmID0gdGhpcy5wcm9wcy5zZXRSZWY7XG5cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgdGFiSW5kZXg6IDAsXG4gICAgICAgIHJlZjogc2V0UmVmLFxuICAgICAgICBzdHlsZTogc2VudGluZWxTdHlsZSxcbiAgICAgICAgb25LZXlEb3duOiB0aGlzLm9uS2V5RG93bixcbiAgICAgICAgcm9sZTogJ3ByZXNlbnRhdGlvbidcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBTZW50aW5lbDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuU2VudGluZWwucHJvcFR5cGVzID0ge1xuICBzZXRSZWY6IFByb3BUeXBlcy5mdW5jLFxuICBwcmV2RWxlbWVudDogUHJvcFR5cGVzLm9iamVjdCxcbiAgbmV4dEVsZW1lbnQ6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5leHBvcnQgZGVmYXVsdCBTZW50aW5lbDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknO1xuaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvb2JqZWN0V2l0aG91dFByb3BlcnRpZXMnO1xuaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snO1xuaW1wb3J0IF9jcmVhdGVDbGFzcyBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnO1xuaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJztcbmltcG9ydCBfaW5oZXJpdHMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNsYXNzbmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgeyBnZXREYXRhQXR0ciB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IFNlbnRpbmVsLCB7IFNlbnRpbmVsQ29uc3VtZXIgfSBmcm9tICcuL1NlbnRpbmVsJztcblxudmFyIFRhYlBhbmUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVGFiUGFuZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFiUGFuZSgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFiUGFuZSk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRhYlBhbmUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUYWJQYW5lKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGFiUGFuZSwgW3tcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX2NsYXNzbmFtZXM7XG5cbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIGlkID0gX3Byb3BzLmlkLFxuICAgICAgICAgIGNsYXNzTmFtZSA9IF9wcm9wcy5jbGFzc05hbWUsXG4gICAgICAgICAgZGVzdHJveUluYWN0aXZlVGFiUGFuZSA9IF9wcm9wcy5kZXN0cm95SW5hY3RpdmVUYWJQYW5lLFxuICAgICAgICAgIGFjdGl2ZSA9IF9wcm9wcy5hY3RpdmUsXG4gICAgICAgICAgZm9yY2VSZW5kZXIgPSBfcHJvcHMuZm9yY2VSZW5kZXIsXG4gICAgICAgICAgcm9vdFByZWZpeENscyA9IF9wcm9wcy5yb290UHJlZml4Q2xzLFxuICAgICAgICAgIHN0eWxlID0gX3Byb3BzLnN0eWxlLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICAgIHBsYWNlaG9sZGVyID0gX3Byb3BzLnBsYWNlaG9sZGVyLFxuICAgICAgICAgIHJlc3RQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnaWQnLCAnY2xhc3NOYW1lJywgJ2Rlc3Ryb3lJbmFjdGl2ZVRhYlBhbmUnLCAnYWN0aXZlJywgJ2ZvcmNlUmVuZGVyJywgJ3Jvb3RQcmVmaXhDbHMnLCAnc3R5bGUnLCAnY2hpbGRyZW4nLCAncGxhY2Vob2xkZXInXSk7XG5cbiAgICAgIHRoaXMuX2lzQWN0aXZlZCA9IHRoaXMuX2lzQWN0aXZlZCB8fCBhY3RpdmU7XG4gICAgICB2YXIgcHJlZml4Q2xzID0gcm9vdFByZWZpeENscyArICctdGFicGFuZSc7XG4gICAgICB2YXIgY2xzID0gY2xhc3NuYW1lcygoX2NsYXNzbmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc25hbWVzLCBwcmVmaXhDbHMsIDEpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzbmFtZXMsIHByZWZpeENscyArICctaW5hY3RpdmUnLCAhYWN0aXZlKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc25hbWVzLCBwcmVmaXhDbHMgKyAnLWFjdGl2ZScsIGFjdGl2ZSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NuYW1lcywgY2xhc3NOYW1lLCBjbGFzc05hbWUpLCBfY2xhc3NuYW1lcykpO1xuICAgICAgdmFyIGlzUmVuZGVyID0gZGVzdHJveUluYWN0aXZlVGFiUGFuZSA/IGFjdGl2ZSA6IHRoaXMuX2lzQWN0aXZlZDtcbiAgICAgIHZhciBzaG91bGRSZW5kZXIgPSBpc1JlbmRlciB8fCBmb3JjZVJlbmRlcjtcblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFNlbnRpbmVsQ29uc3VtZXIsXG4gICAgICAgIG51bGwsXG4gICAgICAgIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgdmFyIHNlbnRpbmVsU3RhcnQgPSBfcmVmLnNlbnRpbmVsU3RhcnQsXG4gICAgICAgICAgICAgIHNlbnRpbmVsRW5kID0gX3JlZi5zZW50aW5lbEVuZCxcbiAgICAgICAgICAgICAgc2V0UGFuZWxTZW50aW5lbFN0YXJ0ID0gX3JlZi5zZXRQYW5lbFNlbnRpbmVsU3RhcnQsXG4gICAgICAgICAgICAgIHNldFBhbmVsU2VudGluZWxFbmQgPSBfcmVmLnNldFBhbmVsU2VudGluZWxFbmQ7XG5cbiAgICAgICAgICAvLyBDcmVhdGUgc2VudGluZWxcbiAgICAgICAgICB2YXIgcGFuZWxTZW50aW5lbFN0YXJ0ID0gdm9pZCAwO1xuICAgICAgICAgIHZhciBwYW5lbFNlbnRpbmVsRW5kID0gdm9pZCAwO1xuICAgICAgICAgIGlmIChhY3RpdmUgJiYgc2hvdWxkUmVuZGVyKSB7XG4gICAgICAgICAgICBwYW5lbFNlbnRpbmVsU3RhcnQgPSBSZWFjdC5jcmVhdGVFbGVtZW50KFNlbnRpbmVsLCB7XG4gICAgICAgICAgICAgIHNldFJlZjogc2V0UGFuZWxTZW50aW5lbFN0YXJ0LFxuICAgICAgICAgICAgICBwcmV2RWxlbWVudDogc2VudGluZWxTdGFydFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBwYW5lbFNlbnRpbmVsRW5kID0gUmVhY3QuY3JlYXRlRWxlbWVudChTZW50aW5lbCwge1xuICAgICAgICAgICAgICBzZXRSZWY6IHNldFBhbmVsU2VudGluZWxFbmQsXG4gICAgICAgICAgICAgIG5leHRFbGVtZW50OiBzZW50aW5lbEVuZFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgICAgICAgICByb2xlOiAndGFicGFuZWwnLFxuICAgICAgICAgICAgICAnYXJpYS1oaWRkZW4nOiBhY3RpdmUgPyAnZmFsc2UnIDogJ3RydWUnLFxuICAgICAgICAgICAgICBjbGFzc05hbWU6IGNscyxcbiAgICAgICAgICAgICAgaWQ6IGlkXG4gICAgICAgICAgICB9LCBnZXREYXRhQXR0cihyZXN0UHJvcHMpKSxcbiAgICAgICAgICAgIHBhbmVsU2VudGluZWxTdGFydCxcbiAgICAgICAgICAgIHNob3VsZFJlbmRlciA/IGNoaWxkcmVuIDogcGxhY2Vob2xkZXIsXG4gICAgICAgICAgICBwYW5lbFNlbnRpbmVsRW5kXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gVGFiUGFuZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuZXhwb3J0IGRlZmF1bHQgVGFiUGFuZTtcblxuXG5UYWJQYW5lLnByb3BUeXBlcyA9IHtcbiAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBhY3RpdmU6IFByb3BUeXBlcy5ib29sLFxuICBzdHlsZTogUHJvcFR5cGVzLmFueSxcbiAgZGVzdHJveUluYWN0aXZlVGFiUGFuZTogUHJvcFR5cGVzLmJvb2wsXG4gIGZvcmNlUmVuZGVyOiBQcm9wVHlwZXMuYm9vbCxcbiAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5ub2RlLFxuICByb290UHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIGlkOiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG5UYWJQYW5lLmRlZmF1bHRQcm9wcyA9IHtcbiAgcGxhY2Vob2xkZXI6IG51bGxcbn07IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzJztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHJhZiBmcm9tICdyYWYnO1xuaW1wb3J0IEtleUNvZGUgZnJvbSAnLi9LZXlDb2RlJztcbmltcG9ydCBUYWJQYW5lIGZyb20gJy4vVGFiUGFuZSc7XG5pbXBvcnQgeyBnZXREYXRhQXR0ciB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IFNlbnRpbmVsLCB7IFNlbnRpbmVsUHJvdmlkZXIgfSBmcm9tICcuL1NlbnRpbmVsJztcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBY3RpdmVLZXkocHJvcHMpIHtcbiAgdmFyIGFjdGl2ZUtleSA9IHZvaWQgMDtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChwcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgaWYgKGNoaWxkICYmICFhY3RpdmVLZXkgJiYgIWNoaWxkLnByb3BzLmRpc2FibGVkKSB7XG4gICAgICBhY3RpdmVLZXkgPSBjaGlsZC5rZXk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGFjdGl2ZUtleTtcbn1cblxuZnVuY3Rpb24gYWN0aXZlS2V5SXNWYWxpZChwcm9wcywga2V5KSB7XG4gIHZhciBrZXlzID0gUmVhY3QuQ2hpbGRyZW4ubWFwKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQgJiYgY2hpbGQua2V5O1xuICB9KTtcbiAgcmV0dXJuIGtleXMuaW5kZXhPZihrZXkpID49IDA7XG59XG5cbnZhciBUYWJzID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFRhYnMsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFRhYnMocHJvcHMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFicyk7XG5cbiAgICB2YXIgX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoVGFicy5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFRhYnMpKS5jYWxsKHRoaXMsIHByb3BzKSk7XG5cbiAgICBfaW5pdGlhbGlzZVByb3BzLmNhbGwoX3RoaXMpO1xuXG4gICAgdmFyIGFjdGl2ZUtleSA9IHZvaWQgMDtcbiAgICBpZiAoJ2FjdGl2ZUtleScgaW4gcHJvcHMpIHtcbiAgICAgIGFjdGl2ZUtleSA9IHByb3BzLmFjdGl2ZUtleTtcbiAgICB9IGVsc2UgaWYgKCdkZWZhdWx0QWN0aXZlS2V5JyBpbiBwcm9wcykge1xuICAgICAgYWN0aXZlS2V5ID0gcHJvcHMuZGVmYXVsdEFjdGl2ZUtleTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aXZlS2V5ID0gZ2V0RGVmYXVsdEFjdGl2ZUtleShwcm9wcyk7XG4gICAgfVxuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBhY3RpdmVLZXk6IGFjdGl2ZUtleVxuICAgIH07XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKFRhYnMsIFt7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAoJ2FjdGl2ZUtleScgaW4gbmV4dFByb3BzKSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGl2ZUtleTogbmV4dFByb3BzLmFjdGl2ZUtleVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoIWFjdGl2ZUtleUlzVmFsaWQobmV4dFByb3BzLCB0aGlzLnN0YXRlLmFjdGl2ZUtleSkpIHtcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2FudC1kZXNpZ24vYW50LWRlc2lnbi9pc3N1ZXMvNzA5M1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBhY3RpdmVLZXk6IGdldERlZmF1bHRBY3RpdmVLZXkobmV4dFByb3BzKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnRXaWxsVW5tb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgdGhpcy5kZXN0cm95ID0gdHJ1ZTtcbiAgICAgIHJhZi5jYW5jZWwodGhpcy5zZW50aW5lbElkKTtcbiAgICB9XG5cbiAgICAvLyBTZW50aW5lbCBmb3IgdGFiIGluZGV4XG5cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZVNlbnRpbmVsQ29udGV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZVNlbnRpbmVsQ29udGV4dCgpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICBpZiAodGhpcy5kZXN0cm95KSByZXR1cm47XG5cbiAgICAgIHJhZi5jYW5jZWwodGhpcy5zZW50aW5lbElkKTtcbiAgICAgIHRoaXMuc2VudGluZWxJZCA9IHJhZihmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzMi5mb3JjZVVwZGF0ZSgpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAncmVuZGVyJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgdmFyIF9jbGFzc25hbWVzO1xuXG4gICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuXG4gICAgICB2YXIgcHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICAgIG5hdldyYXBwZXIgPSBwcm9wcy5uYXZXcmFwcGVyLFxuICAgICAgICAgIHRhYkJhclBvc2l0aW9uID0gcHJvcHMudGFiQmFyUG9zaXRpb24sXG4gICAgICAgICAgY2xhc3NOYW1lID0gcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIHJlbmRlclRhYkNvbnRlbnQgPSBwcm9wcy5yZW5kZXJUYWJDb250ZW50LFxuICAgICAgICAgIHJlbmRlclRhYkJhciA9IHByb3BzLnJlbmRlclRhYkJhcixcbiAgICAgICAgICBkZXN0cm95SW5hY3RpdmVUYWJQYW5lID0gcHJvcHMuZGVzdHJveUluYWN0aXZlVGFiUGFuZSxcbiAgICAgICAgICByZXN0UHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFsncHJlZml4Q2xzJywgJ25hdldyYXBwZXInLCAndGFiQmFyUG9zaXRpb24nLCAnY2xhc3NOYW1lJywgJ3JlbmRlclRhYkNvbnRlbnQnLCAncmVuZGVyVGFiQmFyJywgJ2Rlc3Ryb3lJbmFjdGl2ZVRhYlBhbmUnXSk7XG5cbiAgICAgIHZhciBjbHMgPSBjbGFzc25hbWVzKChfY2xhc3NuYW1lcyA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzbmFtZXMsIHByZWZpeENscywgMSksIF9kZWZpbmVQcm9wZXJ0eShfY2xhc3NuYW1lcywgcHJlZml4Q2xzICsgJy0nICsgdGFiQmFyUG9zaXRpb24sIDEpLCBfZGVmaW5lUHJvcGVydHkoX2NsYXNzbmFtZXMsIGNsYXNzTmFtZSwgISFjbGFzc05hbWUpLCBfY2xhc3NuYW1lcykpO1xuXG4gICAgICB0aGlzLnRhYkJhciA9IHJlbmRlclRhYkJhcigpO1xuXG4gICAgICB2YXIgdGFiQmFyID0gUmVhY3QuY2xvbmVFbGVtZW50KHRoaXMudGFiQmFyLCB7XG4gICAgICAgIHByZWZpeENsczogcHJlZml4Q2xzLFxuICAgICAgICBuYXZXcmFwcGVyOiBuYXZXcmFwcGVyLFxuICAgICAgICBrZXk6ICd0YWJCYXInLFxuICAgICAgICBvbktleURvd246IHRoaXMub25OYXZLZXlEb3duLFxuICAgICAgICB0YWJCYXJQb3NpdGlvbjogdGFiQmFyUG9zaXRpb24sXG4gICAgICAgIG9uVGFiQ2xpY2s6IHRoaXMub25UYWJDbGljayxcbiAgICAgICAgcGFuZWxzOiBwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgYWN0aXZlS2V5OiB0aGlzLnN0YXRlLmFjdGl2ZUtleVxuICAgICAgfSk7XG5cbiAgICAgIHZhciB0YWJDb250ZW50ID0gUmVhY3QuY2xvbmVFbGVtZW50KHJlbmRlclRhYkNvbnRlbnQoKSwge1xuICAgICAgICBwcmVmaXhDbHM6IHByZWZpeENscyxcbiAgICAgICAgdGFiQmFyUG9zaXRpb246IHRhYkJhclBvc2l0aW9uLFxuICAgICAgICBhY3RpdmVLZXk6IHRoaXMuc3RhdGUuYWN0aXZlS2V5LFxuICAgICAgICBkZXN0cm95SW5hY3RpdmVUYWJQYW5lOiBkZXN0cm95SW5hY3RpdmVUYWJQYW5lLFxuICAgICAgICBjaGlsZHJlbjogcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgIG9uQ2hhbmdlOiB0aGlzLnNldEFjdGl2ZUtleSxcbiAgICAgICAga2V5OiAndGFiQ29udGVudCdcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgc2VudGluZWxTdGFydCA9IFJlYWN0LmNyZWF0ZUVsZW1lbnQoU2VudGluZWwsIHtcbiAgICAgICAga2V5OiAnc2VudGluZWxTdGFydCcsXG4gICAgICAgIHNldFJlZjogdGhpcy5zZXRTZW50aW5lbFN0YXJ0LFxuICAgICAgICBuZXh0RWxlbWVudDogdGhpcy5wYW5lbFNlbnRpbmVsU3RhcnRcbiAgICAgIH0pO1xuICAgICAgdmFyIHNlbnRpbmVsRW5kID0gUmVhY3QuY3JlYXRlRWxlbWVudChTZW50aW5lbCwge1xuICAgICAgICBrZXk6ICdzZW50aW5lbEVuZCcsXG4gICAgICAgIHNldFJlZjogdGhpcy5zZXRTZW50aW5lbEVuZCxcbiAgICAgICAgcHJldkVsZW1lbnQ6IHRoaXMucGFuZWxTZW50aW5lbEVuZFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBjb250ZW50cyA9IFtdO1xuICAgICAgaWYgKHRhYkJhclBvc2l0aW9uID09PSAnYm90dG9tJykge1xuICAgICAgICBjb250ZW50cy5wdXNoKHNlbnRpbmVsU3RhcnQsIHRhYkNvbnRlbnQsIHNlbnRpbmVsRW5kLCB0YWJCYXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29udGVudHMucHVzaCh0YWJCYXIsIHNlbnRpbmVsU3RhcnQsIHRhYkNvbnRlbnQsIHNlbnRpbmVsRW5kKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIFNlbnRpbmVsUHJvdmlkZXIsXG4gICAgICAgIHtcbiAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgc2VudGluZWxTdGFydDogdGhpcy5zZW50aW5lbFN0YXJ0LFxuICAgICAgICAgICAgc2VudGluZWxFbmQ6IHRoaXMuc2VudGluZWxFbmQsXG4gICAgICAgICAgICBzZXRQYW5lbFNlbnRpbmVsU3RhcnQ6IHRoaXMuc2V0UGFuZWxTZW50aW5lbFN0YXJ0LFxuICAgICAgICAgICAgc2V0UGFuZWxTZW50aW5lbEVuZDogdGhpcy5zZXRQYW5lbFNlbnRpbmVsRW5kXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICdkaXYnLFxuICAgICAgICAgIF9leHRlbmRzKHtcbiAgICAgICAgICAgIGNsYXNzTmFtZTogY2xzLFxuICAgICAgICAgICAgc3R5bGU6IHByb3BzLnN0eWxlXG4gICAgICAgICAgfSwgZ2V0RGF0YUF0dHIocmVzdFByb3BzKSwge1xuICAgICAgICAgICAgb25TY3JvbGw6IHRoaXMub25TY3JvbGxcbiAgICAgICAgICB9KSxcbiAgICAgICAgICBjb250ZW50c1xuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBUYWJzO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG52YXIgX2luaXRpYWxpc2VQcm9wcyA9IGZ1bmN0aW9uIF9pbml0aWFsaXNlUHJvcHMoKSB7XG4gIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gIHRoaXMub25UYWJDbGljayA9IGZ1bmN0aW9uIChhY3RpdmVLZXksIGUpIHtcbiAgICBpZiAoX3RoaXMzLnRhYkJhci5wcm9wcy5vblRhYkNsaWNrKSB7XG4gICAgICBfdGhpczMudGFiQmFyLnByb3BzLm9uVGFiQ2xpY2soYWN0aXZlS2V5LCBlKTtcbiAgICB9XG4gICAgX3RoaXMzLnNldEFjdGl2ZUtleShhY3RpdmVLZXkpO1xuICB9O1xuXG4gIHRoaXMub25OYXZLZXlEb3duID0gZnVuY3Rpb24gKGUpIHtcbiAgICB2YXIgZXZlbnRLZXlDb2RlID0gZS5rZXlDb2RlO1xuICAgIGlmIChldmVudEtleUNvZGUgPT09IEtleUNvZGUuUklHSFQgfHwgZXZlbnRLZXlDb2RlID09PSBLZXlDb2RlLkRPV04pIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHZhciBuZXh0S2V5ID0gX3RoaXMzLmdldE5leHRBY3RpdmVLZXkodHJ1ZSk7XG4gICAgICBfdGhpczMub25UYWJDbGljayhuZXh0S2V5KTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50S2V5Q29kZSA9PT0gS2V5Q29kZS5MRUZUIHx8IGV2ZW50S2V5Q29kZSA9PT0gS2V5Q29kZS5VUCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgdmFyIHByZXZpb3VzS2V5ID0gX3RoaXMzLmdldE5leHRBY3RpdmVLZXkoZmFsc2UpO1xuICAgICAgX3RoaXMzLm9uVGFiQ2xpY2socHJldmlvdXNLZXkpO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLm9uU2Nyb2xsID0gZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgdGFyZ2V0ID0gX3JlZi50YXJnZXQsXG4gICAgICAgIGN1cnJlbnRUYXJnZXQgPSBfcmVmLmN1cnJlbnRUYXJnZXQ7XG5cbiAgICBpZiAodGFyZ2V0ID09PSBjdXJyZW50VGFyZ2V0ICYmIHRhcmdldC5zY3JvbGxMZWZ0ID4gMCkge1xuICAgICAgdGFyZ2V0LnNjcm9sbExlZnQgPSAwO1xuICAgIH1cbiAgfTtcblxuICB0aGlzLnNldFNlbnRpbmVsU3RhcnQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIF90aGlzMy5zZW50aW5lbFN0YXJ0ID0gbm9kZTtcbiAgfTtcblxuICB0aGlzLnNldFNlbnRpbmVsRW5kID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBfdGhpczMuc2VudGluZWxFbmQgPSBub2RlO1xuICB9O1xuXG4gIHRoaXMuc2V0UGFuZWxTZW50aW5lbFN0YXJ0ID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgICBpZiAobm9kZSAhPT0gX3RoaXMzLnBhbmVsU2VudGluZWxTdGFydCkge1xuICAgICAgX3RoaXMzLnVwZGF0ZVNlbnRpbmVsQ29udGV4dCgpO1xuICAgIH1cbiAgICBfdGhpczMucGFuZWxTZW50aW5lbFN0YXJ0ID0gbm9kZTtcbiAgfTtcblxuICB0aGlzLnNldFBhbmVsU2VudGluZWxFbmQgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgIGlmIChub2RlICE9PSBfdGhpczMucGFuZWxTZW50aW5lbEVuZCkge1xuICAgICAgX3RoaXMzLnVwZGF0ZVNlbnRpbmVsQ29udGV4dCgpO1xuICAgIH1cbiAgICBfdGhpczMucGFuZWxTZW50aW5lbEVuZCA9IG5vZGU7XG4gIH07XG5cbiAgdGhpcy5zZXRBY3RpdmVLZXkgPSBmdW5jdGlvbiAoYWN0aXZlS2V5KSB7XG4gICAgaWYgKF90aGlzMy5zdGF0ZS5hY3RpdmVLZXkgIT09IGFjdGl2ZUtleSkge1xuICAgICAgaWYgKCEoJ2FjdGl2ZUtleScgaW4gX3RoaXMzLnByb3BzKSkge1xuICAgICAgICBfdGhpczMuc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGl2ZUtleTogYWN0aXZlS2V5XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgX3RoaXMzLnByb3BzLm9uQ2hhbmdlKGFjdGl2ZUtleSk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuZ2V0TmV4dEFjdGl2ZUtleSA9IGZ1bmN0aW9uIChuZXh0KSB7XG4gICAgdmFyIGFjdGl2ZUtleSA9IF90aGlzMy5zdGF0ZS5hY3RpdmVLZXk7XG4gICAgdmFyIGNoaWxkcmVuID0gW107XG4gICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChfdGhpczMucHJvcHMuY2hpbGRyZW4sIGZ1bmN0aW9uIChjKSB7XG4gICAgICBpZiAoYyAmJiAhYy5wcm9wcy5kaXNhYmxlZCkge1xuICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgIGNoaWxkcmVuLnB1c2goYyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hpbGRyZW4udW5zaGlmdChjKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHZhciBsZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG4gICAgdmFyIHJldCA9IGxlbmd0aCAmJiBjaGlsZHJlblswXS5rZXk7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQsIGkpIHtcbiAgICAgIGlmIChjaGlsZC5rZXkgPT09IGFjdGl2ZUtleSkge1xuICAgICAgICBpZiAoaSA9PT0gbGVuZ3RoIC0gMSkge1xuICAgICAgICAgIHJldCA9IGNoaWxkcmVuWzBdLmtleTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXQgPSBjaGlsZHJlbltpICsgMV0ua2V5O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJldDtcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRhYnM7XG5cblxuVGFicy5wcm9wVHlwZXMgPSB7XG4gIGRlc3Ryb3lJbmFjdGl2ZVRhYlBhbmU6IFByb3BUeXBlcy5ib29sLFxuICByZW5kZXJUYWJCYXI6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHJlbmRlclRhYkNvbnRlbnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG5hdldyYXBwZXI6IFByb3BUeXBlcy5mdW5jLFxuICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgcHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRhYkJhclBvc2l0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgYWN0aXZlS2V5OiBQcm9wVHlwZXMuc3RyaW5nLFxuICBkZWZhdWx0QWN0aXZlS2V5OiBQcm9wVHlwZXMuc3RyaW5nXG59O1xuXG5UYWJzLmRlZmF1bHRQcm9wcyA9IHtcbiAgcHJlZml4Q2xzOiAncmMtdGFicycsXG4gIGRlc3Ryb3lJbmFjdGl2ZVRhYlBhbmU6IGZhbHNlLFxuICBvbkNoYW5nZTogbm9vcCxcbiAgbmF2V3JhcHBlcjogZnVuY3Rpb24gbmF2V3JhcHBlcihhcmcpIHtcbiAgICByZXR1cm4gYXJnO1xuICB9LFxuICB0YWJCYXJQb3NpdGlvbjogJ3RvcCcsXG4gIGNoaWxkcmVuOiBudWxsLFxuICBzdHlsZToge31cbn07XG5cblRhYnMuVGFiUGFuZSA9IFRhYlBhbmU7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJztcbmltcG9ydCBfZGVmaW5lUHJvcGVydHkgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJztcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJztcbmltcG9ydCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiBmcm9tICdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybic7XG5pbXBvcnQgX2luaGVyaXRzIGZyb20gJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjbGFzc25hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgZ2V0VHJhbnNmb3JtQnlJbmRleCwgZ2V0QWN0aXZlSW5kZXgsIGdldFRyYW5zZm9ybVByb3BWYWx1ZSwgZ2V0TWFyZ2luU3R5bGUgfSBmcm9tICcuL3V0aWxzJztcblxudmFyIFRhYkNvbnRlbnQgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoVGFiQ29udGVudCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gVGFiQ29udGVudCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgVGFiQ29udGVudCk7XG5cbiAgICByZXR1cm4gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKFRhYkNvbnRlbnQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihUYWJDb250ZW50KSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoVGFiQ29udGVudCwgW3tcbiAgICBrZXk6ICdnZXRUYWJQYW5lcycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRhYlBhbmVzKCkge1xuICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcbiAgICAgIHZhciBhY3RpdmVLZXkgPSBwcm9wcy5hY3RpdmVLZXk7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciBuZXdDaGlsZHJlbiA9IFtdO1xuXG4gICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgaWYgKCFjaGlsZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIga2V5ID0gY2hpbGQua2V5O1xuICAgICAgICB2YXIgYWN0aXZlID0gYWN0aXZlS2V5ID09PSBrZXk7XG4gICAgICAgIG5ld0NoaWxkcmVuLnB1c2goUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgICAgYWN0aXZlOiBhY3RpdmUsXG4gICAgICAgICAgZGVzdHJveUluYWN0aXZlVGFiUGFuZTogcHJvcHMuZGVzdHJveUluYWN0aXZlVGFiUGFuZSxcbiAgICAgICAgICByb290UHJlZml4Q2xzOiBwcm9wcy5wcmVmaXhDbHNcbiAgICAgICAgfSkpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBuZXdDaGlsZHJlbjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX2NsYXNzbmFtZXM7XG5cbiAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICB2YXIgcHJlZml4Q2xzID0gcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICAgIGNoaWxkcmVuID0gcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgYWN0aXZlS2V5ID0gcHJvcHMuYWN0aXZlS2V5LFxuICAgICAgICAgIGNsYXNzTmFtZSA9IHByb3BzLmNsYXNzTmFtZSxcbiAgICAgICAgICB0YWJCYXJQb3NpdGlvbiA9IHByb3BzLnRhYkJhclBvc2l0aW9uLFxuICAgICAgICAgIGFuaW1hdGVkID0gcHJvcHMuYW5pbWF0ZWQsXG4gICAgICAgICAgYW5pbWF0ZWRXaXRoTWFyZ2luID0gcHJvcHMuYW5pbWF0ZWRXaXRoTWFyZ2luO1xuICAgICAgdmFyIHN0eWxlID0gcHJvcHMuc3R5bGU7XG5cbiAgICAgIHZhciBjbGFzc2VzID0gY2xhc3NuYW1lcygoX2NsYXNzbmFtZXMgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc25hbWVzLCBwcmVmaXhDbHMgKyAnLWNvbnRlbnQnLCB0cnVlKSwgX2RlZmluZVByb3BlcnR5KF9jbGFzc25hbWVzLCBhbmltYXRlZCA/IHByZWZpeENscyArICctY29udGVudC1hbmltYXRlZCcgOiBwcmVmaXhDbHMgKyAnLWNvbnRlbnQtbm8tYW5pbWF0ZWQnLCB0cnVlKSwgX2NsYXNzbmFtZXMpLCBjbGFzc05hbWUpO1xuICAgICAgaWYgKGFuaW1hdGVkKSB7XG4gICAgICAgIHZhciBhY3RpdmVJbmRleCA9IGdldEFjdGl2ZUluZGV4KGNoaWxkcmVuLCBhY3RpdmVLZXkpO1xuICAgICAgICBpZiAoYWN0aXZlSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgdmFyIGFuaW1hdGVkU3R5bGUgPSBhbmltYXRlZFdpdGhNYXJnaW4gPyBnZXRNYXJnaW5TdHlsZShhY3RpdmVJbmRleCwgdGFiQmFyUG9zaXRpb24pIDogZ2V0VHJhbnNmb3JtUHJvcFZhbHVlKGdldFRyYW5zZm9ybUJ5SW5kZXgoYWN0aXZlSW5kZXgsIHRhYkJhclBvc2l0aW9uKSk7XG4gICAgICAgICAgc3R5bGUgPSBfZXh0ZW5kcyh7fSwgc3R5bGUsIGFuaW1hdGVkU3R5bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0eWxlID0gX2V4dGVuZHMoe30sIHN0eWxlLCB7XG4gICAgICAgICAgICBkaXNwbGF5OiAnbm9uZSdcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgICdkaXYnLFxuICAgICAgICB7XG4gICAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgICB9LFxuICAgICAgICB0aGlzLmdldFRhYlBhbmVzKClcbiAgICAgICk7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFRhYkNvbnRlbnQ7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IFRhYkNvbnRlbnQ7XG5cblxuVGFiQ29udGVudC5wcm9wVHlwZXMgPSB7XG4gIGFuaW1hdGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgYW5pbWF0ZWRXaXRoTWFyZ2luOiBQcm9wVHlwZXMuYm9vbCxcbiAgcHJlZml4Q2xzOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIGFjdGl2ZUtleTogUHJvcFR5cGVzLnN0cmluZyxcbiAgc3R5bGU6IFByb3BUeXBlcy5hbnksXG4gIHRhYkJhclBvc2l0aW9uOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmdcbn07XG5cblRhYkNvbnRlbnQuZGVmYXVsdFByb3BzID0ge1xuICBhbmltYXRlZDogdHJ1ZVxufTsiLCJpbXBvcnQgVGFicyBmcm9tICcuL1RhYnMnO1xuaW1wb3J0IFRhYlBhbmUgZnJvbSAnLi9UYWJQYW5lJztcbmltcG9ydCBUYWJDb250ZW50IGZyb20gJy4vVGFiQ29udGVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IFRhYnM7XG5leHBvcnQgeyBUYWJQYW5lLCBUYWJDb250ZW50IH07IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9kZWZpbmVQcm9wZXJ0eScpO1xuXG52YXIgX2RlZmluZVByb3BlcnR5MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmluZVByb3BlcnR5Mik7XG5cbmV4cG9ydHMudG9BcnJheSA9IHRvQXJyYXk7XG5leHBvcnRzLmdldEFjdGl2ZUluZGV4ID0gZ2V0QWN0aXZlSW5kZXg7XG5leHBvcnRzLmdldEFjdGl2ZUtleSA9IGdldEFjdGl2ZUtleTtcbmV4cG9ydHMuc2V0VHJhbnNmb3JtID0gc2V0VHJhbnNmb3JtO1xuZXhwb3J0cy5pc1RyYW5zZm9ybVN1cHBvcnRlZCA9IGlzVHJhbnNmb3JtU3VwcG9ydGVkO1xuZXhwb3J0cy5zZXRUcmFuc2l0aW9uID0gc2V0VHJhbnNpdGlvbjtcbmV4cG9ydHMuZ2V0VHJhbnNmb3JtUHJvcFZhbHVlID0gZ2V0VHJhbnNmb3JtUHJvcFZhbHVlO1xuZXhwb3J0cy5pc1ZlcnRpY2FsID0gaXNWZXJ0aWNhbDtcbmV4cG9ydHMuZ2V0VHJhbnNmb3JtQnlJbmRleCA9IGdldFRyYW5zZm9ybUJ5SW5kZXg7XG5leHBvcnRzLmdldE1hcmdpblN0eWxlID0gZ2V0TWFyZ2luU3R5bGU7XG5leHBvcnRzLmdldFN0eWxlID0gZ2V0U3R5bGU7XG5leHBvcnRzLnNldFB4U3R5bGUgPSBzZXRQeFN0eWxlO1xuZXhwb3J0cy5nZXREYXRhQXR0ciA9IGdldERhdGFBdHRyO1xuZXhwb3J0cy5nZXRMZWZ0ID0gZ2V0TGVmdDtcbmV4cG9ydHMuZ2V0VG9wID0gZ2V0VG9wO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxuZnVuY3Rpb24gdG9BcnJheShjaGlsZHJlbikge1xuICAvLyBhbGxvdyBbYyxbYSxiXV1cbiAgdmFyIGMgPSBbXTtcbiAgX3JlYWN0MlsnZGVmYXVsdCddLkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIGlmIChjaGlsZCkge1xuICAgICAgYy5wdXNoKGNoaWxkKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYztcbn1cblxuZnVuY3Rpb24gZ2V0QWN0aXZlSW5kZXgoY2hpbGRyZW4sIGFjdGl2ZUtleSkge1xuICB2YXIgYyA9IHRvQXJyYXkoY2hpbGRyZW4pO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoY1tpXS5rZXkgPT09IGFjdGl2ZUtleSkge1xuICAgICAgcmV0dXJuIGk7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gZ2V0QWN0aXZlS2V5KGNoaWxkcmVuLCBpbmRleCkge1xuICB2YXIgYyA9IHRvQXJyYXkoY2hpbGRyZW4pO1xuICByZXR1cm4gY1tpbmRleF0ua2V5O1xufVxuXG5mdW5jdGlvbiBzZXRUcmFuc2Zvcm0oc3R5bGUsIHYpIHtcbiAgc3R5bGUudHJhbnNmb3JtID0gdjtcbiAgc3R5bGUud2Via2l0VHJhbnNmb3JtID0gdjtcbiAgc3R5bGUubW96VHJhbnNmb3JtID0gdjtcbn1cblxuZnVuY3Rpb24gaXNUcmFuc2Zvcm1TdXBwb3J0ZWQoc3R5bGUpIHtcbiAgcmV0dXJuICd0cmFuc2Zvcm0nIGluIHN0eWxlIHx8ICd3ZWJraXRUcmFuc2Zvcm0nIGluIHN0eWxlIHx8ICdNb3pUcmFuc2Zvcm0nIGluIHN0eWxlO1xufVxuXG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uKHN0eWxlLCB2KSB7XG4gIHN0eWxlLnRyYW5zaXRpb24gPSB2O1xuICBzdHlsZS53ZWJraXRUcmFuc2l0aW9uID0gdjtcbiAgc3R5bGUuTW96VHJhbnNpdGlvbiA9IHY7XG59XG5mdW5jdGlvbiBnZXRUcmFuc2Zvcm1Qcm9wVmFsdWUodikge1xuICByZXR1cm4ge1xuICAgIHRyYW5zZm9ybTogdixcbiAgICBXZWJraXRUcmFuc2Zvcm06IHYsXG4gICAgTW96VHJhbnNmb3JtOiB2XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzVmVydGljYWwodGFiQmFyUG9zaXRpb24pIHtcbiAgcmV0dXJuIHRhYkJhclBvc2l0aW9uID09PSAnbGVmdCcgfHwgdGFiQmFyUG9zaXRpb24gPT09ICdyaWdodCc7XG59XG5cbmZ1bmN0aW9uIGdldFRyYW5zZm9ybUJ5SW5kZXgoaW5kZXgsIHRhYkJhclBvc2l0aW9uKSB7XG4gIHZhciB0cmFuc2xhdGUgPSBpc1ZlcnRpY2FsKHRhYkJhclBvc2l0aW9uKSA/ICd0cmFuc2xhdGVZJyA6ICd0cmFuc2xhdGVYJztcbiAgcmV0dXJuIHRyYW5zbGF0ZSArICcoJyArIC1pbmRleCAqIDEwMCArICclKSB0cmFuc2xhdGVaKDApJztcbn1cblxuZnVuY3Rpb24gZ2V0TWFyZ2luU3R5bGUoaW5kZXgsIHRhYkJhclBvc2l0aW9uKSB7XG4gIHZhciBtYXJnaW5EaXJlY3Rpb24gPSBpc1ZlcnRpY2FsKHRhYkJhclBvc2l0aW9uKSA/ICdtYXJnaW5Ub3AnIDogJ21hcmdpbkxlZnQnO1xuICByZXR1cm4gKDAsIF9kZWZpbmVQcm9wZXJ0eTNbJ2RlZmF1bHQnXSkoe30sIG1hcmdpbkRpcmVjdGlvbiwgLWluZGV4ICogMTAwICsgJyUnKTtcbn1cblxuZnVuY3Rpb24gZ2V0U3R5bGUoZWwsIHByb3BlcnR5KSB7XG4gIHJldHVybiArd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpLnJlcGxhY2UoJ3B4JywgJycpO1xufVxuXG5mdW5jdGlvbiBzZXRQeFN0eWxlKGVsLCB2YWx1ZSwgdmVydGljYWwpIHtcbiAgdmFsdWUgPSB2ZXJ0aWNhbCA/ICcwcHgsICcgKyB2YWx1ZSArICdweCwgMHB4JyA6IHZhbHVlICsgJ3B4LCAwcHgsIDBweCc7XG4gIHNldFRyYW5zZm9ybShlbC5zdHlsZSwgJ3RyYW5zbGF0ZTNkKCcgKyB2YWx1ZSArICcpJyk7XG59XG5cbmZ1bmN0aW9uIGdldERhdGFBdHRyKHByb3BzKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhwcm9wcykucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBrZXkpIHtcbiAgICBpZiAoa2V5LnN1YnN0cigwLCA1KSA9PT0gJ2FyaWEtJyB8fCBrZXkuc3Vic3RyKDAsIDUpID09PSAnZGF0YS0nIHx8IGtleSA9PT0gJ3JvbGUnKSB7XG4gICAgICBwcmV2W2tleV0gPSBwcm9wc1trZXldO1xuICAgIH1cbiAgICByZXR1cm4gcHJldjtcbiAgfSwge30pO1xufVxuXG5mdW5jdGlvbiB0b051bShzdHlsZSwgcHJvcGVydHkpIHtcbiAgcmV0dXJuICtzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKHByb3BlcnR5KS5yZXBsYWNlKCdweCcsICcnKTtcbn1cblxuZnVuY3Rpb24gZ2V0VHlwZVZhbHVlKHN0YXJ0LCBjdXJyZW50LCBlbmQsIHRhYk5vZGUsIHdyYXBwZXJOb2RlKSB7XG4gIHZhciB0b3RhbCA9IGdldFN0eWxlKHdyYXBwZXJOb2RlLCAncGFkZGluZy0nICsgc3RhcnQpO1xuICBpZiAoIXRhYk5vZGUgfHwgIXRhYk5vZGUucGFyZW50Tm9kZSkge1xuICAgIHJldHVybiB0b3RhbDtcbiAgfVxuXG4gIHZhciBjaGlsZE5vZGVzID0gdGFiTm9kZS5wYXJlbnROb2RlLmNoaWxkTm9kZXM7XG5cbiAgQXJyYXkucHJvdG90eXBlLnNvbWUuY2FsbChjaGlsZE5vZGVzLCBmdW5jdGlvbiAobm9kZSkge1xuICAgIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuXG4gICAgaWYgKG5vZGUgIT09IHRhYk5vZGUpIHtcbiAgICAgIHRvdGFsICs9IHRvTnVtKHN0eWxlLCAnbWFyZ2luLScgKyBzdGFydCk7XG4gICAgICB0b3RhbCArPSBub2RlW2N1cnJlbnRdO1xuICAgICAgdG90YWwgKz0gdG9OdW0oc3R5bGUsICdtYXJnaW4tJyArIGVuZCk7XG5cbiAgICAgIGlmIChzdHlsZS5ib3hTaXppbmcgPT09ICdjb250ZW50LWJveCcpIHtcbiAgICAgICAgdG90YWwgKz0gdG9OdW0oc3R5bGUsICdib3JkZXItJyArIHN0YXJ0ICsgJy13aWR0aCcpICsgdG9OdW0oc3R5bGUsICdib3JkZXItJyArIGVuZCArICctd2lkdGgnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBXZSBuZWVkIGNvdW50IGN1cnJlbnQgbm9kZSBtYXJnaW5cbiAgICAvLyByZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdC1jb21wb25lbnQvdGFicy9wdWxsLzEzOSNpc3N1ZWNvbW1lbnQtNDMxMDA1MjYyXG4gICAgdG90YWwgKz0gdG9OdW0oc3R5bGUsICdtYXJnaW4tJyArIHN0YXJ0KTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9KTtcblxuICByZXR1cm4gdG90YWw7XG59XG5cbmZ1bmN0aW9uIGdldExlZnQodGFiTm9kZSwgd3JhcHBlck5vZGUpIHtcbiAgcmV0dXJuIGdldFR5cGVWYWx1ZSgnbGVmdCcsICdvZmZzZXRXaWR0aCcsICdyaWdodCcsIHRhYk5vZGUsIHdyYXBwZXJOb2RlKTtcbn1cblxuZnVuY3Rpb24gZ2V0VG9wKHRhYk5vZGUsIHdyYXBwZXJOb2RlKSB7XG4gIHJldHVybiBnZXRUeXBlVmFsdWUoJ3RvcCcsICdvZmZzZXRIZWlnaHQnLCAnYm90dG9tJywgdGFiTm9kZSwgd3JhcHBlck5vZGUpO1xufSIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eTIpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjaycpO1xuXG52YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cbnZhciBfY3JlYXRlQ2xhc3MyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzJyk7XG5cbnZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuJyk7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMik7XG5cbnZhciBfaW5oZXJpdHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2luaGVyaXRzJyk7XG5cbnZhciBfaW5oZXJpdHMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW5oZXJpdHMyKTtcblxudmFyIF9yZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG5cbnZhciBfcmVhY3QyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcmVhY3QpO1xuXG52YXIgX3Byb3BUeXBlcyA9IHJlcXVpcmUoJ3Byb3AtdHlwZXMnKTtcblxudmFyIF9wcm9wVHlwZXMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcHJvcFR5cGVzKTtcblxudmFyIF9jbGFzc25hbWVzMiA9IHJlcXVpcmUoJ2NsYXNzbmFtZXMnKTtcblxudmFyIF9jbGFzc25hbWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzbmFtZXMyKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfY29tcG9uZW50RGlkVXBkYXRlKGNvbXBvbmVudCwgaW5pdCkge1xuICB2YXIgX2NvbXBvbmVudCRwcm9wcyA9IGNvbXBvbmVudC5wcm9wcyxcbiAgICAgIHN0eWxlcyA9IF9jb21wb25lbnQkcHJvcHMuc3R5bGVzLFxuICAgICAgcGFuZWxzID0gX2NvbXBvbmVudCRwcm9wcy5wYW5lbHMsXG4gICAgICBhY3RpdmVLZXkgPSBfY29tcG9uZW50JHByb3BzLmFjdGl2ZUtleTtcblxuICB2YXIgcm9vdE5vZGUgPSBjb21wb25lbnQucHJvcHMuZ2V0UmVmKCdyb290Jyk7XG4gIHZhciB3cmFwTm9kZSA9IGNvbXBvbmVudC5wcm9wcy5nZXRSZWYoJ25hdicpIHx8IHJvb3ROb2RlO1xuICB2YXIgaW5rQmFyTm9kZSA9IGNvbXBvbmVudC5wcm9wcy5nZXRSZWYoJ2lua0JhcicpO1xuICB2YXIgYWN0aXZlVGFiID0gY29tcG9uZW50LnByb3BzLmdldFJlZignYWN0aXZlVGFiJyk7XG4gIHZhciBpbmtCYXJOb2RlU3R5bGUgPSBpbmtCYXJOb2RlLnN0eWxlO1xuICB2YXIgdGFiQmFyUG9zaXRpb24gPSBjb21wb25lbnQucHJvcHMudGFiQmFyUG9zaXRpb247XG4gIHZhciBhY3RpdmVJbmRleCA9ICgwLCBfdXRpbHMuZ2V0QWN0aXZlSW5kZXgpKHBhbmVscywgYWN0aXZlS2V5KTtcbiAgaWYgKGluaXQpIHtcbiAgICAvLyBwcmV2ZW50IG1vdW50IGFuaW1hdGlvblxuICAgIGlua0Jhck5vZGVTdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB9XG4gIGlmIChhY3RpdmVUYWIpIHtcbiAgICB2YXIgdGFiTm9kZSA9IGFjdGl2ZVRhYjtcbiAgICB2YXIgdHJhbnNmb3JtU3VwcG9ydGVkID0gKDAsIF91dGlscy5pc1RyYW5zZm9ybVN1cHBvcnRlZCkoaW5rQmFyTm9kZVN0eWxlKTtcblxuICAgIC8vIFJlc2V0IGN1cnJlbnQgc3R5bGVcbiAgICAoMCwgX3V0aWxzLnNldFRyYW5zZm9ybSkoaW5rQmFyTm9kZVN0eWxlLCAnJyk7XG4gICAgaW5rQmFyTm9kZVN0eWxlLndpZHRoID0gJyc7XG4gICAgaW5rQmFyTm9kZVN0eWxlLmhlaWdodCA9ICcnO1xuICAgIGlua0Jhck5vZGVTdHlsZS5sZWZ0ID0gJyc7XG4gICAgaW5rQmFyTm9kZVN0eWxlLnRvcCA9ICcnO1xuICAgIGlua0Jhck5vZGVTdHlsZS5ib3R0b20gPSAnJztcbiAgICBpbmtCYXJOb2RlU3R5bGUucmlnaHQgPSAnJztcblxuICAgIGlmICh0YWJCYXJQb3NpdGlvbiA9PT0gJ3RvcCcgfHwgdGFiQmFyUG9zaXRpb24gPT09ICdib3R0b20nKSB7XG4gICAgICB2YXIgbGVmdCA9ICgwLCBfdXRpbHMuZ2V0TGVmdCkodGFiTm9kZSwgd3JhcE5vZGUpO1xuICAgICAgdmFyIHdpZHRoID0gdGFiTm9kZS5vZmZzZXRXaWR0aDtcblxuICAgICAgLy8gSWYgdGFiTm9kZSd3aWR0aCB3aWR0aCBlcXVhbCB0byB3cmFwTm9kZSd3aWR0aCB3aGVuIHRhYkJhclBvc2l0aW9uIGlzIHRvcCBvciBib3R0b21cbiAgICAgIC8vIEl0IG1lYW5zIG5vIGNzcyB3b3JraW5nLCB0aGVuIGluayBiYXIgc2hvdWxkIG5vdCBoYXZlIHdpZHRoIHVudGlsIGNzcyBpcyBsb2FkZWRcbiAgICAgIC8vIEZpeCBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy83NTY0XG4gICAgICBpZiAod2lkdGggPT09IHJvb3ROb2RlLm9mZnNldFdpZHRoKSB7XG4gICAgICAgIHdpZHRoID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoc3R5bGVzLmlua0JhciAmJiBzdHlsZXMuaW5rQmFyLndpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgd2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlcy5pbmtCYXIud2lkdGgsIDEwKTtcbiAgICAgICAgaWYgKHdpZHRoKSB7XG4gICAgICAgICAgbGVmdCArPSAodGFiTm9kZS5vZmZzZXRXaWR0aCAtIHdpZHRoKSAvIDI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gdXNlIDNkIGdwdSB0byBvcHRpbWl6ZSByZW5kZXJcbiAgICAgIGlmICh0cmFuc2Zvcm1TdXBwb3J0ZWQpIHtcbiAgICAgICAgKDAsIF91dGlscy5zZXRUcmFuc2Zvcm0pKGlua0Jhck5vZGVTdHlsZSwgJ3RyYW5zbGF0ZTNkKCcgKyBsZWZ0ICsgJ3B4LDAsMCknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlua0Jhck5vZGVTdHlsZS5sZWZ0ID0gbGVmdCArICdweCc7XG4gICAgICB9XG4gICAgICBpbmtCYXJOb2RlU3R5bGUud2lkdGggPSB3aWR0aCArICdweCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB0b3AgPSAoMCwgX3V0aWxzLmdldFRvcCkodGFiTm9kZSwgd3JhcE5vZGUsIHRydWUpO1xuICAgICAgdmFyIGhlaWdodCA9IHRhYk5vZGUub2Zmc2V0SGVpZ2h0O1xuICAgICAgaWYgKHN0eWxlcy5pbmtCYXIgJiYgc3R5bGVzLmlua0Jhci5oZWlnaHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBoZWlnaHQgPSBwYXJzZUZsb2F0KHN0eWxlcy5pbmtCYXIuaGVpZ2h0LCAxMCk7XG4gICAgICAgIGlmIChoZWlnaHQpIHtcbiAgICAgICAgICB0b3AgKz0gKHRhYk5vZGUub2Zmc2V0SGVpZ2h0IC0gaGVpZ2h0KSAvIDI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICh0cmFuc2Zvcm1TdXBwb3J0ZWQpIHtcbiAgICAgICAgKDAsIF91dGlscy5zZXRUcmFuc2Zvcm0pKGlua0Jhck5vZGVTdHlsZSwgJ3RyYW5zbGF0ZTNkKDAsJyArIHRvcCArICdweCwwKScpO1xuICAgICAgICBpbmtCYXJOb2RlU3R5bGUudG9wID0gJzAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5rQmFyTm9kZVN0eWxlLnRvcCA9IHRvcCArICdweCc7XG4gICAgICB9XG4gICAgICBpbmtCYXJOb2RlU3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JztcbiAgICB9XG4gIH1cbiAgaW5rQmFyTm9kZVN0eWxlLmRpc3BsYXkgPSBhY3RpdmVJbmRleCAhPT0gLTEgPyAnYmxvY2snIDogJ25vbmUnO1xufVxuXG52YXIgSW5rVGFiQmFyTm9kZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzWydkZWZhdWx0J10pKElua1RhYkJhck5vZGUsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIElua1RhYkJhck5vZGUoKSB7XG4gICAgKDAsIF9jbGFzc0NhbGxDaGVjazNbJ2RlZmF1bHQnXSkodGhpcywgSW5rVGFiQmFyTm9kZSk7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjNbJ2RlZmF1bHQnXSkodGhpcywgKElua1RhYkJhck5vZGUuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihJbmtUYWJCYXJOb2RlKSkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzM1snZGVmYXVsdCddKShJbmtUYWJCYXJOb2RlLCBbe1xuICAgIGtleTogJ2NvbXBvbmVudERpZE1vdW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgICAgLy8gcmVmIGh0dHBzOi8vZ2l0aHViLmNvbS9hbnQtZGVzaWduL2FudC1kZXNpZ24vaXNzdWVzLzg2NzhcbiAgICAgIC8vIHJlZiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3QtY29tcG9uZW50L3RhYnMvaXNzdWVzLzEzNVxuICAgICAgLy8gSW5rVGFiQmFyTm9kZSBuZWVkIHBhcmVudC9yb290IHJlZiBmb3IgY2FsY3VsYXRpbmcgcG9zaXRpb25cbiAgICAgIC8vIHNpbmNlIHBhcmVudCBjb21wb25lbnREaWRNb3VudCB0cmlnZ2VyZWQgYWZ0ZXIgY2hpbGQgY29tcG9uZW50RGlkTW91bnRcbiAgICAgIC8vIHdlJ3JlIGRvaW5nIGEgcXVpY2sgZml4IGhlcmUgdG8gdXNlIHNldFRpbWVvdXQgdG8gY2FsY3VsYXRlIHBvc2l0aW9uXG4gICAgICAvLyBhZnRlciBwYXJlbnQvcm9vdCBjb21wb25lbnQgbW91bnRlZFxuICAgICAgdGhpcy50aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9jb21wb25lbnREaWRVcGRhdGUoX3RoaXMyLCB0cnVlKTtcbiAgICAgIH0sIDApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2NvbXBvbmVudERpZFVwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZSgpIHtcbiAgICAgIF9jb21wb25lbnREaWRVcGRhdGUodGhpcyk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXQpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfY2xhc3NuYW1lcztcblxuICAgICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgICAgcHJlZml4Q2xzID0gX3Byb3BzLnByZWZpeENscyxcbiAgICAgICAgICBzdHlsZXMgPSBfcHJvcHMuc3R5bGVzLFxuICAgICAgICAgIGlua0JhckFuaW1hdGVkID0gX3Byb3BzLmlua0JhckFuaW1hdGVkO1xuXG4gICAgICB2YXIgY2xhc3NOYW1lID0gcHJlZml4Q2xzICsgJy1pbmstYmFyJztcbiAgICAgIHZhciBjbGFzc2VzID0gKDAsIF9jbGFzc25hbWVzM1snZGVmYXVsdCddKSgoX2NsYXNzbmFtZXMgPSB7fSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTNbJ2RlZmF1bHQnXSkoX2NsYXNzbmFtZXMsIGNsYXNzTmFtZSwgdHJ1ZSksICgwLCBfZGVmaW5lUHJvcGVydHkzWydkZWZhdWx0J10pKF9jbGFzc25hbWVzLCBpbmtCYXJBbmltYXRlZCA/IGNsYXNzTmFtZSArICctYW5pbWF0ZWQnIDogY2xhc3NOYW1lICsgJy1uby1hbmltYXRlZCcsIHRydWUpLCBfY2xhc3NuYW1lcykpO1xuICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdkaXYnLCB7XG4gICAgICAgIHN0eWxlOiBzdHlsZXMuaW5rQmFyLFxuICAgICAgICBjbGFzc05hbWU6IGNsYXNzZXMsXG4gICAgICAgIGtleTogJ2lua0JhcicsXG4gICAgICAgIHJlZjogdGhpcy5wcm9wcy5zYXZlUmVmKCdpbmtCYXInKVxuICAgICAgfSk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBJbmtUYWJCYXJOb2RlO1xufShfcmVhY3QyWydkZWZhdWx0J10uQ29tcG9uZW50KTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gSW5rVGFiQmFyTm9kZTtcblxuXG5JbmtUYWJCYXJOb2RlLnByb3BUeXBlcyA9IHtcbiAgcHJlZml4Q2xzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZyxcbiAgc3R5bGVzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9iamVjdCxcbiAgaW5rQmFyQW5pbWF0ZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgc2F2ZVJlZjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jXG59O1xuXG5JbmtUYWJCYXJOb2RlLmRlZmF1bHRQcm9wcyA9IHtcbiAgcHJlZml4Q2xzOiAnJyxcbiAgaW5rQmFyQW5pbWF0ZWQ6IHRydWUsXG4gIHN0eWxlczoge30sXG4gIHNhdmVSZWY6IGZ1bmN0aW9uIHNhdmVSZWYoKSB7fVxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9leHRlbmRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9leHRlbmRzJyk7XG5cbnZhciBfZXh0ZW5kczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9leHRlbmRzMik7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5Jyk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmaW5lUHJvcGVydHkyKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBUYWJCYXJUYWJzTm9kZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzWydkZWZhdWx0J10pKFRhYkJhclRhYnNOb2RlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWJCYXJUYWJzTm9kZSgpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrM1snZGVmYXVsdCddKSh0aGlzLCBUYWJCYXJUYWJzTm9kZSk7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjNbJ2RlZmF1bHQnXSkodGhpcywgKFRhYkJhclRhYnNOb2RlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGFiQmFyVGFic05vZGUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzWydkZWZhdWx0J10pKFRhYkJhclRhYnNOb2RlLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5wYW5lbHMsXG4gICAgICAgICAgYWN0aXZlS2V5ID0gX3Byb3BzLmFjdGl2ZUtleSxcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICAgIHRhYkJhckd1dHRlciA9IF9wcm9wcy50YWJCYXJHdXR0ZXIsXG4gICAgICAgICAgc2F2ZVJlZiA9IF9wcm9wcy5zYXZlUmVmLFxuICAgICAgICAgIHRhYkJhclBvc2l0aW9uID0gX3Byb3BzLnRhYkJhclBvc2l0aW9uLFxuICAgICAgICAgIHJlbmRlclRhYkJhck5vZGUgPSBfcHJvcHMucmVuZGVyVGFiQmFyTm9kZTtcblxuICAgICAgdmFyIHJzdCA9IFtdO1xuXG4gICAgICBfcmVhY3QyWydkZWZhdWx0J10uQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkLCBpbmRleCkge1xuICAgICAgICBpZiAoIWNoaWxkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBrZXkgPSBjaGlsZC5rZXk7XG4gICAgICAgIHZhciBjbHMgPSBhY3RpdmVLZXkgPT09IGtleSA/IHByZWZpeENscyArICctdGFiLWFjdGl2ZScgOiAnJztcbiAgICAgICAgY2xzICs9ICcgJyArIHByZWZpeENscyArICctdGFiJztcbiAgICAgICAgdmFyIGV2ZW50cyA9IHt9O1xuICAgICAgICBpZiAoY2hpbGQucHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgICAgICBjbHMgKz0gJyAnICsgcHJlZml4Q2xzICsgJy10YWItZGlzYWJsZWQnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGV2ZW50cyA9IHtcbiAgICAgICAgICAgIG9uQ2xpY2s6IF90aGlzMi5wcm9wcy5vblRhYkNsaWNrLmJpbmQoX3RoaXMyLCBrZXkpXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVmID0ge307XG4gICAgICAgIGlmIChhY3RpdmVLZXkgPT09IGtleSkge1xuICAgICAgICAgIHJlZi5yZWYgPSBzYXZlUmVmKCdhY3RpdmVUYWInKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBndXR0ZXIgPSB0YWJCYXJHdXR0ZXIgJiYgaW5kZXggPT09IGNoaWxkcmVuLmxlbmd0aCAtIDEgPyAwIDogdGFiQmFyR3V0dGVyO1xuICAgICAgICB2YXIgc3R5bGUgPSAoMCwgX2RlZmluZVByb3BlcnR5M1snZGVmYXVsdCddKSh7fSwgKDAsIF91dGlscy5pc1ZlcnRpY2FsKSh0YWJCYXJQb3NpdGlvbikgPyAnbWFyZ2luQm90dG9tJyA6ICdtYXJnaW5SaWdodCcsIGd1dHRlcik7XG4gICAgICAgICgwLCBfd2FybmluZzJbJ2RlZmF1bHQnXSkoJ3RhYicgaW4gY2hpbGQucHJvcHMsICdUaGVyZSBtdXN0IGJlIGB0YWJgIHByb3BlcnR5IG9uIGNoaWxkcmVuIG9mIFRhYnMuJyk7XG5cbiAgICAgICAgdmFyIG5vZGUgPSBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAoMCwgX2V4dGVuZHMzWydkZWZhdWx0J10pKHtcbiAgICAgICAgICAgIHJvbGU6ICd0YWInLFxuICAgICAgICAgICAgJ2FyaWEtZGlzYWJsZWQnOiBjaGlsZC5wcm9wcy5kaXNhYmxlZCA/ICd0cnVlJyA6ICdmYWxzZScsXG4gICAgICAgICAgICAnYXJpYS1zZWxlY3RlZCc6IGFjdGl2ZUtleSA9PT0ga2V5ID8gJ3RydWUnIDogJ2ZhbHNlJ1xuICAgICAgICAgIH0sIGV2ZW50cywge1xuICAgICAgICAgICAgY2xhc3NOYW1lOiBjbHMsXG4gICAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICAgIHN0eWxlOiBzdHlsZVxuICAgICAgICAgIH0sIHJlZiksXG4gICAgICAgICAgY2hpbGQucHJvcHMudGFiXG4gICAgICAgICk7XG5cbiAgICAgICAgaWYgKHJlbmRlclRhYkJhck5vZGUpIHtcbiAgICAgICAgICBub2RlID0gcmVuZGVyVGFiQmFyTm9kZShub2RlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJzdC5wdXNoKG5vZGUpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHsgcmVmOiBzYXZlUmVmKCduYXZUYWJzQ29udGFpbmVyJykgfSxcbiAgICAgICAgcnN0XG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVGFiQmFyVGFic05vZGU7XG59KF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBUYWJCYXJUYWJzTm9kZTtcblxuXG5UYWJCYXJUYWJzTm9kZS5wcm9wVHlwZXMgPSB7XG4gIGFjdGl2ZUtleTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIHBhbmVsczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ub2RlLFxuICBwcmVmaXhDbHM6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uc3RyaW5nLFxuICB0YWJCYXJHdXR0ZXI6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ubnVtYmVyLFxuICBvblRhYkNsaWNrOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmMsXG4gIHNhdmVSZWY6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgcmVuZGVyVGFiQmFyTm9kZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICB0YWJCYXJQb3NpdGlvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmdcbn07XG5cblRhYkJhclRhYnNOb2RlLmRlZmF1bHRQcm9wcyA9IHtcbiAgcGFuZWxzOiBbXSxcbiAgcHJlZml4Q2xzOiBbXSxcbiAgdGFiQmFyR3V0dGVyOiBudWxsLFxuICBvblRhYkNsaWNrOiBmdW5jdGlvbiBvblRhYkNsaWNrKCkge30sXG4gIHNhdmVSZWY6IGZ1bmN0aW9uIHNhdmVSZWYoKSB7fVxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIi8qKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxNSwgRmFjZWJvb2ssIEluYy5cbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuIEFuIGFkZGl0aW9uYWwgZ3JhbnRcbiAqIG9mIHBhdGVudCByaWdodHMgY2FuIGJlIGZvdW5kIGluIHRoZSBQQVRFTlRTIGZpbGUgaW4gdGhlIHNhbWUgZGlyZWN0b3J5LlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTaW1pbGFyIHRvIGludmFyaWFudCBidXQgb25seSBsb2dzIGEgd2FybmluZyBpZiB0aGUgY29uZGl0aW9uIGlzIG5vdCBtZXQuXG4gKiBUaGlzIGNhbiBiZSB1c2VkIHRvIGxvZyBpc3N1ZXMgaW4gZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzIGluIGNyaXRpY2FsXG4gKiBwYXRocy4gUmVtb3ZpbmcgdGhlIGxvZ2dpbmcgY29kZSBmb3IgcHJvZHVjdGlvbiBlbnZpcm9ubWVudHMgd2lsbCBrZWVwIHRoZVxuICogc2FtZSBsb2dpYyBhbmQgZm9sbG93IHRoZSBzYW1lIGNvZGUgcGF0aHMuXG4gKi9cblxudmFyIHdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAnbWVzc2FnZSBhcmd1bWVudCdcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZvcm1hdC5sZW5ndGggPCAxMCB8fCAoL15bc1xcV10qJC8pLnRlc3QoZm9ybWF0KSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnVGhlIHdhcm5pbmcgZm9ybWF0IHNob3VsZCBiZSBhYmxlIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgJyArXG4gICAgICAgICd3YXJuaW5nLiBQbGVhc2UsIHVzZSBhIG1vcmUgZGVzY3JpcHRpdmUgZm9ybWF0IHRoYW46ICcgKyBmb3JtYXRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKCFjb25kaXRpb24pIHtcbiAgICAgIHZhciBhcmdJbmRleCA9IDA7XG4gICAgICB2YXIgbWVzc2FnZSA9ICdXYXJuaW5nOiAnICtcbiAgICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHJldHVybiBhcmdzW2FyZ0luZGV4KytdO1xuICAgICAgICB9KTtcbiAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgeW91IGNhbiB1c2UgdGhpcyBzdGFja1xuICAgICAgICAvLyB0byBmaW5kIHRoZSBjYWxsc2l0ZSB0aGF0IGNhdXNlZCB0aGlzIHdhcm5pbmcgdG8gZmlyZS5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgICAgfSBjYXRjaCh4KSB7fVxuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB3YXJuaW5nO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnKTtcblxudmFyIF9leHRlbmRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2V4dGVuZHMyKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHknKTtcblxudmFyIF9kZWZpbmVQcm9wZXJ0eTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZpbmVQcm9wZXJ0eTIpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllcycpO1xuXG52YXIgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzMik7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2syID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrJyk7XG5cbnZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblxudmFyIF9jcmVhdGVDbGFzczIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY3JlYXRlQ2xhc3MnKTtcblxudmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4nKTtcblxudmFyIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4yKTtcblxudmFyIF9pbmhlcml0czIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvaW5oZXJpdHMnKTtcblxudmFyIF9pbmhlcml0czMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbmhlcml0czIpO1xuXG52YXIgX3JlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxudmFyIF9yZWFjdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZWFjdCk7XG5cbnZhciBfcHJvcFR5cGVzID0gcmVxdWlyZSgncHJvcC10eXBlcycpO1xuXG52YXIgX3Byb3BUeXBlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9wVHlwZXMpO1xuXG52YXIgX2NsYXNzbmFtZXMyID0gcmVxdWlyZSgnY2xhc3NuYW1lcycpO1xuXG52YXIgX2NsYXNzbmFtZXMzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NuYW1lczIpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyAnZGVmYXVsdCc6IG9iaiB9OyB9XG5cbnZhciBUYWJCYXJSb290Tm9kZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gICgwLCBfaW5oZXJpdHMzWydkZWZhdWx0J10pKFRhYkJhclJvb3ROb2RlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBUYWJCYXJSb290Tm9kZSgpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrM1snZGVmYXVsdCddKSh0aGlzLCBUYWJCYXJSb290Tm9kZSk7XG4gICAgcmV0dXJuICgwLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjNbJ2RlZmF1bHQnXSkodGhpcywgKFRhYkJhclJvb3ROb2RlLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoVGFiQmFyUm9vdE5vZGUpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfVxuXG4gICgwLCBfY3JlYXRlQ2xhc3MzWydkZWZhdWx0J10pKFRhYkJhclJvb3ROb2RlLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICAgIHByZWZpeENscyA9IF9wcm9wcy5wcmVmaXhDbHMsXG4gICAgICAgICAgb25LZXlEb3duID0gX3Byb3BzLm9uS2V5RG93bixcbiAgICAgICAgICBjbGFzc05hbWUgPSBfcHJvcHMuY2xhc3NOYW1lLFxuICAgICAgICAgIGV4dHJhQ29udGVudCA9IF9wcm9wcy5leHRyYUNvbnRlbnQsXG4gICAgICAgICAgc3R5bGUgPSBfcHJvcHMuc3R5bGUsXG4gICAgICAgICAgdGFiQmFyUG9zaXRpb24gPSBfcHJvcHMudGFiQmFyUG9zaXRpb24sXG4gICAgICAgICAgY2hpbGRyZW4gPSBfcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgcmVzdFByb3BzID0gKDAsIF9vYmplY3RXaXRob3V0UHJvcGVydGllczNbJ2RlZmF1bHQnXSkoX3Byb3BzLCBbJ3ByZWZpeENscycsICdvbktleURvd24nLCAnY2xhc3NOYW1lJywgJ2V4dHJhQ29udGVudCcsICdzdHlsZScsICd0YWJCYXJQb3NpdGlvbicsICdjaGlsZHJlbiddKTtcblxuICAgICAgdmFyIGNscyA9ICgwLCBfY2xhc3NuYW1lczNbJ2RlZmF1bHQnXSkocHJlZml4Q2xzICsgJy1iYXInLCAoMCwgX2RlZmluZVByb3BlcnR5M1snZGVmYXVsdCddKSh7fSwgY2xhc3NOYW1lLCAhIWNsYXNzTmFtZSkpO1xuICAgICAgdmFyIHRvcE9yQm90dG9tID0gdGFiQmFyUG9zaXRpb24gPT09ICd0b3AnIHx8IHRhYkJhclBvc2l0aW9uID09PSAnYm90dG9tJztcbiAgICAgIHZhciB0YWJCYXJFeHRyYUNvbnRlbnRTdHlsZSA9IHRvcE9yQm90dG9tID8geyBmbG9hdDogJ3JpZ2h0JyB9IDoge307XG4gICAgICB2YXIgZXh0cmFDb250ZW50U3R5bGUgPSBleHRyYUNvbnRlbnQgJiYgZXh0cmFDb250ZW50LnByb3BzID8gZXh0cmFDb250ZW50LnByb3BzLnN0eWxlIDoge307XG4gICAgICB2YXIgbmV3Q2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICAgIGlmIChleHRyYUNvbnRlbnQpIHtcbiAgICAgICAgbmV3Q2hpbGRyZW4gPSBbKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGV4dHJhQ29udGVudCwge1xuICAgICAgICAgIGtleTogJ2V4dHJhJyxcbiAgICAgICAgICBzdHlsZTogKDAsIF9leHRlbmRzM1snZGVmYXVsdCddKSh7fSwgdGFiQmFyRXh0cmFDb250ZW50U3R5bGUsIGV4dHJhQ29udGVudFN0eWxlKVxuICAgICAgICB9KSwgKDAsIF9yZWFjdC5jbG9uZUVsZW1lbnQpKGNoaWxkcmVuLCB7IGtleTogJ2NvbnRlbnQnIH0pXTtcbiAgICAgICAgbmV3Q2hpbGRyZW4gPSB0b3BPckJvdHRvbSA/IG5ld0NoaWxkcmVuIDogbmV3Q2hpbGRyZW4ucmV2ZXJzZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAnZGl2JyxcbiAgICAgICAgKDAsIF9leHRlbmRzM1snZGVmYXVsdCddKSh7XG4gICAgICAgICAgcm9sZTogJ3RhYmxpc3QnLFxuICAgICAgICAgIGNsYXNzTmFtZTogY2xzLFxuICAgICAgICAgIHRhYkluZGV4OiAnMCcsXG4gICAgICAgICAgcmVmOiB0aGlzLnByb3BzLnNhdmVSZWYoJ3Jvb3QnKSxcbiAgICAgICAgICBvbktleURvd246IG9uS2V5RG93bixcbiAgICAgICAgICBzdHlsZTogc3R5bGVcbiAgICAgICAgfSwgKDAsIF91dGlscy5nZXREYXRhQXR0cikocmVzdFByb3BzKSksXG4gICAgICAgIG5ld0NoaWxkcmVuXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gVGFiQmFyUm9vdE5vZGU7XG59KF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBUYWJCYXJSb290Tm9kZTtcblxuXG5UYWJCYXJSb290Tm9kZS5wcm9wVHlwZXMgPSB7XG4gIHByZWZpeENsczogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIHN0eWxlOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm9iamVjdCxcbiAgdGFiQmFyUG9zaXRpb246IF9wcm9wVHlwZXMyWydkZWZhdWx0J10ub25lT2YoWydsZWZ0JywgJ3JpZ2h0JywgJ3RvcCcsICdib3R0b20nXSksXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLm5vZGUsXG4gIGV4dHJhQ29udGVudDogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ub2RlLFxuICBvbktleURvd246IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgc2F2ZVJlZjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jXG59O1xuXG5UYWJCYXJSb290Tm9kZS5kZWZhdWx0UHJvcHMgPSB7XG4gIHByZWZpeENsczogJycsXG4gIGNsYXNzTmFtZTogJycsXG4gIHN0eWxlOiB7fSxcbiAgdGFiQmFyUG9zaXRpb246ICd0b3AnLFxuICBleHRyYUNvbnRlbnQ6IG51bGwsXG4gIGNoaWxkcmVuOiBudWxsLFxuICBvbktleURvd246IGZ1bmN0aW9uIG9uS2V5RG93bigpIHt9LFxuICBzYXZlUmVmOiBmdW5jdGlvbiBzYXZlUmVmKCkge31cbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkyID0gcmVxdWlyZSgnYmFiZWwtcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5Jyk7XG5cbnZhciBfZGVmaW5lUHJvcGVydHkzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmaW5lUHJvcGVydHkyKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbnZhciBfY2xhc3NuYW1lczUgPSByZXF1aXJlKCdjbGFzc25hbWVzJyk7XG5cbnZhciBfY2xhc3NuYW1lczYgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc25hbWVzNSk7XG5cbnZhciBfYWRkRXZlbnRMaXN0ZW5lciA9IHJlcXVpcmUoJ3JjLXV0aWwvbGliL0RvbS9hZGRFdmVudExpc3RlbmVyJyk7XG5cbnZhciBfYWRkRXZlbnRMaXN0ZW5lcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hZGRFdmVudExpc3RlbmVyKTtcblxudmFyIF9kZWJvdW5jZSA9IHJlcXVpcmUoJ2xvZGFzaC9kZWJvdW5jZScpO1xuXG52YXIgX2RlYm91bmNlMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlYm91bmNlKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgJ2RlZmF1bHQnOiBvYmogfTsgfVxuXG52YXIgU2Nyb2xsYWJsZVRhYkJhck5vZGUgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzM1snZGVmYXVsdCddKShTY3JvbGxhYmxlVGFiQmFyTm9kZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU2Nyb2xsYWJsZVRhYkJhck5vZGUocHJvcHMpIHtcbiAgICAoMCwgX2NsYXNzQ2FsbENoZWNrM1snZGVmYXVsdCddKSh0aGlzLCBTY3JvbGxhYmxlVGFiQmFyTm9kZSk7XG5cbiAgICB2YXIgX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zWydkZWZhdWx0J10pKHRoaXMsIChTY3JvbGxhYmxlVGFiQmFyTm9kZS5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNjcm9sbGFibGVUYWJCYXJOb2RlKSkuY2FsbCh0aGlzLCBwcm9wcykpO1xuXG4gICAgX3RoaXMucHJldlRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUucHJvcGVydHlOYW1lICE9PSAnb3BhY2l0eScpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGNvbnRhaW5lciA9IF90aGlzLnByb3BzLmdldFJlZignY29udGFpbmVyJyk7XG4gICAgICBfdGhpcy5zY3JvbGxUb0FjdGl2ZVRhYih7XG4gICAgICAgIHRhcmdldDogY29udGFpbmVyLFxuICAgICAgICBjdXJyZW50VGFyZ2V0OiBjb250YWluZXJcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBfdGhpcy5zY3JvbGxUb0FjdGl2ZVRhYiA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICB2YXIgYWN0aXZlVGFiID0gX3RoaXMucHJvcHMuZ2V0UmVmKCdhY3RpdmVUYWInKTtcbiAgICAgIHZhciBuYXZXcmFwID0gX3RoaXMucHJvcHMuZ2V0UmVmKCduYXZXcmFwJyk7XG4gICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0IHx8ICFhY3RpdmVUYWIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyB3aGVuIG5vdCBzY3JvbGxhYmxlIG9yIGVudGVyIHNjcm9sbGFibGUgZmlyc3QgdGltZSwgZG9uJ3QgZW1pdCBzY3JvbGxpbmdcbiAgICAgIHZhciBuZWVkVG9Tcm9sbCA9IF90aGlzLmlzTmV4dFByZXZTaG93bigpICYmIF90aGlzLmxhc3ROZXh0UHJldlNob3duO1xuICAgICAgX3RoaXMubGFzdE5leHRQcmV2U2hvd24gPSBfdGhpcy5pc05leHRQcmV2U2hvd24oKTtcbiAgICAgIGlmICghbmVlZFRvU3JvbGwpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgYWN0aXZlVGFiV0ggPSBfdGhpcy5nZXRTY3JvbGxXSChhY3RpdmVUYWIpO1xuICAgICAgdmFyIG5hdldyYXBOb2RlV0ggPSBfdGhpcy5nZXRPZmZzZXRXSChuYXZXcmFwKTtcbiAgICAgIHZhciBvZmZzZXQgPSBfdGhpcy5vZmZzZXQ7XG5cbiAgICAgIHZhciB3cmFwT2Zmc2V0ID0gX3RoaXMuZ2V0T2Zmc2V0TFQobmF2V3JhcCk7XG4gICAgICB2YXIgYWN0aXZlVGFiT2Zmc2V0ID0gX3RoaXMuZ2V0T2Zmc2V0TFQoYWN0aXZlVGFiKTtcbiAgICAgIGlmICh3cmFwT2Zmc2V0ID4gYWN0aXZlVGFiT2Zmc2V0KSB7XG4gICAgICAgIG9mZnNldCArPSB3cmFwT2Zmc2V0IC0gYWN0aXZlVGFiT2Zmc2V0O1xuICAgICAgICBfdGhpcy5zZXRPZmZzZXQob2Zmc2V0KTtcbiAgICAgIH0gZWxzZSBpZiAod3JhcE9mZnNldCArIG5hdldyYXBOb2RlV0ggPCBhY3RpdmVUYWJPZmZzZXQgKyBhY3RpdmVUYWJXSCkge1xuICAgICAgICBvZmZzZXQgLT0gYWN0aXZlVGFiT2Zmc2V0ICsgYWN0aXZlVGFiV0ggLSAod3JhcE9mZnNldCArIG5hdldyYXBOb2RlV0gpO1xuICAgICAgICBfdGhpcy5zZXRPZmZzZXQob2Zmc2V0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3RoaXMucHJldiA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBfdGhpcy5wcm9wcy5vblByZXZDbGljayhlKTtcbiAgICAgIHZhciBuYXZXcmFwTm9kZSA9IF90aGlzLnByb3BzLmdldFJlZignbmF2V3JhcCcpO1xuICAgICAgdmFyIG5hdldyYXBOb2RlV0ggPSBfdGhpcy5nZXRPZmZzZXRXSChuYXZXcmFwTm9kZSk7XG4gICAgICB2YXIgb2Zmc2V0ID0gX3RoaXMub2Zmc2V0O1xuXG4gICAgICBfdGhpcy5zZXRPZmZzZXQob2Zmc2V0ICsgbmF2V3JhcE5vZGVXSCk7XG4gICAgfTtcblxuICAgIF90aGlzLm5leHQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgX3RoaXMucHJvcHMub25OZXh0Q2xpY2soZSk7XG4gICAgICB2YXIgbmF2V3JhcE5vZGUgPSBfdGhpcy5wcm9wcy5nZXRSZWYoJ25hdldyYXAnKTtcbiAgICAgIHZhciBuYXZXcmFwTm9kZVdIID0gX3RoaXMuZ2V0T2Zmc2V0V0gobmF2V3JhcE5vZGUpO1xuICAgICAgdmFyIG9mZnNldCA9IF90aGlzLm9mZnNldDtcblxuICAgICAgX3RoaXMuc2V0T2Zmc2V0KG9mZnNldCAtIG5hdldyYXBOb2RlV0gpO1xuICAgIH07XG5cbiAgICBfdGhpcy5vZmZzZXQgPSAwO1xuXG4gICAgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBuZXh0OiBmYWxzZSxcbiAgICAgIHByZXY6IGZhbHNlXG4gICAgfTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzM1snZGVmYXVsdCddKShTY3JvbGxhYmxlVGFiQmFyTm9kZSwgW3tcbiAgICBrZXk6ICdjb21wb25lbnREaWRNb3VudCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgIHRoaXMuY29tcG9uZW50RGlkVXBkYXRlKCk7XG4gICAgICB0aGlzLmRlYm91bmNlZFJlc2l6ZSA9ICgwLCBfZGVib3VuY2UyWydkZWZhdWx0J10pKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3RoaXMyLnNldE5leHRQcmV2KCk7XG4gICAgICAgIF90aGlzMi5zY3JvbGxUb0FjdGl2ZVRhYigpO1xuICAgICAgfSwgMjAwKTtcbiAgICAgIHRoaXMucmVzaXplRXZlbnQgPSAoMCwgX2FkZEV2ZW50TGlzdGVuZXIyWydkZWZhdWx0J10pKHdpbmRvdywgJ3Jlc2l6ZScsIHRoaXMuZGVib3VuY2VkUmVzaXplKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjb21wb25lbnREaWRVcGRhdGUnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgaWYgKHByZXZQcm9wcyAmJiBwcmV2UHJvcHMudGFiQmFyUG9zaXRpb24gIT09IHByb3BzLnRhYkJhclBvc2l0aW9uKSB7XG4gICAgICAgIHRoaXMuc2V0T2Zmc2V0KDApO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV4dFByZXYgPSB0aGlzLnNldE5leHRQcmV2KCk7XG4gICAgICAvLyB3YWl0IG5leHQsIHByZXYgc2hvdyBoaWRlXG4gICAgICAvKiBlc2xpbnQgcmVhY3Qvbm8tZGlkLXVwZGF0ZS1zZXQtc3RhdGU6MCAqL1xuICAgICAgaWYgKHRoaXMuaXNOZXh0UHJldlNob3duKHRoaXMuc3RhdGUpICE9PSB0aGlzLmlzTmV4dFByZXZTaG93bihuZXh0UHJldikpIHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7fSwgdGhpcy5zY3JvbGxUb0FjdGl2ZVRhYik7XG4gICAgICB9IGVsc2UgaWYgKCFwcmV2UHJvcHMgfHwgcHJvcHMuYWN0aXZlS2V5ICE9PSBwcmV2UHJvcHMuYWN0aXZlS2V5KSB7XG4gICAgICAgIC8vIGNhbiBub3QgdXNlIHByb3BzLmFjdGl2ZUtleVxuICAgICAgICB0aGlzLnNjcm9sbFRvQWN0aXZlVGFiKCk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY29tcG9uZW50V2lsbFVubW91bnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLnJlc2l6ZUV2ZW50KSB7XG4gICAgICAgIHRoaXMucmVzaXplRXZlbnQucmVtb3ZlKCk7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5kZWJvdW5jZWRSZXNpemUgJiYgdGhpcy5kZWJvdW5jZWRSZXNpemUuY2FuY2VsKSB7XG4gICAgICAgIHRoaXMuZGVib3VuY2VkUmVzaXplLmNhbmNlbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldE5leHRQcmV2JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TmV4dFByZXYoKSB7XG4gICAgICB2YXIgbmF2Tm9kZSA9IHRoaXMucHJvcHMuZ2V0UmVmKCduYXYnKTtcbiAgICAgIHZhciBuYXZUYWJzQ29udGFpbmVyID0gdGhpcy5wcm9wcy5nZXRSZWYoJ25hdlRhYnNDb250YWluZXInKTtcbiAgICAgIHZhciBuYXZOb2RlV0ggPSB0aGlzLmdldFNjcm9sbFdIKG5hdlRhYnNDb250YWluZXIgfHwgbmF2Tm9kZSk7XG4gICAgICAvLyBBZGQgMXB4IHRvIGZpeCBgb2Zmc2V0V2lkdGhgIHdpdGggZGVjaW1hbCBpbiBDaHJvbWUgbm90IGNvcnJlY3QgaGFuZGxlXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy8xMzQyM1xuICAgICAgdmFyIGNvbnRhaW5lcldIID0gdGhpcy5nZXRPZmZzZXRXSCh0aGlzLnByb3BzLmdldFJlZignY29udGFpbmVyJykpICsgMTtcbiAgICAgIHZhciBuYXZXcmFwTm9kZVdIID0gdGhpcy5nZXRPZmZzZXRXSCh0aGlzLnByb3BzLmdldFJlZignbmF2V3JhcCcpKTtcbiAgICAgIHZhciBvZmZzZXQgPSB0aGlzLm9mZnNldDtcblxuICAgICAgdmFyIG1pbk9mZnNldCA9IGNvbnRhaW5lcldIIC0gbmF2Tm9kZVdIO1xuICAgICAgdmFyIF9zdGF0ZSA9IHRoaXMuc3RhdGUsXG4gICAgICAgICAgbmV4dCA9IF9zdGF0ZS5uZXh0LFxuICAgICAgICAgIHByZXYgPSBfc3RhdGUucHJldjtcblxuICAgICAgaWYgKG1pbk9mZnNldCA+PSAwKSB7XG4gICAgICAgIG5leHQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZXRPZmZzZXQoMCwgZmFsc2UpO1xuICAgICAgICBvZmZzZXQgPSAwO1xuICAgICAgfSBlbHNlIGlmIChtaW5PZmZzZXQgPCBvZmZzZXQpIHtcbiAgICAgICAgbmV4dCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0ID0gZmFsc2U7XG4gICAgICAgIC8vIEZpeCBodHRwczovL2dpdGh1Yi5jb20vYW50LWRlc2lnbi9hbnQtZGVzaWduL2lzc3Vlcy84ODYxXG4gICAgICAgIC8vIFRlc3Qgd2l0aCBjb250YWluZXIgb2Zmc2V0IHdoaWNoIGlzIHN0YWJsZVxuICAgICAgICAvLyBhbmQgc2V0IHRoZSBvZmZzZXQgb2YgdGhlIG5hdiB3cmFwIG5vZGVcbiAgICAgICAgdmFyIHJlYWxPZmZzZXQgPSBuYXZXcmFwTm9kZVdIIC0gbmF2Tm9kZVdIO1xuICAgICAgICB0aGlzLnNldE9mZnNldChyZWFsT2Zmc2V0LCBmYWxzZSk7XG4gICAgICAgIG9mZnNldCA9IHJlYWxPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChvZmZzZXQgPCAwKSB7XG4gICAgICAgIHByZXYgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJldiA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldE5leHQobmV4dCk7XG4gICAgICB0aGlzLnNldFByZXYocHJldik7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBuZXh0LFxuICAgICAgICBwcmV2OiBwcmV2XG4gICAgICB9O1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldE9mZnNldFdIJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T2Zmc2V0V0gobm9kZSkge1xuICAgICAgdmFyIHRhYkJhclBvc2l0aW9uID0gdGhpcy5wcm9wcy50YWJCYXJQb3NpdGlvbjtcbiAgICAgIHZhciBwcm9wID0gJ29mZnNldFdpZHRoJztcbiAgICAgIGlmICh0YWJCYXJQb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHRhYkJhclBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgIHByb3AgPSAnb2Zmc2V0SGVpZ2h0JztcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlW3Byb3BdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFNjcm9sbFdIJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0U2Nyb2xsV0gobm9kZSkge1xuICAgICAgdmFyIHRhYkJhclBvc2l0aW9uID0gdGhpcy5wcm9wcy50YWJCYXJQb3NpdGlvbjtcbiAgICAgIHZhciBwcm9wID0gJ3Njcm9sbFdpZHRoJztcbiAgICAgIGlmICh0YWJCYXJQb3NpdGlvbiA9PT0gJ2xlZnQnIHx8IHRhYkJhclBvc2l0aW9uID09PSAncmlnaHQnKSB7XG4gICAgICAgIHByb3AgPSAnc2Nyb2xsSGVpZ2h0JztcbiAgICAgIH1cbiAgICAgIHJldHVybiBub2RlW3Byb3BdO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldE9mZnNldExUJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T2Zmc2V0TFQobm9kZSkge1xuICAgICAgdmFyIHRhYkJhclBvc2l0aW9uID0gdGhpcy5wcm9wcy50YWJCYXJQb3NpdGlvbjtcbiAgICAgIHZhciBwcm9wID0gJ2xlZnQnO1xuICAgICAgaWYgKHRhYkJhclBvc2l0aW9uID09PSAnbGVmdCcgfHwgdGFiQmFyUG9zaXRpb24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgcHJvcCA9ICd0b3AnO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbcHJvcF07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0T2Zmc2V0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0T2Zmc2V0KG9mZnNldCkge1xuICAgICAgdmFyIGNoZWNrTmV4dFByZXYgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHRydWU7XG5cbiAgICAgIHZhciB0YXJnZXQgPSBNYXRoLm1pbigwLCBvZmZzZXQpO1xuICAgICAgaWYgKHRoaXMub2Zmc2V0ICE9PSB0YXJnZXQpIHtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSB0YXJnZXQ7XG4gICAgICAgIHZhciBuYXZPZmZzZXQgPSB7fTtcbiAgICAgICAgdmFyIHRhYkJhclBvc2l0aW9uID0gdGhpcy5wcm9wcy50YWJCYXJQb3NpdGlvbjtcbiAgICAgICAgdmFyIG5hdlN0eWxlID0gdGhpcy5wcm9wcy5nZXRSZWYoJ25hdicpLnN0eWxlO1xuICAgICAgICB2YXIgdHJhbnNmb3JtU3VwcG9ydGVkID0gKDAsIF91dGlscy5pc1RyYW5zZm9ybVN1cHBvcnRlZCkobmF2U3R5bGUpO1xuICAgICAgICBpZiAodGFiQmFyUG9zaXRpb24gPT09ICdsZWZ0JyB8fCB0YWJCYXJQb3NpdGlvbiA9PT0gJ3JpZ2h0Jykge1xuICAgICAgICAgIGlmICh0cmFuc2Zvcm1TdXBwb3J0ZWQpIHtcbiAgICAgICAgICAgIG5hdk9mZnNldCA9IHtcbiAgICAgICAgICAgICAgdmFsdWU6ICd0cmFuc2xhdGUzZCgwLCcgKyB0YXJnZXQgKyAncHgsMCknXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuYXZPZmZzZXQgPSB7XG4gICAgICAgICAgICAgIG5hbWU6ICd0b3AnLFxuICAgICAgICAgICAgICB2YWx1ZTogdGFyZ2V0ICsgJ3B4J1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHJhbnNmb3JtU3VwcG9ydGVkKSB7XG4gICAgICAgICAgbmF2T2Zmc2V0ID0ge1xuICAgICAgICAgICAgdmFsdWU6ICd0cmFuc2xhdGUzZCgnICsgdGFyZ2V0ICsgJ3B4LDAsMCknXG4gICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuYXZPZmZzZXQgPSB7XG4gICAgICAgICAgICBuYW1lOiAnbGVmdCcsXG4gICAgICAgICAgICB2YWx1ZTogdGFyZ2V0ICsgJ3B4J1xuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRyYW5zZm9ybVN1cHBvcnRlZCkge1xuICAgICAgICAgICgwLCBfdXRpbHMuc2V0VHJhbnNmb3JtKShuYXZTdHlsZSwgbmF2T2Zmc2V0LnZhbHVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuYXZTdHlsZVtuYXZPZmZzZXQubmFtZV0gPSBuYXZPZmZzZXQudmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoZWNrTmV4dFByZXYpIHtcbiAgICAgICAgICB0aGlzLnNldE5leHRQcmV2KCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRQcmV2JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0UHJldih2KSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZS5wcmV2ICE9PSB2KSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIHByZXY6IHZcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0TmV4dCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldE5leHQodikge1xuICAgICAgaWYgKHRoaXMuc3RhdGUubmV4dCAhPT0gdikge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBuZXh0OiB2XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2lzTmV4dFByZXZTaG93bicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlzTmV4dFByZXZTaG93bihzdGF0ZSkge1xuICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5uZXh0IHx8IHN0YXRlLnByZXY7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZS5uZXh0IHx8IHRoaXMuc3RhdGUucHJldjtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdyZW5kZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICB2YXIgX2NsYXNzbmFtZXMsIF9jbGFzc25hbWVzMiwgX2NsYXNzbmFtZXMzLCBfY2xhc3NuYW1lczQ7XG5cbiAgICAgIHZhciBfc3RhdGUyID0gdGhpcy5zdGF0ZSxcbiAgICAgICAgICBuZXh0ID0gX3N0YXRlMi5uZXh0LFxuICAgICAgICAgIHByZXYgPSBfc3RhdGUyLnByZXY7XG4gICAgICB2YXIgX3Byb3BzID0gdGhpcy5wcm9wcyxcbiAgICAgICAgICBwcmVmaXhDbHMgPSBfcHJvcHMucHJlZml4Q2xzLFxuICAgICAgICAgIHNjcm9sbEFuaW1hdGVkID0gX3Byb3BzLnNjcm9sbEFuaW1hdGVkLFxuICAgICAgICAgIG5hdldyYXBwZXIgPSBfcHJvcHMubmF2V3JhcHBlcixcbiAgICAgICAgICBwcmV2SWNvbiA9IF9wcm9wcy5wcmV2SWNvbixcbiAgICAgICAgICBuZXh0SWNvbiA9IF9wcm9wcy5uZXh0SWNvbjtcblxuICAgICAgdmFyIHNob3dOZXh0UHJldiA9IHByZXYgfHwgbmV4dDtcblxuICAgICAgdmFyIHByZXZCdXR0b24gPSBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7XG4gICAgICAgICAgb25DbGljazogcHJldiA/IHRoaXMucHJldiA6IG51bGwsXG4gICAgICAgICAgdW5zZWxlY3RhYmxlOiAndW5zZWxlY3RhYmxlJyxcbiAgICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lczZbJ2RlZmF1bHQnXSkoKF9jbGFzc25hbWVzID0ge30sICgwLCBfZGVmaW5lUHJvcGVydHkzWydkZWZhdWx0J10pKF9jbGFzc25hbWVzLCBwcmVmaXhDbHMgKyAnLXRhYi1wcmV2JywgMSksICgwLCBfZGVmaW5lUHJvcGVydHkzWydkZWZhdWx0J10pKF9jbGFzc25hbWVzLCBwcmVmaXhDbHMgKyAnLXRhYi1idG4tZGlzYWJsZWQnLCAhcHJldiksICgwLCBfZGVmaW5lUHJvcGVydHkzWydkZWZhdWx0J10pKF9jbGFzc25hbWVzLCBwcmVmaXhDbHMgKyAnLXRhYi1hcnJvdy1zaG93Jywgc2hvd05leHRQcmV2KSwgX2NsYXNzbmFtZXMpKSxcbiAgICAgICAgICBvblRyYW5zaXRpb25FbmQ6IHRoaXMucHJldlRyYW5zaXRpb25FbmRcbiAgICAgICAgfSxcbiAgICAgICAgcHJldkljb24gfHwgX3JlYWN0MlsnZGVmYXVsdCddLmNyZWF0ZUVsZW1lbnQoJ3NwYW4nLCB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy10YWItcHJldi1pY29uJyB9KVxuICAgICAgKTtcblxuICAgICAgdmFyIG5leHRCdXR0b24gPSBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ3NwYW4nLFxuICAgICAgICB7XG4gICAgICAgICAgb25DbGljazogbmV4dCA/IHRoaXMubmV4dCA6IG51bGwsXG4gICAgICAgICAgdW5zZWxlY3RhYmxlOiAndW5zZWxlY3RhYmxlJyxcbiAgICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lczZbJ2RlZmF1bHQnXSkoKF9jbGFzc25hbWVzMiA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5M1snZGVmYXVsdCddKShfY2xhc3NuYW1lczIsIHByZWZpeENscyArICctdGFiLW5leHQnLCAxKSwgKDAsIF9kZWZpbmVQcm9wZXJ0eTNbJ2RlZmF1bHQnXSkoX2NsYXNzbmFtZXMyLCBwcmVmaXhDbHMgKyAnLXRhYi1idG4tZGlzYWJsZWQnLCAhbmV4dCksICgwLCBfZGVmaW5lUHJvcGVydHkzWydkZWZhdWx0J10pKF9jbGFzc25hbWVzMiwgcHJlZml4Q2xzICsgJy10YWItYXJyb3ctc2hvdycsIHNob3dOZXh0UHJldiksIF9jbGFzc25hbWVzMikpXG4gICAgICAgIH0sXG4gICAgICAgIG5leHRJY29uIHx8IF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KCdzcGFuJywgeyBjbGFzc05hbWU6IHByZWZpeENscyArICctdGFiLW5leHQtaWNvbicgfSlcbiAgICAgICk7XG5cbiAgICAgIHZhciBuYXZDbGFzc05hbWUgPSBwcmVmaXhDbHMgKyAnLW5hdic7XG4gICAgICB2YXIgbmF2Q2xhc3NlcyA9ICgwLCBfY2xhc3NuYW1lczZbJ2RlZmF1bHQnXSkoKF9jbGFzc25hbWVzMyA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5M1snZGVmYXVsdCddKShfY2xhc3NuYW1lczMsIG5hdkNsYXNzTmFtZSwgdHJ1ZSksICgwLCBfZGVmaW5lUHJvcGVydHkzWydkZWZhdWx0J10pKF9jbGFzc25hbWVzMywgc2Nyb2xsQW5pbWF0ZWQgPyBuYXZDbGFzc05hbWUgKyAnLWFuaW1hdGVkJyA6IG5hdkNsYXNzTmFtZSArICctbm8tYW5pbWF0ZWQnLCB0cnVlKSwgX2NsYXNzbmFtZXMzKSk7XG5cbiAgICAgIHJldHVybiBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgJ2RpdicsXG4gICAgICAgIHtcbiAgICAgICAgICBjbGFzc05hbWU6ICgwLCBfY2xhc3NuYW1lczZbJ2RlZmF1bHQnXSkoKF9jbGFzc25hbWVzNCA9IHt9LCAoMCwgX2RlZmluZVByb3BlcnR5M1snZGVmYXVsdCddKShfY2xhc3NuYW1lczQsIHByZWZpeENscyArICctbmF2LWNvbnRhaW5lcicsIDEpLCAoMCwgX2RlZmluZVByb3BlcnR5M1snZGVmYXVsdCddKShfY2xhc3NuYW1lczQsIHByZWZpeENscyArICctbmF2LWNvbnRhaW5lci1zY3JvbGxpbmcnLCBzaG93TmV4dFByZXYpLCBfY2xhc3NuYW1lczQpKSxcbiAgICAgICAgICBrZXk6ICdjb250YWluZXInLFxuICAgICAgICAgIHJlZjogdGhpcy5wcm9wcy5zYXZlUmVmKCdjb250YWluZXInKVxuICAgICAgICB9LFxuICAgICAgICBwcmV2QnV0dG9uLFxuICAgICAgICBuZXh0QnV0dG9uLFxuICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICB7IGNsYXNzTmFtZTogcHJlZml4Q2xzICsgJy1uYXYtd3JhcCcsIHJlZjogdGhpcy5wcm9wcy5zYXZlUmVmKCduYXZXcmFwJykgfSxcbiAgICAgICAgICBfcmVhY3QyWydkZWZhdWx0J10uY3JlYXRlRWxlbWVudChcbiAgICAgICAgICAgICdkaXYnLFxuICAgICAgICAgICAgeyBjbGFzc05hbWU6IHByZWZpeENscyArICctbmF2LXNjcm9sbCcgfSxcbiAgICAgICAgICAgIF9yZWFjdDJbJ2RlZmF1bHQnXS5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgICAgICAnZGl2JyxcbiAgICAgICAgICAgICAgeyBjbGFzc05hbWU6IG5hdkNsYXNzZXMsIHJlZjogdGhpcy5wcm9wcy5zYXZlUmVmKCduYXYnKSB9LFxuICAgICAgICAgICAgICBuYXZXcmFwcGVyKHRoaXMucHJvcHMuY2hpbGRyZW4pXG4gICAgICAgICAgICApXG4gICAgICAgICAgKVxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gU2Nyb2xsYWJsZVRhYkJhck5vZGU7XG59KF9yZWFjdDJbJ2RlZmF1bHQnXS5Db21wb25lbnQpO1xuXG5leHBvcnRzWydkZWZhdWx0J10gPSBTY3JvbGxhYmxlVGFiQmFyTm9kZTtcblxuXG5TY3JvbGxhYmxlVGFiQmFyTm9kZS5wcm9wVHlwZXMgPSB7XG4gIGFjdGl2ZUtleTogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5zdHJpbmcsXG4gIGdldFJlZjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLmlzUmVxdWlyZWQsXG4gIHNhdmVSZWY6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYy5pc1JlcXVpcmVkLFxuICB0YWJCYXJQb3NpdGlvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5vbmVPZihbJ2xlZnQnLCAncmlnaHQnLCAndG9wJywgJ2JvdHRvbSddKSxcbiAgcHJlZml4Q2xzOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLnN0cmluZyxcbiAgc2Nyb2xsQW5pbWF0ZWQ6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uYm9vbCxcbiAgb25QcmV2Q2xpY2s6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgb25OZXh0Q2xpY2s6IF9wcm9wVHlwZXMyWydkZWZhdWx0J10uZnVuYyxcbiAgbmF2V3JhcHBlcjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5mdW5jLFxuICBjaGlsZHJlbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ub2RlLFxuICBwcmV2SWNvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ub2RlLFxuICBuZXh0SWNvbjogX3Byb3BUeXBlczJbJ2RlZmF1bHQnXS5ub2RlXG59O1xuXG5TY3JvbGxhYmxlVGFiQmFyTm9kZS5kZWZhdWx0UHJvcHMgPSB7XG4gIHRhYkJhclBvc2l0aW9uOiAnbGVmdCcsXG4gIHByZWZpeENsczogJycsXG4gIHNjcm9sbEFuaW1hdGVkOiB0cnVlLFxuICBvblByZXZDbGljazogZnVuY3Rpb24gb25QcmV2Q2xpY2soKSB7fSxcbiAgb25OZXh0Q2xpY2s6IGZ1bmN0aW9uIG9uTmV4dENsaWNrKCkge30sXG4gIG5hdldyYXBwZXI6IGZ1bmN0aW9uIG5hdldyYXBwZXIoZWxlKSB7XG4gICAgcmV0dXJuIGVsZTtcbiAgfVxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddOyIsIid1c2Ugc3RyaWN0JztcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2snKTtcblxudmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcycpO1xuXG52YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cbnZhciBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIgPSByZXF1aXJlKCdiYWJlbC1ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybicpO1xuXG52YXIgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybjIpO1xuXG52YXIgX2luaGVyaXRzMiA9IHJlcXVpcmUoJ2JhYmVsLXJ1bnRpbWUvaGVscGVycy9pbmhlcml0cycpO1xuXG52YXIgX2luaGVyaXRzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2luaGVyaXRzMik7XG5cbnZhciBfcmVhY3QgPSByZXF1aXJlKCdyZWFjdCcpO1xuXG52YXIgX3JlYWN0MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlYWN0KTtcblxudmFyIF9wcm9wVHlwZXMgPSByZXF1aXJlKCdwcm9wLXR5cGVzJyk7XG5cbnZhciBfcHJvcFR5cGVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb3BUeXBlcyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7ICdkZWZhdWx0Jzogb2JqIH07IH1cblxudmFyIFNhdmVSZWYgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICAoMCwgX2luaGVyaXRzM1snZGVmYXVsdCddKShTYXZlUmVmLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTYXZlUmVmKCkge1xuICAgIHZhciBfcmVmO1xuXG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szWydkZWZhdWx0J10pKHRoaXMsIFNhdmVSZWYpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSAoMCwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4zWydkZWZhdWx0J10pKHRoaXMsIChfcmVmID0gU2F2ZVJlZi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKFNhdmVSZWYpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5nZXRSZWYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIF90aGlzW25hbWVdO1xuICAgIH0sIF90aGlzLnNhdmVSZWYgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgIGlmIChub2RlKSB7XG4gICAgICAgICAgX3RoaXNbbmFtZV0gPSBub2RlO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0sIF90ZW1wKSwgKDAsIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuM1snZGVmYXVsdCddKShfdGhpcywgX3JldCk7XG4gIH1cblxuICAoMCwgX2NyZWF0ZUNsYXNzM1snZGVmYXVsdCddKShTYXZlUmVmLCBbe1xuICAgIGtleTogJ3JlbmRlcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuKHRoaXMuc2F2ZVJlZiwgdGhpcy5nZXRSZWYpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gU2F2ZVJlZjtcbn0oX3JlYWN0MlsnZGVmYXVsdCddLkNvbXBvbmVudCk7XG5cbmV4cG9ydHNbJ2RlZmF1bHQnXSA9IFNhdmVSZWY7XG5cblxuU2F2ZVJlZi5wcm9wVHlwZXMgPSB7XG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzMlsnZGVmYXVsdCddLmZ1bmNcbn07XG5cblNhdmVSZWYuZGVmYXVsdFByb3BzID0ge1xuICBjaGlsZHJlbjogZnVuY3Rpb24gY2hpbGRyZW4oKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTsiXSwic291cmNlUm9vdCI6IiJ9